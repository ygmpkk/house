#
# @configure_input@
#
# Instructions for configuring an fptools package.
#
# There are two ways you can get started with an fptools package, either
# by using the unpacked distribution tree in-situ or by installing the
# package.
#
# Using the package directly is easy, just do `make in-place'. (The
# distribution will *not* work straight out of the box, you'll have to do
# this first)
#
# To install the package, you'll have to set one or more of the
# following variables:
#
#  * bindir 
#     path to directory of where you want the executables
#     to be installed.
#  * libdir
#     where you want the library archives to go.
#     Note, if you specify /usr/foo/lib for libdir,
#     the library files for your fptools package will be
#     installed in  /usr/foo/lib/<package>-<version>, e.g.,
#     /usr/foo/lib/ghc-3.00. If you don't want the package/version
#     directory appended, you'll have to modify $(real_libdir)
#     below.
#
#  * datadir
#     path to where the platform-independent files will go.
#     As for libdir, the effective path for the platform-indep
#     stuff is $(datadir)/<package>-<version>. If you want
#     complete control, see $(real_datadir)
#
#  * platform 
#     the platform you're installing for. The configure script
#     makes an educated guess, so you'll only have to set this
#     if it clashes with your reality, I guess.
#
#  * htmldir
#     where to install the HTML documentation files.
#  * pdfdir
#     where to install the PDF documentation files.
#  * psdir
#     where to install the Postscript documentation files.
#
# For more complete instructions, consult the INSTALL file
# that came with the bundle, and/or consult the installation
# documentation in one of the document directories.
#
# Please report any bugs, problems etc. with installing and using this bundle
# Makefile setup to glasgow-haskell-bugs@dcs.gla.ac.uk
# 

# Where the different pieces of the bundle should go:
bindir      = @bindir@
libdir      = @libdir@/$(package)-$(version)
datadir     = @datadir@/$(package)-$(version)

platform    = @TargetPlatform@
prefix      = @prefix@
exec_prefix = @exec_prefix@

# default
htmldir     = $(datadir)/html
psdir       = $(datadir)
pdfdir      = $(datadir)


PERL        = @PerlCmd@
SH	    = /bin/sh
RM          = rm -f
MV          = mv
CP          = cp
LN_S        = @LN_S@
CHMOD       = chmod
INSTALL	    = @INSTALL@
exeext      = @exeext@
SED	    = @SedCmd@
DEFAULT_TMPDIR = /tmp

# sigh
INSTALL_DIR  = ./mkdirhier

#
# Set of package scripts for which you'd like a name-<version> symlink
# to be created, i.e., create a symlink, ghc-$(version), pointing to ghc to
# avoid version vertigo.
#
VERSION_SYMLINKS_FOR=$(PACKAGE_LINKS)

# Binaries to install
PACKAGE_BIN_INSTALL=$(PACKAGE_PRL_SCRIPTS) $(PACKAGE_SH_SCRIPTS)

#----------end of user-serviceable parts------------
#
#
# How to install the different pieces
# 
INSTALL_BIN  = $(INSTALL) $(INSTALL_BIN_OPTS)
INSTALL_LIB  = $(INSTALL) $(INSTALL_LIB_OPTS)
INSTALL_DATA = $(INSTALL) $(INSTALL_DATA_OPTS)

# What's common to all installs
INSTALL_OPTS= $(EXTRA_INSTALL_OPTS)

BIN_PERMS = 755
LIB_PERMS = 644

INSTALL_BIN_OPTS  = -m $(BIN_PERMS) $(INSTALL_OPTS) $(EXTRA_INSTALL_BIN_OPTS)
INSTALL_LIB_OPTS  = -m $(LIB_PERMS) $(INSTALL_OPTS) $(EXTRA_INSTALL_LIB_OPTS)
INSTALL_DATA_OPTS = -m $(LIB_PERMS) $(INSTALL_OPTS) $(EXTRA_INSTALL_DATA_OPTS)

.PHONY: in-place config-pkgs mk-version-symlinks install-dirs install

config-pkgs ::
	@echo "Configuring $(package), version $(version), on $(platform) ..."
	@for i in $(PACKAGE_PRL_SCRIPTS) ""; do \
	  if test "$$i"; then \
	   echo "Creating a configured version of $$i .."; \
	   $(RM) bin/$(platform)/$$i.bak; \
	   if [ -f bin/$(platform)/$$i ]; then $(MV) bin/$(platform)/$$i bin/$(platform)/$$i.bak; fi; \
	   echo "#! $(PERL)"  		            >  bin/$(platform)/$$i ; \
	   echo '$$'"bindir='$(bindir)';"           >> bin/$(platform)/$$i ; \
	   echo '$$'"libdir='$(libdir)';"      	    >> bin/$(platform)/$$i ; \
	   echo '$$'"libexecdir='$(libdir)';"       >> bin/$(platform)/$$i ; \
	   echo '$$'"datadir='$(datadir)';"         >> bin/$(platform)/$$i ; \
	   echo '$$'"SED='$(SED)';"		    >> bin/$(platform)/$$i ; \
	   echo '$$'"DEFAULT_TMPDIR='$(DEFAULT_TMPDIR)';" >> bin/$(platform)/$$i ; \
	   cat bin/$(platform)/$$i.prl   	    >> bin/$(platform)/$$i ; \
	   $(CHMOD) $(BIN_PERMS) bin/$(platform)/$$i; \
	   echo "Done."; \
	  fi; \
	done
	@for i in $(PACKAGE_LIB_PRL_SCRIPTS) ""; do \
	  if test "$$i"; then \
	   echo "Creating a configured version of $$i .."; \
	   $(RM) lib/$(platform)/$$i.bak; \
	   if [ -f lib/$(platform)/$$i ]; then $(MV) lib/$(platform)/$$i lib/$(platform)/$$i.bak; fi; \
	   echo "#! $(PERL)"                       >  lib/$(platform)/$$i ; \
	   echo '$$'"bindir='$(bindir)';"          >> lib/$(platform)/$$i ; \
	   echo '$$'"libdir='$(libdir)';"          >> lib/$(platform)/$$i ; \
	   echo '$$'"libexecdir='$(libdir)';"      >> lib/$(platform)/$$i ; \
	   echo '$$'"datadir='$(datadir)';"        >> lib/$(platform)/$$i ; \
	   echo '$$'"SED='$(SED)';"		   >> lib/$(platform)/$$i ; \
	   echo '$$'"DEFAULT_TMPDIR='$(DEFAULT_TMPDIR)';"  >> lib/$(platform)/$$i ; \
	   cat lib/$(platform)/$$i.prl >> lib/$(platform)/$$i; \
	   $(CHMOD) $(BIN_PERMS) lib/$(platform)/$$i; \
	   echo "Done."; \
	  fi; \
	done
	@for i in $(PACKAGE_SH_SCRIPTS) ""; do \
	  if test "$$i"; then \
	   echo "Creating a configured version of $$i .."; \
	   $(RM) bin/$(platform)/$$i.bak; \
	   if [ -f bin/$(platform)/$$i ]; then $(MV) bin/$(platform)/$$i bin/$(platform)/$$i.bak; fi; \
	   echo "#! $(SH)"                      >  bin/$(platform)/$$i ; \
	   echo "bindir='$(bindir)'"            >> bin/$(platform)/$$i ; \
	   echo "libdir='$(libdir)'"            >> bin/$(platform)/$$i ; \
	   echo "libexecdir='$(libdir)'"        >> bin/$(platform)/$$i ; \
	   echo "datadir='$(datadir)'"          >> bin/$(platform)/$$i ; \
	   echo "SED='$(SED)'"			>> bin/$(platform)/$$i ; \
	   echo "DEFAULT_TMPDIR='$(DEFAULT_TMPDIR)'" >> bin/$(platform)/$$i ; \
	   cat bin/$(platform)/$$i.sh >> bin/$(platform)/$$i; \
	   $(CHMOD) $(BIN_PERMS) bin/$(platform)/$$i; \
	   echo "Done."; \
	  fi; \
	done

in-place ::
	$(MAKE) $(MFLAGS) config-pkgs bindir=`pwd`/bin/$(platform) libdir=`pwd`/lib/$(platform) datadir=`pwd`/share
	if test -x "./post-inplace-script" ; then \
		echo "Running project-specific post-inplace script ..." ; \
		./post-inplace-script $(platform) `pwd` \
			$(package)-$(version); \
		echo "Done" ; \
	fi
	@echo "Finished configuring..to use, add `pwd`/bin/$(platform) to your PATH."

install-dirs ::
	$(INSTALL_DIR) $(bindir)
	(cd lib/$(platform); find . -type d -exec sh -c '../../$(INSTALL_DIR) $$0 $(libdir)/$$0' {} \; )
	(cd share; find . -type d -exec sh -c '../$(INSTALL_DIR) $(datadir)/$$0' {} \; )

install :: config-pkgs install-dirs install-bin install-libs install-datas install-docs postinstall denounce

.PHONY: install-bin install-libs install-datas postinstall denounce

denounce:
	@echo
	@echo =======================================================================
	@echo Installation of $(package)-$(version) was successful.
	@echo
	@echo To use, add $(bindir) to your PATH.
	@echo
	@if test -f share/html/index.html; then \
	   echo For documentation, see $(htmldir)/index.html ; \
	elif test -d share/html ; then \
	   echo Docs can be found in $(htmldir). ; \
	else \
	   echo "Warning: this binary distribution does NOT contain documentation!" ; \
	fi
	@echo =======================================================================

postinstall:
	@if test -x "./post-install-script" ; then \
		echo "Running project-specific post-install script ..." ; \
		./post-install-script $(platform) $(libdir) ; \
		echo "Done" ; \
	fi

install-bin:
	for i in $(PACKAGE_BIN_INSTALL) ""; do \
	   if test -n "$$i" ; then $(INSTALL_BIN) bin/$(platform)/$$i $(bindir); fi; \
	done;
	for i in $(PACKAGE_BINS) ""; do \
	   if test -n "$$i" ; then $(INSTALL_BIN) bin/$(platform)/$$i$(exeext) $(bindir); fi; \
	done;
	@for i in $(VERSION_SYMLINKS_FOR) ""; do \
	   if [ "x$$i" != "x" ]; then 		\
	   	( cd $(bindir); 		\
		  if ( $(PERL) -e '$$fn="'$$i'"; exit ((! -f $$fn || -l $$fn) ? 0 : 1);' ); then \
	   	     echo "Creating a symbolic link from $$i-$(version) to $$i"; \
	   	     $(RM) $$i; \
	             $(LN_S) $$i-$(version) $$i; \
	          else \
	             echo "Creating a symbolic link from $$i-$(version) to $$i failed: \`$$i' already exists"; \
	             echo "Perhaps remove \`$$i' manually?"; \
	             exit 1; \
	          fi;\
		); 				\
	   fi; 					\
	done


install-libs:
	(cd lib/$(platform); find . -type f -exec sh -c '$(CP) $$0 $(libdir)/$$0' {} \; )

install-datas:
	for i in `(cd share; find . -type f )`; do \
	   $(INSTALL_DATA) share/$$i $(datadir)/$$i; \
	done

show-install-setup:
	@echo "Install setup..."
	@echo "bindir  = $(bindir)"
	@echo "libdir  = $(libdir) (libdir  = $(libdir))"
	@echo "datadir = $(datadir) (datadir = $(datadir))"

#
# Documentation targets: install-docs.
#

.PHONY: show-install-setup install-docs install-dirs-docs

install-docs : install-dirs-docs
	if test -d share/html ; then $(CP) -r share/html/* $(htmldir) ; fi
	for i in share/*.ps; do \
		$(CP) $$i $(psdir) ; \
	done

install-dirs-docs:
	$(INSTALL_DIR) $(htmldir) 

