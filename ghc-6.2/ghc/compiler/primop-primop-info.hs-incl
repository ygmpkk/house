primOpInfo CharGtOp = mkCompare FSLIT("gtChar#") charPrimTy
primOpInfo CharGeOp = mkCompare FSLIT("geChar#") charPrimTy
primOpInfo CharEqOp = mkCompare FSLIT("eqChar#") charPrimTy
primOpInfo CharNeOp = mkCompare FSLIT("neChar#") charPrimTy
primOpInfo CharLtOp = mkCompare FSLIT("ltChar#") charPrimTy
primOpInfo CharLeOp = mkCompare FSLIT("leChar#") charPrimTy
primOpInfo OrdOp = mkGenPrimOp FSLIT("ord#")  [] [charPrimTy] (intPrimTy)
primOpInfo IntAddOp = mkDyadic FSLIT("+#") intPrimTy
primOpInfo IntSubOp = mkDyadic FSLIT("-#") intPrimTy
primOpInfo IntMulOp = mkDyadic FSLIT("*#") intPrimTy
primOpInfo IntMulMayOfloOp = mkDyadic FSLIT("mulIntMayOflo#") intPrimTy
primOpInfo IntQuotOp = mkDyadic FSLIT("quotInt#") intPrimTy
primOpInfo IntRemOp = mkDyadic FSLIT("remInt#") intPrimTy
primOpInfo IntGcdOp = mkDyadic FSLIT("gcdInt#") intPrimTy
primOpInfo IntNegOp = mkMonadic FSLIT("negateInt#") intPrimTy
primOpInfo IntAddCOp = mkGenPrimOp FSLIT("addIntC#")  [] [intPrimTy, intPrimTy] ((mkTupleTy Unboxed 2 [intPrimTy, intPrimTy]))
primOpInfo IntSubCOp = mkGenPrimOp FSLIT("subIntC#")  [] [intPrimTy, intPrimTy] ((mkTupleTy Unboxed 2 [intPrimTy, intPrimTy]))
primOpInfo IntGtOp = mkCompare FSLIT(">#") intPrimTy
primOpInfo IntGeOp = mkCompare FSLIT(">=#") intPrimTy
primOpInfo IntEqOp = mkCompare FSLIT("==#") intPrimTy
primOpInfo IntNeOp = mkCompare FSLIT("/=#") intPrimTy
primOpInfo IntLtOp = mkCompare FSLIT("<#") intPrimTy
primOpInfo IntLeOp = mkCompare FSLIT("<=#") intPrimTy
primOpInfo ChrOp = mkGenPrimOp FSLIT("chr#")  [] [intPrimTy] (charPrimTy)
primOpInfo Int2WordOp = mkGenPrimOp FSLIT("int2Word#")  [] [intPrimTy] (wordPrimTy)
primOpInfo Int2FloatOp = mkGenPrimOp FSLIT("int2Float#")  [] [intPrimTy] (floatPrimTy)
primOpInfo Int2DoubleOp = mkGenPrimOp FSLIT("int2Double#")  [] [intPrimTy] (doublePrimTy)
primOpInfo Int2IntegerOp = mkGenPrimOp FSLIT("int2Integer#")  [] [intPrimTy] ((mkTupleTy Unboxed 2 [intPrimTy, byteArrayPrimTy]))
primOpInfo ISllOp = mkGenPrimOp FSLIT("uncheckedIShiftL#")  [] [intPrimTy, intPrimTy] (intPrimTy)
primOpInfo ISraOp = mkGenPrimOp FSLIT("uncheckedIShiftRA#")  [] [intPrimTy, intPrimTy] (intPrimTy)
primOpInfo ISrlOp = mkGenPrimOp FSLIT("uncheckedIShiftRL#")  [] [intPrimTy, intPrimTy] (intPrimTy)
primOpInfo WordAddOp = mkDyadic FSLIT("plusWord#") wordPrimTy
primOpInfo WordSubOp = mkDyadic FSLIT("minusWord#") wordPrimTy
primOpInfo WordMulOp = mkDyadic FSLIT("timesWord#") wordPrimTy
primOpInfo WordQuotOp = mkDyadic FSLIT("quotWord#") wordPrimTy
primOpInfo WordRemOp = mkDyadic FSLIT("remWord#") wordPrimTy
primOpInfo AndOp = mkDyadic FSLIT("and#") wordPrimTy
primOpInfo OrOp = mkDyadic FSLIT("or#") wordPrimTy
primOpInfo XorOp = mkDyadic FSLIT("xor#") wordPrimTy
primOpInfo NotOp = mkMonadic FSLIT("not#") wordPrimTy
primOpInfo SllOp = mkGenPrimOp FSLIT("uncheckedShiftL#")  [] [wordPrimTy, intPrimTy] (wordPrimTy)
primOpInfo SrlOp = mkGenPrimOp FSLIT("uncheckedShiftRL#")  [] [wordPrimTy, intPrimTy] (wordPrimTy)
primOpInfo Word2IntOp = mkGenPrimOp FSLIT("word2Int#")  [] [wordPrimTy] (intPrimTy)
primOpInfo Word2IntegerOp = mkGenPrimOp FSLIT("word2Integer#")  [] [wordPrimTy] ((mkTupleTy Unboxed 2 [intPrimTy, byteArrayPrimTy]))
primOpInfo WordGtOp = mkCompare FSLIT("gtWord#") wordPrimTy
primOpInfo WordGeOp = mkCompare FSLIT("geWord#") wordPrimTy
primOpInfo WordEqOp = mkCompare FSLIT("eqWord#") wordPrimTy
primOpInfo WordNeOp = mkCompare FSLIT("neWord#") wordPrimTy
primOpInfo WordLtOp = mkCompare FSLIT("ltWord#") wordPrimTy
primOpInfo WordLeOp = mkCompare FSLIT("leWord#") wordPrimTy
primOpInfo Narrow8IntOp = mkMonadic FSLIT("narrow8Int#") intPrimTy
primOpInfo Narrow16IntOp = mkMonadic FSLIT("narrow16Int#") intPrimTy
primOpInfo Narrow32IntOp = mkMonadic FSLIT("narrow32Int#") intPrimTy
primOpInfo Narrow8WordOp = mkMonadic FSLIT("narrow8Word#") wordPrimTy
primOpInfo Narrow16WordOp = mkMonadic FSLIT("narrow16Word#") wordPrimTy
primOpInfo Narrow32WordOp = mkMonadic FSLIT("narrow32Word#") wordPrimTy
primOpInfo Int64ToIntegerOp = mkGenPrimOp FSLIT("int64ToInteger#")  [] [int64PrimTy] ((mkTupleTy Unboxed 2 [intPrimTy, byteArrayPrimTy]))
primOpInfo Word64ToIntegerOp = mkGenPrimOp FSLIT("word64ToInteger#")  [] [word64PrimTy] ((mkTupleTy Unboxed 2 [intPrimTy, byteArrayPrimTy]))
primOpInfo IntegerAddOp = mkGenPrimOp FSLIT("plusInteger#")  [] [intPrimTy, byteArrayPrimTy, intPrimTy, byteArrayPrimTy] ((mkTupleTy Unboxed 2 [intPrimTy, byteArrayPrimTy]))
primOpInfo IntegerSubOp = mkGenPrimOp FSLIT("minusInteger#")  [] [intPrimTy, byteArrayPrimTy, intPrimTy, byteArrayPrimTy] ((mkTupleTy Unboxed 2 [intPrimTy, byteArrayPrimTy]))
primOpInfo IntegerMulOp = mkGenPrimOp FSLIT("timesInteger#")  [] [intPrimTy, byteArrayPrimTy, intPrimTy, byteArrayPrimTy] ((mkTupleTy Unboxed 2 [intPrimTy, byteArrayPrimTy]))
primOpInfo IntegerGcdOp = mkGenPrimOp FSLIT("gcdInteger#")  [] [intPrimTy, byteArrayPrimTy, intPrimTy, byteArrayPrimTy] ((mkTupleTy Unboxed 2 [intPrimTy, byteArrayPrimTy]))
primOpInfo IntegerIntGcdOp = mkGenPrimOp FSLIT("gcdIntegerInt#")  [] [intPrimTy, byteArrayPrimTy, intPrimTy] (intPrimTy)
primOpInfo IntegerDivExactOp = mkGenPrimOp FSLIT("divExactInteger#")  [] [intPrimTy, byteArrayPrimTy, intPrimTy, byteArrayPrimTy] ((mkTupleTy Unboxed 2 [intPrimTy, byteArrayPrimTy]))
primOpInfo IntegerQuotOp = mkGenPrimOp FSLIT("quotInteger#")  [] [intPrimTy, byteArrayPrimTy, intPrimTy, byteArrayPrimTy] ((mkTupleTy Unboxed 2 [intPrimTy, byteArrayPrimTy]))
primOpInfo IntegerRemOp = mkGenPrimOp FSLIT("remInteger#")  [] [intPrimTy, byteArrayPrimTy, intPrimTy, byteArrayPrimTy] ((mkTupleTy Unboxed 2 [intPrimTy, byteArrayPrimTy]))
primOpInfo IntegerCmpOp = mkGenPrimOp FSLIT("cmpInteger#")  [] [intPrimTy, byteArrayPrimTy, intPrimTy, byteArrayPrimTy] (intPrimTy)
primOpInfo IntegerCmpIntOp = mkGenPrimOp FSLIT("cmpIntegerInt#")  [] [intPrimTy, byteArrayPrimTy, intPrimTy] (intPrimTy)
primOpInfo IntegerQuotRemOp = mkGenPrimOp FSLIT("quotRemInteger#")  [] [intPrimTy, byteArrayPrimTy, intPrimTy, byteArrayPrimTy] ((mkTupleTy Unboxed 4 [intPrimTy, byteArrayPrimTy, intPrimTy, byteArrayPrimTy]))
primOpInfo IntegerDivModOp = mkGenPrimOp FSLIT("divModInteger#")  [] [intPrimTy, byteArrayPrimTy, intPrimTy, byteArrayPrimTy] ((mkTupleTy Unboxed 4 [intPrimTy, byteArrayPrimTy, intPrimTy, byteArrayPrimTy]))
primOpInfo Integer2IntOp = mkGenPrimOp FSLIT("integer2Int#")  [] [intPrimTy, byteArrayPrimTy] (intPrimTy)
primOpInfo Integer2WordOp = mkGenPrimOp FSLIT("integer2Word#")  [] [intPrimTy, byteArrayPrimTy] (wordPrimTy)
primOpInfo IntegerAndOp = mkGenPrimOp FSLIT("andInteger#")  [] [intPrimTy, byteArrayPrimTy, intPrimTy, byteArrayPrimTy] ((mkTupleTy Unboxed 2 [intPrimTy, byteArrayPrimTy]))
primOpInfo IntegerOrOp = mkGenPrimOp FSLIT("orInteger#")  [] [intPrimTy, byteArrayPrimTy, intPrimTy, byteArrayPrimTy] ((mkTupleTy Unboxed 2 [intPrimTy, byteArrayPrimTy]))
primOpInfo IntegerXorOp = mkGenPrimOp FSLIT("xorInteger#")  [] [intPrimTy, byteArrayPrimTy, intPrimTy, byteArrayPrimTy] ((mkTupleTy Unboxed 2 [intPrimTy, byteArrayPrimTy]))
primOpInfo IntegerComplementOp = mkGenPrimOp FSLIT("complementInteger#")  [] [intPrimTy, byteArrayPrimTy] ((mkTupleTy Unboxed 2 [intPrimTy, byteArrayPrimTy]))
primOpInfo DoubleGtOp = mkCompare FSLIT(">##") doublePrimTy
primOpInfo DoubleGeOp = mkCompare FSLIT(">=##") doublePrimTy
primOpInfo DoubleEqOp = mkCompare FSLIT("==##") doublePrimTy
primOpInfo DoubleNeOp = mkCompare FSLIT("/=##") doublePrimTy
primOpInfo DoubleLtOp = mkCompare FSLIT("<##") doublePrimTy
primOpInfo DoubleLeOp = mkCompare FSLIT("<=##") doublePrimTy
primOpInfo DoubleAddOp = mkDyadic FSLIT("+##") doublePrimTy
primOpInfo DoubleSubOp = mkDyadic FSLIT("-##") doublePrimTy
primOpInfo DoubleMulOp = mkDyadic FSLIT("*##") doublePrimTy
primOpInfo DoubleDivOp = mkDyadic FSLIT("/##") doublePrimTy
primOpInfo DoubleNegOp = mkMonadic FSLIT("negateDouble#") doublePrimTy
primOpInfo Double2IntOp = mkGenPrimOp FSLIT("double2Int#")  [] [doublePrimTy] (intPrimTy)
primOpInfo Double2FloatOp = mkGenPrimOp FSLIT("double2Float#")  [] [doublePrimTy] (floatPrimTy)
primOpInfo DoubleExpOp = mkMonadic FSLIT("expDouble#") doublePrimTy
primOpInfo DoubleLogOp = mkMonadic FSLIT("logDouble#") doublePrimTy
primOpInfo DoubleSqrtOp = mkMonadic FSLIT("sqrtDouble#") doublePrimTy
primOpInfo DoubleSinOp = mkMonadic FSLIT("sinDouble#") doublePrimTy
primOpInfo DoubleCosOp = mkMonadic FSLIT("cosDouble#") doublePrimTy
primOpInfo DoubleTanOp = mkMonadic FSLIT("tanDouble#") doublePrimTy
primOpInfo DoubleAsinOp = mkMonadic FSLIT("asinDouble#") doublePrimTy
primOpInfo DoubleAcosOp = mkMonadic FSLIT("acosDouble#") doublePrimTy
primOpInfo DoubleAtanOp = mkMonadic FSLIT("atanDouble#") doublePrimTy
primOpInfo DoubleSinhOp = mkMonadic FSLIT("sinhDouble#") doublePrimTy
primOpInfo DoubleCoshOp = mkMonadic FSLIT("coshDouble#") doublePrimTy
primOpInfo DoubleTanhOp = mkMonadic FSLIT("tanhDouble#") doublePrimTy
primOpInfo DoublePowerOp = mkDyadic FSLIT("**##") doublePrimTy
primOpInfo DoubleDecodeOp = mkGenPrimOp FSLIT("decodeDouble#")  [] [doublePrimTy] ((mkTupleTy Unboxed 3 [intPrimTy, intPrimTy, byteArrayPrimTy]))
primOpInfo FloatGtOp = mkCompare FSLIT("gtFloat#") floatPrimTy
primOpInfo FloatGeOp = mkCompare FSLIT("geFloat#") floatPrimTy
primOpInfo FloatEqOp = mkCompare FSLIT("eqFloat#") floatPrimTy
primOpInfo FloatNeOp = mkCompare FSLIT("neFloat#") floatPrimTy
primOpInfo FloatLtOp = mkCompare FSLIT("ltFloat#") floatPrimTy
primOpInfo FloatLeOp = mkCompare FSLIT("leFloat#") floatPrimTy
primOpInfo FloatAddOp = mkDyadic FSLIT("plusFloat#") floatPrimTy
primOpInfo FloatSubOp = mkDyadic FSLIT("minusFloat#") floatPrimTy
primOpInfo FloatMulOp = mkDyadic FSLIT("timesFloat#") floatPrimTy
primOpInfo FloatDivOp = mkDyadic FSLIT("divideFloat#") floatPrimTy
primOpInfo FloatNegOp = mkMonadic FSLIT("negateFloat#") floatPrimTy
primOpInfo Float2IntOp = mkGenPrimOp FSLIT("float2Int#")  [] [floatPrimTy] (intPrimTy)
primOpInfo FloatExpOp = mkMonadic FSLIT("expFloat#") floatPrimTy
primOpInfo FloatLogOp = mkMonadic FSLIT("logFloat#") floatPrimTy
primOpInfo FloatSqrtOp = mkMonadic FSLIT("sqrtFloat#") floatPrimTy
primOpInfo FloatSinOp = mkMonadic FSLIT("sinFloat#") floatPrimTy
primOpInfo FloatCosOp = mkMonadic FSLIT("cosFloat#") floatPrimTy
primOpInfo FloatTanOp = mkMonadic FSLIT("tanFloat#") floatPrimTy
primOpInfo FloatAsinOp = mkMonadic FSLIT("asinFloat#") floatPrimTy
primOpInfo FloatAcosOp = mkMonadic FSLIT("acosFloat#") floatPrimTy
primOpInfo FloatAtanOp = mkMonadic FSLIT("atanFloat#") floatPrimTy
primOpInfo FloatSinhOp = mkMonadic FSLIT("sinhFloat#") floatPrimTy
primOpInfo FloatCoshOp = mkMonadic FSLIT("coshFloat#") floatPrimTy
primOpInfo FloatTanhOp = mkMonadic FSLIT("tanhFloat#") floatPrimTy
primOpInfo FloatPowerOp = mkDyadic FSLIT("powerFloat#") floatPrimTy
primOpInfo Float2DoubleOp = mkGenPrimOp FSLIT("float2Double#")  [] [floatPrimTy] (doublePrimTy)
primOpInfo FloatDecodeOp = mkGenPrimOp FSLIT("decodeFloat#")  [] [floatPrimTy] ((mkTupleTy Unboxed 3 [intPrimTy, intPrimTy, byteArrayPrimTy]))
primOpInfo NewArrayOp = mkGenPrimOp FSLIT("newArray#")  [alphaTyVar, deltaTyVar] [intPrimTy, alphaTy, mkStatePrimTy deltaTy] ((mkTupleTy Unboxed 2 [mkStatePrimTy deltaTy, mkMutableArrayPrimTy deltaTy alphaTy]))
primOpInfo SameMutableArrayOp = mkGenPrimOp FSLIT("sameMutableArray#")  [deltaTyVar, alphaTyVar] [mkMutableArrayPrimTy deltaTy alphaTy, mkMutableArrayPrimTy deltaTy alphaTy] (boolTy)
primOpInfo ReadArrayOp = mkGenPrimOp FSLIT("readArray#")  [deltaTyVar, alphaTyVar] [mkMutableArrayPrimTy deltaTy alphaTy, intPrimTy, mkStatePrimTy deltaTy] ((mkTupleTy Unboxed 2 [mkStatePrimTy deltaTy, alphaTy]))
primOpInfo WriteArrayOp = mkGenPrimOp FSLIT("writeArray#")  [deltaTyVar, alphaTyVar] [mkMutableArrayPrimTy deltaTy alphaTy, intPrimTy, alphaTy, mkStatePrimTy deltaTy] (mkStatePrimTy deltaTy)
primOpInfo IndexArrayOp = mkGenPrimOp FSLIT("indexArray#")  [alphaTyVar] [mkArrayPrimTy alphaTy, intPrimTy] ((mkTupleTy Unboxed 1 [alphaTy]))
primOpInfo UnsafeFreezeArrayOp = mkGenPrimOp FSLIT("unsafeFreezeArray#")  [deltaTyVar, alphaTyVar] [mkMutableArrayPrimTy deltaTy alphaTy, mkStatePrimTy deltaTy] ((mkTupleTy Unboxed 2 [mkStatePrimTy deltaTy, mkArrayPrimTy alphaTy]))
primOpInfo UnsafeThawArrayOp = mkGenPrimOp FSLIT("unsafeThawArray#")  [alphaTyVar, deltaTyVar] [mkArrayPrimTy alphaTy, mkStatePrimTy deltaTy] ((mkTupleTy Unboxed 2 [mkStatePrimTy deltaTy, mkMutableArrayPrimTy deltaTy alphaTy]))
primOpInfo NewByteArrayOp_Char = mkGenPrimOp FSLIT("newByteArray#")  [deltaTyVar] [intPrimTy, mkStatePrimTy deltaTy] ((mkTupleTy Unboxed 2 [mkStatePrimTy deltaTy, mkMutableByteArrayPrimTy deltaTy]))
primOpInfo NewPinnedByteArrayOp_Char = mkGenPrimOp FSLIT("newPinnedByteArray#")  [deltaTyVar] [intPrimTy, mkStatePrimTy deltaTy] ((mkTupleTy Unboxed 2 [mkStatePrimTy deltaTy, mkMutableByteArrayPrimTy deltaTy]))
primOpInfo ByteArrayContents_Char = mkGenPrimOp FSLIT("byteArrayContents#")  [] [byteArrayPrimTy] (addrPrimTy)
primOpInfo SameMutableByteArrayOp = mkGenPrimOp FSLIT("sameMutableByteArray#")  [deltaTyVar] [mkMutableByteArrayPrimTy deltaTy, mkMutableByteArrayPrimTy deltaTy] (boolTy)
primOpInfo UnsafeFreezeByteArrayOp = mkGenPrimOp FSLIT("unsafeFreezeByteArray#")  [deltaTyVar] [mkMutableByteArrayPrimTy deltaTy, mkStatePrimTy deltaTy] ((mkTupleTy Unboxed 2 [mkStatePrimTy deltaTy, byteArrayPrimTy]))
primOpInfo SizeofByteArrayOp = mkGenPrimOp FSLIT("sizeofByteArray#")  [] [byteArrayPrimTy] (intPrimTy)
primOpInfo SizeofMutableByteArrayOp = mkGenPrimOp FSLIT("sizeofMutableByteArray#")  [deltaTyVar] [mkMutableByteArrayPrimTy deltaTy] (intPrimTy)
primOpInfo IndexByteArrayOp_Char = mkGenPrimOp FSLIT("indexCharArray#")  [] [byteArrayPrimTy, intPrimTy] (charPrimTy)
primOpInfo IndexByteArrayOp_WideChar = mkGenPrimOp FSLIT("indexWideCharArray#")  [] [byteArrayPrimTy, intPrimTy] (charPrimTy)
primOpInfo IndexByteArrayOp_Int = mkGenPrimOp FSLIT("indexIntArray#")  [] [byteArrayPrimTy, intPrimTy] (intPrimTy)
primOpInfo IndexByteArrayOp_Word = mkGenPrimOp FSLIT("indexWordArray#")  [] [byteArrayPrimTy, intPrimTy] (wordPrimTy)
primOpInfo IndexByteArrayOp_Addr = mkGenPrimOp FSLIT("indexAddrArray#")  [] [byteArrayPrimTy, intPrimTy] (addrPrimTy)
primOpInfo IndexByteArrayOp_Float = mkGenPrimOp FSLIT("indexFloatArray#")  [] [byteArrayPrimTy, intPrimTy] (floatPrimTy)
primOpInfo IndexByteArrayOp_Double = mkGenPrimOp FSLIT("indexDoubleArray#")  [] [byteArrayPrimTy, intPrimTy] (doublePrimTy)
primOpInfo IndexByteArrayOp_StablePtr = mkGenPrimOp FSLIT("indexStablePtrArray#")  [alphaTyVar] [byteArrayPrimTy, intPrimTy] (mkStablePtrPrimTy alphaTy)
primOpInfo IndexByteArrayOp_Int8 = mkGenPrimOp FSLIT("indexInt8Array#")  [] [byteArrayPrimTy, intPrimTy] (intPrimTy)
primOpInfo IndexByteArrayOp_Int16 = mkGenPrimOp FSLIT("indexInt16Array#")  [] [byteArrayPrimTy, intPrimTy] (intPrimTy)
primOpInfo IndexByteArrayOp_Int32 = mkGenPrimOp FSLIT("indexInt32Array#")  [] [byteArrayPrimTy, intPrimTy] (intPrimTy)
primOpInfo IndexByteArrayOp_Int64 = mkGenPrimOp FSLIT("indexInt64Array#")  [] [byteArrayPrimTy, intPrimTy] (int64PrimTy)
primOpInfo IndexByteArrayOp_Word8 = mkGenPrimOp FSLIT("indexWord8Array#")  [] [byteArrayPrimTy, intPrimTy] (wordPrimTy)
primOpInfo IndexByteArrayOp_Word16 = mkGenPrimOp FSLIT("indexWord16Array#")  [] [byteArrayPrimTy, intPrimTy] (wordPrimTy)
primOpInfo IndexByteArrayOp_Word32 = mkGenPrimOp FSLIT("indexWord32Array#")  [] [byteArrayPrimTy, intPrimTy] (wordPrimTy)
primOpInfo IndexByteArrayOp_Word64 = mkGenPrimOp FSLIT("indexWord64Array#")  [] [byteArrayPrimTy, intPrimTy] (word64PrimTy)
primOpInfo ReadByteArrayOp_Char = mkGenPrimOp FSLIT("readCharArray#")  [deltaTyVar] [mkMutableByteArrayPrimTy deltaTy, intPrimTy, mkStatePrimTy deltaTy] ((mkTupleTy Unboxed 2 [mkStatePrimTy deltaTy, charPrimTy]))
primOpInfo ReadByteArrayOp_WideChar = mkGenPrimOp FSLIT("readWideCharArray#")  [deltaTyVar] [mkMutableByteArrayPrimTy deltaTy, intPrimTy, mkStatePrimTy deltaTy] ((mkTupleTy Unboxed 2 [mkStatePrimTy deltaTy, charPrimTy]))
primOpInfo ReadByteArrayOp_Int = mkGenPrimOp FSLIT("readIntArray#")  [deltaTyVar] [mkMutableByteArrayPrimTy deltaTy, intPrimTy, mkStatePrimTy deltaTy] ((mkTupleTy Unboxed 2 [mkStatePrimTy deltaTy, intPrimTy]))
primOpInfo ReadByteArrayOp_Word = mkGenPrimOp FSLIT("readWordArray#")  [deltaTyVar] [mkMutableByteArrayPrimTy deltaTy, intPrimTy, mkStatePrimTy deltaTy] ((mkTupleTy Unboxed 2 [mkStatePrimTy deltaTy, wordPrimTy]))
primOpInfo ReadByteArrayOp_Addr = mkGenPrimOp FSLIT("readAddrArray#")  [deltaTyVar] [mkMutableByteArrayPrimTy deltaTy, intPrimTy, mkStatePrimTy deltaTy] ((mkTupleTy Unboxed 2 [mkStatePrimTy deltaTy, addrPrimTy]))
primOpInfo ReadByteArrayOp_Float = mkGenPrimOp FSLIT("readFloatArray#")  [deltaTyVar] [mkMutableByteArrayPrimTy deltaTy, intPrimTy, mkStatePrimTy deltaTy] ((mkTupleTy Unboxed 2 [mkStatePrimTy deltaTy, floatPrimTy]))
primOpInfo ReadByteArrayOp_Double = mkGenPrimOp FSLIT("readDoubleArray#")  [deltaTyVar] [mkMutableByteArrayPrimTy deltaTy, intPrimTy, mkStatePrimTy deltaTy] ((mkTupleTy Unboxed 2 [mkStatePrimTy deltaTy, doublePrimTy]))
primOpInfo ReadByteArrayOp_StablePtr = mkGenPrimOp FSLIT("readStablePtrArray#")  [deltaTyVar, alphaTyVar] [mkMutableByteArrayPrimTy deltaTy, intPrimTy, mkStatePrimTy deltaTy] ((mkTupleTy Unboxed 2 [mkStatePrimTy deltaTy, mkStablePtrPrimTy alphaTy]))
primOpInfo ReadByteArrayOp_Int8 = mkGenPrimOp FSLIT("readInt8Array#")  [deltaTyVar] [mkMutableByteArrayPrimTy deltaTy, intPrimTy, mkStatePrimTy deltaTy] ((mkTupleTy Unboxed 2 [mkStatePrimTy deltaTy, intPrimTy]))
primOpInfo ReadByteArrayOp_Int16 = mkGenPrimOp FSLIT("readInt16Array#")  [deltaTyVar] [mkMutableByteArrayPrimTy deltaTy, intPrimTy, mkStatePrimTy deltaTy] ((mkTupleTy Unboxed 2 [mkStatePrimTy deltaTy, intPrimTy]))
primOpInfo ReadByteArrayOp_Int32 = mkGenPrimOp FSLIT("readInt32Array#")  [deltaTyVar] [mkMutableByteArrayPrimTy deltaTy, intPrimTy, mkStatePrimTy deltaTy] ((mkTupleTy Unboxed 2 [mkStatePrimTy deltaTy, intPrimTy]))
primOpInfo ReadByteArrayOp_Int64 = mkGenPrimOp FSLIT("readInt64Array#")  [deltaTyVar] [mkMutableByteArrayPrimTy deltaTy, intPrimTy, mkStatePrimTy deltaTy] ((mkTupleTy Unboxed 2 [mkStatePrimTy deltaTy, int64PrimTy]))
primOpInfo ReadByteArrayOp_Word8 = mkGenPrimOp FSLIT("readWord8Array#")  [deltaTyVar] [mkMutableByteArrayPrimTy deltaTy, intPrimTy, mkStatePrimTy deltaTy] ((mkTupleTy Unboxed 2 [mkStatePrimTy deltaTy, wordPrimTy]))
primOpInfo ReadByteArrayOp_Word16 = mkGenPrimOp FSLIT("readWord16Array#")  [deltaTyVar] [mkMutableByteArrayPrimTy deltaTy, intPrimTy, mkStatePrimTy deltaTy] ((mkTupleTy Unboxed 2 [mkStatePrimTy deltaTy, wordPrimTy]))
primOpInfo ReadByteArrayOp_Word32 = mkGenPrimOp FSLIT("readWord32Array#")  [deltaTyVar] [mkMutableByteArrayPrimTy deltaTy, intPrimTy, mkStatePrimTy deltaTy] ((mkTupleTy Unboxed 2 [mkStatePrimTy deltaTy, wordPrimTy]))
primOpInfo ReadByteArrayOp_Word64 = mkGenPrimOp FSLIT("readWord64Array#")  [deltaTyVar] [mkMutableByteArrayPrimTy deltaTy, intPrimTy, mkStatePrimTy deltaTy] ((mkTupleTy Unboxed 2 [mkStatePrimTy deltaTy, word64PrimTy]))
primOpInfo WriteByteArrayOp_Char = mkGenPrimOp FSLIT("writeCharArray#")  [deltaTyVar] [mkMutableByteArrayPrimTy deltaTy, intPrimTy, charPrimTy, mkStatePrimTy deltaTy] (mkStatePrimTy deltaTy)
primOpInfo WriteByteArrayOp_WideChar = mkGenPrimOp FSLIT("writeWideCharArray#")  [deltaTyVar] [mkMutableByteArrayPrimTy deltaTy, intPrimTy, charPrimTy, mkStatePrimTy deltaTy] (mkStatePrimTy deltaTy)
primOpInfo WriteByteArrayOp_Int = mkGenPrimOp FSLIT("writeIntArray#")  [deltaTyVar] [mkMutableByteArrayPrimTy deltaTy, intPrimTy, intPrimTy, mkStatePrimTy deltaTy] (mkStatePrimTy deltaTy)
primOpInfo WriteByteArrayOp_Word = mkGenPrimOp FSLIT("writeWordArray#")  [deltaTyVar] [mkMutableByteArrayPrimTy deltaTy, intPrimTy, wordPrimTy, mkStatePrimTy deltaTy] (mkStatePrimTy deltaTy)
primOpInfo WriteByteArrayOp_Addr = mkGenPrimOp FSLIT("writeAddrArray#")  [deltaTyVar] [mkMutableByteArrayPrimTy deltaTy, intPrimTy, addrPrimTy, mkStatePrimTy deltaTy] (mkStatePrimTy deltaTy)
primOpInfo WriteByteArrayOp_Float = mkGenPrimOp FSLIT("writeFloatArray#")  [deltaTyVar] [mkMutableByteArrayPrimTy deltaTy, intPrimTy, floatPrimTy, mkStatePrimTy deltaTy] (mkStatePrimTy deltaTy)
primOpInfo WriteByteArrayOp_Double = mkGenPrimOp FSLIT("writeDoubleArray#")  [deltaTyVar] [mkMutableByteArrayPrimTy deltaTy, intPrimTy, doublePrimTy, mkStatePrimTy deltaTy] (mkStatePrimTy deltaTy)
primOpInfo WriteByteArrayOp_StablePtr = mkGenPrimOp FSLIT("writeStablePtrArray#")  [deltaTyVar, alphaTyVar] [mkMutableByteArrayPrimTy deltaTy, intPrimTy, mkStablePtrPrimTy alphaTy, mkStatePrimTy deltaTy] (mkStatePrimTy deltaTy)
primOpInfo WriteByteArrayOp_Int8 = mkGenPrimOp FSLIT("writeInt8Array#")  [deltaTyVar] [mkMutableByteArrayPrimTy deltaTy, intPrimTy, intPrimTy, mkStatePrimTy deltaTy] (mkStatePrimTy deltaTy)
primOpInfo WriteByteArrayOp_Int16 = mkGenPrimOp FSLIT("writeInt16Array#")  [deltaTyVar] [mkMutableByteArrayPrimTy deltaTy, intPrimTy, intPrimTy, mkStatePrimTy deltaTy] (mkStatePrimTy deltaTy)
primOpInfo WriteByteArrayOp_Int32 = mkGenPrimOp FSLIT("writeInt32Array#")  [deltaTyVar] [mkMutableByteArrayPrimTy deltaTy, intPrimTy, intPrimTy, mkStatePrimTy deltaTy] (mkStatePrimTy deltaTy)
primOpInfo WriteByteArrayOp_Int64 = mkGenPrimOp FSLIT("writeInt64Array#")  [deltaTyVar] [mkMutableByteArrayPrimTy deltaTy, intPrimTy, int64PrimTy, mkStatePrimTy deltaTy] (mkStatePrimTy deltaTy)
primOpInfo WriteByteArrayOp_Word8 = mkGenPrimOp FSLIT("writeWord8Array#")  [deltaTyVar] [mkMutableByteArrayPrimTy deltaTy, intPrimTy, wordPrimTy, mkStatePrimTy deltaTy] (mkStatePrimTy deltaTy)
primOpInfo WriteByteArrayOp_Word16 = mkGenPrimOp FSLIT("writeWord16Array#")  [deltaTyVar] [mkMutableByteArrayPrimTy deltaTy, intPrimTy, wordPrimTy, mkStatePrimTy deltaTy] (mkStatePrimTy deltaTy)
primOpInfo WriteByteArrayOp_Word32 = mkGenPrimOp FSLIT("writeWord32Array#")  [deltaTyVar] [mkMutableByteArrayPrimTy deltaTy, intPrimTy, wordPrimTy, mkStatePrimTy deltaTy] (mkStatePrimTy deltaTy)
primOpInfo WriteByteArrayOp_Word64 = mkGenPrimOp FSLIT("writeWord64Array#")  [deltaTyVar] [mkMutableByteArrayPrimTy deltaTy, intPrimTy, word64PrimTy, mkStatePrimTy deltaTy] (mkStatePrimTy deltaTy)
primOpInfo AddrAddOp = mkGenPrimOp FSLIT("plusAddr#")  [] [addrPrimTy, intPrimTy] (addrPrimTy)
primOpInfo AddrSubOp = mkGenPrimOp FSLIT("minusAddr#")  [] [addrPrimTy, addrPrimTy] (intPrimTy)
primOpInfo AddrRemOp = mkGenPrimOp FSLIT("remAddr#")  [] [addrPrimTy, intPrimTy] (intPrimTy)
primOpInfo Addr2IntOp = mkGenPrimOp FSLIT("addr2Int#")  [] [addrPrimTy] (intPrimTy)
primOpInfo Int2AddrOp = mkGenPrimOp FSLIT("int2Addr#")  [] [intPrimTy] (addrPrimTy)
primOpInfo AddrGtOp = mkCompare FSLIT("gtAddr#") addrPrimTy
primOpInfo AddrGeOp = mkCompare FSLIT("geAddr#") addrPrimTy
primOpInfo AddrEqOp = mkCompare FSLIT("eqAddr#") addrPrimTy
primOpInfo AddrNeOp = mkCompare FSLIT("neAddr#") addrPrimTy
primOpInfo AddrLtOp = mkCompare FSLIT("ltAddr#") addrPrimTy
primOpInfo AddrLeOp = mkCompare FSLIT("leAddr#") addrPrimTy
primOpInfo IndexOffAddrOp_Char = mkGenPrimOp FSLIT("indexCharOffAddr#")  [] [addrPrimTy, intPrimTy] (charPrimTy)
primOpInfo IndexOffAddrOp_WideChar = mkGenPrimOp FSLIT("indexWideCharOffAddr#")  [] [addrPrimTy, intPrimTy] (charPrimTy)
primOpInfo IndexOffAddrOp_Int = mkGenPrimOp FSLIT("indexIntOffAddr#")  [] [addrPrimTy, intPrimTy] (intPrimTy)
primOpInfo IndexOffAddrOp_Word = mkGenPrimOp FSLIT("indexWordOffAddr#")  [] [addrPrimTy, intPrimTy] (wordPrimTy)
primOpInfo IndexOffAddrOp_Addr = mkGenPrimOp FSLIT("indexAddrOffAddr#")  [] [addrPrimTy, intPrimTy] (addrPrimTy)
primOpInfo IndexOffAddrOp_Float = mkGenPrimOp FSLIT("indexFloatOffAddr#")  [] [addrPrimTy, intPrimTy] (floatPrimTy)
primOpInfo IndexOffAddrOp_Double = mkGenPrimOp FSLIT("indexDoubleOffAddr#")  [] [addrPrimTy, intPrimTy] (doublePrimTy)
primOpInfo IndexOffAddrOp_StablePtr = mkGenPrimOp FSLIT("indexStablePtrOffAddr#")  [alphaTyVar] [addrPrimTy, intPrimTy] (mkStablePtrPrimTy alphaTy)
primOpInfo IndexOffAddrOp_Int8 = mkGenPrimOp FSLIT("indexInt8OffAddr#")  [] [addrPrimTy, intPrimTy] (intPrimTy)
primOpInfo IndexOffAddrOp_Int16 = mkGenPrimOp FSLIT("indexInt16OffAddr#")  [] [addrPrimTy, intPrimTy] (intPrimTy)
primOpInfo IndexOffAddrOp_Int32 = mkGenPrimOp FSLIT("indexInt32OffAddr#")  [] [addrPrimTy, intPrimTy] (intPrimTy)
primOpInfo IndexOffAddrOp_Int64 = mkGenPrimOp FSLIT("indexInt64OffAddr#")  [] [addrPrimTy, intPrimTy] (int64PrimTy)
primOpInfo IndexOffAddrOp_Word8 = mkGenPrimOp FSLIT("indexWord8OffAddr#")  [] [addrPrimTy, intPrimTy] (wordPrimTy)
primOpInfo IndexOffAddrOp_Word16 = mkGenPrimOp FSLIT("indexWord16OffAddr#")  [] [addrPrimTy, intPrimTy] (wordPrimTy)
primOpInfo IndexOffAddrOp_Word32 = mkGenPrimOp FSLIT("indexWord32OffAddr#")  [] [addrPrimTy, intPrimTy] (wordPrimTy)
primOpInfo IndexOffAddrOp_Word64 = mkGenPrimOp FSLIT("indexWord64OffAddr#")  [] [addrPrimTy, intPrimTy] (word64PrimTy)
primOpInfo ReadOffAddrOp_Char = mkGenPrimOp FSLIT("readCharOffAddr#")  [deltaTyVar] [addrPrimTy, intPrimTy, mkStatePrimTy deltaTy] ((mkTupleTy Unboxed 2 [mkStatePrimTy deltaTy, charPrimTy]))
primOpInfo ReadOffAddrOp_WideChar = mkGenPrimOp FSLIT("readWideCharOffAddr#")  [deltaTyVar] [addrPrimTy, intPrimTy, mkStatePrimTy deltaTy] ((mkTupleTy Unboxed 2 [mkStatePrimTy deltaTy, charPrimTy]))
primOpInfo ReadOffAddrOp_Int = mkGenPrimOp FSLIT("readIntOffAddr#")  [deltaTyVar] [addrPrimTy, intPrimTy, mkStatePrimTy deltaTy] ((mkTupleTy Unboxed 2 [mkStatePrimTy deltaTy, intPrimTy]))
primOpInfo ReadOffAddrOp_Word = mkGenPrimOp FSLIT("readWordOffAddr#")  [deltaTyVar] [addrPrimTy, intPrimTy, mkStatePrimTy deltaTy] ((mkTupleTy Unboxed 2 [mkStatePrimTy deltaTy, wordPrimTy]))
primOpInfo ReadOffAddrOp_Addr = mkGenPrimOp FSLIT("readAddrOffAddr#")  [deltaTyVar] [addrPrimTy, intPrimTy, mkStatePrimTy deltaTy] ((mkTupleTy Unboxed 2 [mkStatePrimTy deltaTy, addrPrimTy]))
primOpInfo ReadOffAddrOp_Float = mkGenPrimOp FSLIT("readFloatOffAddr#")  [deltaTyVar] [addrPrimTy, intPrimTy, mkStatePrimTy deltaTy] ((mkTupleTy Unboxed 2 [mkStatePrimTy deltaTy, floatPrimTy]))
primOpInfo ReadOffAddrOp_Double = mkGenPrimOp FSLIT("readDoubleOffAddr#")  [deltaTyVar] [addrPrimTy, intPrimTy, mkStatePrimTy deltaTy] ((mkTupleTy Unboxed 2 [mkStatePrimTy deltaTy, doublePrimTy]))
primOpInfo ReadOffAddrOp_StablePtr = mkGenPrimOp FSLIT("readStablePtrOffAddr#")  [deltaTyVar, alphaTyVar] [addrPrimTy, intPrimTy, mkStatePrimTy deltaTy] ((mkTupleTy Unboxed 2 [mkStatePrimTy deltaTy, mkStablePtrPrimTy alphaTy]))
primOpInfo ReadOffAddrOp_Int8 = mkGenPrimOp FSLIT("readInt8OffAddr#")  [deltaTyVar] [addrPrimTy, intPrimTy, mkStatePrimTy deltaTy] ((mkTupleTy Unboxed 2 [mkStatePrimTy deltaTy, intPrimTy]))
primOpInfo ReadOffAddrOp_Int16 = mkGenPrimOp FSLIT("readInt16OffAddr#")  [deltaTyVar] [addrPrimTy, intPrimTy, mkStatePrimTy deltaTy] ((mkTupleTy Unboxed 2 [mkStatePrimTy deltaTy, intPrimTy]))
primOpInfo ReadOffAddrOp_Int32 = mkGenPrimOp FSLIT("readInt32OffAddr#")  [deltaTyVar] [addrPrimTy, intPrimTy, mkStatePrimTy deltaTy] ((mkTupleTy Unboxed 2 [mkStatePrimTy deltaTy, intPrimTy]))
primOpInfo ReadOffAddrOp_Int64 = mkGenPrimOp FSLIT("readInt64OffAddr#")  [deltaTyVar] [addrPrimTy, intPrimTy, mkStatePrimTy deltaTy] ((mkTupleTy Unboxed 2 [mkStatePrimTy deltaTy, int64PrimTy]))
primOpInfo ReadOffAddrOp_Word8 = mkGenPrimOp FSLIT("readWord8OffAddr#")  [deltaTyVar] [addrPrimTy, intPrimTy, mkStatePrimTy deltaTy] ((mkTupleTy Unboxed 2 [mkStatePrimTy deltaTy, wordPrimTy]))
primOpInfo ReadOffAddrOp_Word16 = mkGenPrimOp FSLIT("readWord16OffAddr#")  [deltaTyVar] [addrPrimTy, intPrimTy, mkStatePrimTy deltaTy] ((mkTupleTy Unboxed 2 [mkStatePrimTy deltaTy, wordPrimTy]))
primOpInfo ReadOffAddrOp_Word32 = mkGenPrimOp FSLIT("readWord32OffAddr#")  [deltaTyVar] [addrPrimTy, intPrimTy, mkStatePrimTy deltaTy] ((mkTupleTy Unboxed 2 [mkStatePrimTy deltaTy, wordPrimTy]))
primOpInfo ReadOffAddrOp_Word64 = mkGenPrimOp FSLIT("readWord64OffAddr#")  [deltaTyVar] [addrPrimTy, intPrimTy, mkStatePrimTy deltaTy] ((mkTupleTy Unboxed 2 [mkStatePrimTy deltaTy, word64PrimTy]))
primOpInfo WriteOffAddrOp_Char = mkGenPrimOp FSLIT("writeCharOffAddr#")  [deltaTyVar] [addrPrimTy, intPrimTy, charPrimTy, mkStatePrimTy deltaTy] (mkStatePrimTy deltaTy)
primOpInfo WriteOffAddrOp_WideChar = mkGenPrimOp FSLIT("writeWideCharOffAddr#")  [deltaTyVar] [addrPrimTy, intPrimTy, charPrimTy, mkStatePrimTy deltaTy] (mkStatePrimTy deltaTy)
primOpInfo WriteOffAddrOp_Int = mkGenPrimOp FSLIT("writeIntOffAddr#")  [deltaTyVar] [addrPrimTy, intPrimTy, intPrimTy, mkStatePrimTy deltaTy] (mkStatePrimTy deltaTy)
primOpInfo WriteOffAddrOp_Word = mkGenPrimOp FSLIT("writeWordOffAddr#")  [deltaTyVar] [addrPrimTy, intPrimTy, wordPrimTy, mkStatePrimTy deltaTy] (mkStatePrimTy deltaTy)
primOpInfo WriteOffAddrOp_Addr = mkGenPrimOp FSLIT("writeAddrOffAddr#")  [deltaTyVar] [addrPrimTy, intPrimTy, addrPrimTy, mkStatePrimTy deltaTy] (mkStatePrimTy deltaTy)
primOpInfo WriteOffAddrOp_ForeignObj = mkGenPrimOp FSLIT("writeForeignObjOffAddr#")  [deltaTyVar] [addrPrimTy, intPrimTy, foreignObjPrimTy, mkStatePrimTy deltaTy] (mkStatePrimTy deltaTy)
primOpInfo WriteOffAddrOp_Float = mkGenPrimOp FSLIT("writeFloatOffAddr#")  [deltaTyVar] [addrPrimTy, intPrimTy, floatPrimTy, mkStatePrimTy deltaTy] (mkStatePrimTy deltaTy)
primOpInfo WriteOffAddrOp_Double = mkGenPrimOp FSLIT("writeDoubleOffAddr#")  [deltaTyVar] [addrPrimTy, intPrimTy, doublePrimTy, mkStatePrimTy deltaTy] (mkStatePrimTy deltaTy)
primOpInfo WriteOffAddrOp_StablePtr = mkGenPrimOp FSLIT("writeStablePtrOffAddr#")  [alphaTyVar, deltaTyVar] [addrPrimTy, intPrimTy, mkStablePtrPrimTy alphaTy, mkStatePrimTy deltaTy] (mkStatePrimTy deltaTy)
primOpInfo WriteOffAddrOp_Int8 = mkGenPrimOp FSLIT("writeInt8OffAddr#")  [deltaTyVar] [addrPrimTy, intPrimTy, intPrimTy, mkStatePrimTy deltaTy] (mkStatePrimTy deltaTy)
primOpInfo WriteOffAddrOp_Int16 = mkGenPrimOp FSLIT("writeInt16OffAddr#")  [deltaTyVar] [addrPrimTy, intPrimTy, intPrimTy, mkStatePrimTy deltaTy] (mkStatePrimTy deltaTy)
primOpInfo WriteOffAddrOp_Int32 = mkGenPrimOp FSLIT("writeInt32OffAddr#")  [deltaTyVar] [addrPrimTy, intPrimTy, intPrimTy, mkStatePrimTy deltaTy] (mkStatePrimTy deltaTy)
primOpInfo WriteOffAddrOp_Int64 = mkGenPrimOp FSLIT("writeInt64OffAddr#")  [deltaTyVar] [addrPrimTy, intPrimTy, int64PrimTy, mkStatePrimTy deltaTy] (mkStatePrimTy deltaTy)
primOpInfo WriteOffAddrOp_Word8 = mkGenPrimOp FSLIT("writeWord8OffAddr#")  [deltaTyVar] [addrPrimTy, intPrimTy, wordPrimTy, mkStatePrimTy deltaTy] (mkStatePrimTy deltaTy)
primOpInfo WriteOffAddrOp_Word16 = mkGenPrimOp FSLIT("writeWord16OffAddr#")  [deltaTyVar] [addrPrimTy, intPrimTy, wordPrimTy, mkStatePrimTy deltaTy] (mkStatePrimTy deltaTy)
primOpInfo WriteOffAddrOp_Word32 = mkGenPrimOp FSLIT("writeWord32OffAddr#")  [deltaTyVar] [addrPrimTy, intPrimTy, wordPrimTy, mkStatePrimTy deltaTy] (mkStatePrimTy deltaTy)
primOpInfo WriteOffAddrOp_Word64 = mkGenPrimOp FSLIT("writeWord64OffAddr#")  [deltaTyVar] [addrPrimTy, intPrimTy, word64PrimTy, mkStatePrimTy deltaTy] (mkStatePrimTy deltaTy)
primOpInfo MkForeignObjOp = mkGenPrimOp FSLIT("mkForeignObj#")  [] [addrPrimTy, mkStatePrimTy realWorldTy] ((mkTupleTy Unboxed 2 [mkStatePrimTy realWorldTy, foreignObjPrimTy]))
primOpInfo WriteForeignObjOp = mkGenPrimOp FSLIT("writeForeignObj#")  [deltaTyVar] [foreignObjPrimTy, addrPrimTy, mkStatePrimTy deltaTy] (mkStatePrimTy deltaTy)
primOpInfo ForeignObjToAddrOp = mkGenPrimOp FSLIT("foreignObjToAddr#")  [] [foreignObjPrimTy] (addrPrimTy)
primOpInfo TouchOp = mkGenPrimOp FSLIT("touch#")  [openAlphaTyVar] [openAlphaTy, mkStatePrimTy realWorldTy] (mkStatePrimTy realWorldTy)
primOpInfo EqForeignObj = mkGenPrimOp FSLIT("eqForeignObj#")  [] [foreignObjPrimTy, foreignObjPrimTy] (boolTy)
primOpInfo IndexOffForeignObjOp_Char = mkGenPrimOp FSLIT("indexCharOffForeignObj#")  [] [foreignObjPrimTy, intPrimTy] (charPrimTy)
primOpInfo IndexOffForeignObjOp_WideChar = mkGenPrimOp FSLIT("indexWideCharOffForeignObj#")  [] [foreignObjPrimTy, intPrimTy] (charPrimTy)
primOpInfo IndexOffForeignObjOp_Int = mkGenPrimOp FSLIT("indexIntOffForeignObj#")  [] [foreignObjPrimTy, intPrimTy] (intPrimTy)
primOpInfo IndexOffForeignObjOp_Word = mkGenPrimOp FSLIT("indexWordOffForeignObj#")  [] [foreignObjPrimTy, intPrimTy] (wordPrimTy)
primOpInfo IndexOffForeignObjOp_Addr = mkGenPrimOp FSLIT("indexAddrOffForeignObj#")  [] [foreignObjPrimTy, intPrimTy] (addrPrimTy)
primOpInfo IndexOffForeignObjOp_Float = mkGenPrimOp FSLIT("indexFloatOffForeignObj#")  [] [foreignObjPrimTy, intPrimTy] (floatPrimTy)
primOpInfo IndexOffForeignObjOp_Double = mkGenPrimOp FSLIT("indexDoubleOffForeignObj#")  [] [foreignObjPrimTy, intPrimTy] (doublePrimTy)
primOpInfo IndexOffForeignObjOp_StablePtr = mkGenPrimOp FSLIT("indexStablePtrOffForeignObj#")  [alphaTyVar] [foreignObjPrimTy, intPrimTy] (mkStablePtrPrimTy alphaTy)
primOpInfo IndexOffForeignObjOp_Int8 = mkGenPrimOp FSLIT("indexInt8OffForeignObj#")  [] [foreignObjPrimTy, intPrimTy] (intPrimTy)
primOpInfo IndexOffForeignObjOp_Int16 = mkGenPrimOp FSLIT("indexInt16OffForeignObj#")  [] [foreignObjPrimTy, intPrimTy] (intPrimTy)
primOpInfo IndexOffForeignObjOp_Int32 = mkGenPrimOp FSLIT("indexInt32OffForeignObj#")  [] [foreignObjPrimTy, intPrimTy] (intPrimTy)
primOpInfo IndexOffForeignObjOp_Int64 = mkGenPrimOp FSLIT("indexInt64OffForeignObj#")  [] [foreignObjPrimTy, intPrimTy] (int64PrimTy)
primOpInfo IndexOffForeignObjOp_Word8 = mkGenPrimOp FSLIT("indexWord8OffForeignObj#")  [] [foreignObjPrimTy, intPrimTy] (wordPrimTy)
primOpInfo IndexOffForeignObjOp_Word16 = mkGenPrimOp FSLIT("indexWord16OffForeignObj#")  [] [foreignObjPrimTy, intPrimTy] (wordPrimTy)
primOpInfo IndexOffForeignObjOp_Word32 = mkGenPrimOp FSLIT("indexWord32OffForeignObj#")  [] [foreignObjPrimTy, intPrimTy] (wordPrimTy)
primOpInfo IndexOffForeignObjOp_Word64 = mkGenPrimOp FSLIT("indexWord64OffForeignObj#")  [] [foreignObjPrimTy, intPrimTy] (word64PrimTy)
primOpInfo NewMutVarOp = mkGenPrimOp FSLIT("newMutVar#")  [alphaTyVar, deltaTyVar] [alphaTy, mkStatePrimTy deltaTy] ((mkTupleTy Unboxed 2 [mkStatePrimTy deltaTy, mkMutVarPrimTy deltaTy alphaTy]))
primOpInfo ReadMutVarOp = mkGenPrimOp FSLIT("readMutVar#")  [deltaTyVar, alphaTyVar] [mkMutVarPrimTy deltaTy alphaTy, mkStatePrimTy deltaTy] ((mkTupleTy Unboxed 2 [mkStatePrimTy deltaTy, alphaTy]))
primOpInfo WriteMutVarOp = mkGenPrimOp FSLIT("writeMutVar#")  [deltaTyVar, alphaTyVar] [mkMutVarPrimTy deltaTy alphaTy, alphaTy, mkStatePrimTy deltaTy] (mkStatePrimTy deltaTy)
primOpInfo SameMutVarOp = mkGenPrimOp FSLIT("sameMutVar#")  [deltaTyVar, alphaTyVar] [mkMutVarPrimTy deltaTy alphaTy, mkMutVarPrimTy deltaTy alphaTy] (boolTy)
primOpInfo AtomicModifyMutVarOp = mkGenPrimOp FSLIT("atomicModifyMutVar#")  [deltaTyVar, alphaTyVar, betaTyVar, gammaTyVar] [mkMutVarPrimTy deltaTy alphaTy, (mkFunTy (alphaTy) (betaTy)), mkStatePrimTy deltaTy] ((mkTupleTy Unboxed 2 [mkStatePrimTy deltaTy, gammaTy]))
primOpInfo CatchOp = mkGenPrimOp FSLIT("catch#")  [alphaTyVar, betaTyVar] [(mkFunTy (mkStatePrimTy realWorldTy) ((mkTupleTy Unboxed 2 [mkStatePrimTy realWorldTy, alphaTy]))), (mkFunTy (betaTy) ((mkFunTy (mkStatePrimTy realWorldTy) ((mkTupleTy Unboxed 2 [mkStatePrimTy realWorldTy, alphaTy]))))), mkStatePrimTy realWorldTy] ((mkTupleTy Unboxed 2 [mkStatePrimTy realWorldTy, alphaTy]))
primOpInfo RaiseOp = mkGenPrimOp FSLIT("raise#")  [alphaTyVar, betaTyVar] [alphaTy] (betaTy)
primOpInfo RaiseIOOp = mkGenPrimOp FSLIT("raiseIO#")  [alphaTyVar, betaTyVar] [alphaTy, mkStatePrimTy realWorldTy] ((mkTupleTy Unboxed 2 [mkStatePrimTy realWorldTy, betaTy]))
primOpInfo BlockAsyncExceptionsOp = mkGenPrimOp FSLIT("blockAsyncExceptions#")  [alphaTyVar] [(mkFunTy (mkStatePrimTy realWorldTy) ((mkTupleTy Unboxed 2 [mkStatePrimTy realWorldTy, alphaTy]))), mkStatePrimTy realWorldTy] ((mkTupleTy Unboxed 2 [mkStatePrimTy realWorldTy, alphaTy]))
primOpInfo UnblockAsyncExceptionsOp = mkGenPrimOp FSLIT("unblockAsyncExceptions#")  [alphaTyVar] [(mkFunTy (mkStatePrimTy realWorldTy) ((mkTupleTy Unboxed 2 [mkStatePrimTy realWorldTy, alphaTy]))), mkStatePrimTy realWorldTy] ((mkTupleTy Unboxed 2 [mkStatePrimTy realWorldTy, alphaTy]))
primOpInfo NewMVarOp = mkGenPrimOp FSLIT("newMVar#")  [deltaTyVar, alphaTyVar] [mkStatePrimTy deltaTy] ((mkTupleTy Unboxed 2 [mkStatePrimTy deltaTy, mkMVarPrimTy deltaTy alphaTy]))
primOpInfo TakeMVarOp = mkGenPrimOp FSLIT("takeMVar#")  [deltaTyVar, alphaTyVar] [mkMVarPrimTy deltaTy alphaTy, mkStatePrimTy deltaTy] ((mkTupleTy Unboxed 2 [mkStatePrimTy deltaTy, alphaTy]))
primOpInfo TryTakeMVarOp = mkGenPrimOp FSLIT("tryTakeMVar#")  [deltaTyVar, alphaTyVar] [mkMVarPrimTy deltaTy alphaTy, mkStatePrimTy deltaTy] ((mkTupleTy Unboxed 3 [mkStatePrimTy deltaTy, intPrimTy, alphaTy]))
primOpInfo PutMVarOp = mkGenPrimOp FSLIT("putMVar#")  [deltaTyVar, alphaTyVar] [mkMVarPrimTy deltaTy alphaTy, alphaTy, mkStatePrimTy deltaTy] (mkStatePrimTy deltaTy)
primOpInfo TryPutMVarOp = mkGenPrimOp FSLIT("tryPutMVar#")  [deltaTyVar, alphaTyVar] [mkMVarPrimTy deltaTy alphaTy, alphaTy, mkStatePrimTy deltaTy] ((mkTupleTy Unboxed 2 [mkStatePrimTy deltaTy, intPrimTy]))
primOpInfo SameMVarOp = mkGenPrimOp FSLIT("sameMVar#")  [deltaTyVar, alphaTyVar] [mkMVarPrimTy deltaTy alphaTy, mkMVarPrimTy deltaTy alphaTy] (boolTy)
primOpInfo IsEmptyMVarOp = mkGenPrimOp FSLIT("isEmptyMVar#")  [deltaTyVar, alphaTyVar] [mkMVarPrimTy deltaTy alphaTy, mkStatePrimTy deltaTy] ((mkTupleTy Unboxed 2 [mkStatePrimTy deltaTy, intPrimTy]))
primOpInfo DelayOp = mkGenPrimOp FSLIT("delay#")  [deltaTyVar] [intPrimTy, mkStatePrimTy deltaTy] (mkStatePrimTy deltaTy)
primOpInfo WaitReadOp = mkGenPrimOp FSLIT("waitRead#")  [deltaTyVar] [intPrimTy, mkStatePrimTy deltaTy] (mkStatePrimTy deltaTy)
primOpInfo WaitWriteOp = mkGenPrimOp FSLIT("waitWrite#")  [deltaTyVar] [intPrimTy, mkStatePrimTy deltaTy] (mkStatePrimTy deltaTy)
primOpInfo ForkOp = mkGenPrimOp FSLIT("fork#")  [alphaTyVar] [alphaTy, mkStatePrimTy realWorldTy] ((mkTupleTy Unboxed 2 [mkStatePrimTy realWorldTy, threadIdPrimTy]))
primOpInfo KillThreadOp = mkGenPrimOp FSLIT("killThread#")  [alphaTyVar] [threadIdPrimTy, alphaTy, mkStatePrimTy realWorldTy] (mkStatePrimTy realWorldTy)
primOpInfo YieldOp = mkGenPrimOp FSLIT("yield#")  [] [mkStatePrimTy realWorldTy] (mkStatePrimTy realWorldTy)
primOpInfo MyThreadIdOp = mkGenPrimOp FSLIT("myThreadId#")  [] [mkStatePrimTy realWorldTy] ((mkTupleTy Unboxed 2 [mkStatePrimTy realWorldTy, threadIdPrimTy]))
primOpInfo LabelThreadOp = mkGenPrimOp FSLIT("labelThread#")  [] [threadIdPrimTy, addrPrimTy, mkStatePrimTy realWorldTy] (mkStatePrimTy realWorldTy)
primOpInfo IsCurrentThreadBoundOp = mkGenPrimOp FSLIT("isCurrentThreadBound#")  [] [mkStatePrimTy realWorldTy] ((mkTupleTy Unboxed 2 [mkStatePrimTy realWorldTy, intPrimTy]))
primOpInfo MkWeakOp = mkGenPrimOp FSLIT("mkWeak#")  [openAlphaTyVar, betaTyVar, gammaTyVar] [openAlphaTy, betaTy, gammaTy, mkStatePrimTy realWorldTy] ((mkTupleTy Unboxed 2 [mkStatePrimTy realWorldTy, mkWeakPrimTy betaTy]))
primOpInfo DeRefWeakOp = mkGenPrimOp FSLIT("deRefWeak#")  [alphaTyVar] [mkWeakPrimTy alphaTy, mkStatePrimTy realWorldTy] ((mkTupleTy Unboxed 3 [mkStatePrimTy realWorldTy, intPrimTy, alphaTy]))
primOpInfo FinalizeWeakOp = mkGenPrimOp FSLIT("finalizeWeak#")  [alphaTyVar] [mkWeakPrimTy alphaTy, mkStatePrimTy realWorldTy] ((mkTupleTy Unboxed 3 [mkStatePrimTy realWorldTy, intPrimTy, (mkFunTy (mkStatePrimTy realWorldTy) ((mkTupleTy Unboxed 2 [mkStatePrimTy realWorldTy, unitTy])))]))
primOpInfo MakeStablePtrOp = mkGenPrimOp FSLIT("makeStablePtr#")  [alphaTyVar] [alphaTy, mkStatePrimTy realWorldTy] ((mkTupleTy Unboxed 2 [mkStatePrimTy realWorldTy, mkStablePtrPrimTy alphaTy]))
primOpInfo DeRefStablePtrOp = mkGenPrimOp FSLIT("deRefStablePtr#")  [alphaTyVar] [mkStablePtrPrimTy alphaTy, mkStatePrimTy realWorldTy] ((mkTupleTy Unboxed 2 [mkStatePrimTy realWorldTy, alphaTy]))
primOpInfo EqStablePtrOp = mkGenPrimOp FSLIT("eqStablePtr#")  [alphaTyVar] [mkStablePtrPrimTy alphaTy, mkStablePtrPrimTy alphaTy] (intPrimTy)
primOpInfo MakeStableNameOp = mkGenPrimOp FSLIT("makeStableName#")  [alphaTyVar] [alphaTy, mkStatePrimTy realWorldTy] ((mkTupleTy Unboxed 2 [mkStatePrimTy realWorldTy, mkStableNamePrimTy alphaTy]))
primOpInfo EqStableNameOp = mkGenPrimOp FSLIT("eqStableName#")  [alphaTyVar] [mkStableNamePrimTy alphaTy, mkStableNamePrimTy alphaTy] (intPrimTy)
primOpInfo StableNameToIntOp = mkGenPrimOp FSLIT("stableNameToInt#")  [alphaTyVar] [mkStableNamePrimTy alphaTy] (intPrimTy)
primOpInfo ReallyUnsafePtrEqualityOp = mkGenPrimOp FSLIT("reallyUnsafePtrEquality#")  [alphaTyVar] [alphaTy, alphaTy] (intPrimTy)
primOpInfo ParOp = mkGenPrimOp FSLIT("par#")  [alphaTyVar] [alphaTy] (intPrimTy)
primOpInfo ParGlobalOp = mkGenPrimOp FSLIT("parGlobal#")  [alphaTyVar, betaTyVar] [alphaTy, intPrimTy, intPrimTy, intPrimTy, intPrimTy, betaTy] (intPrimTy)
primOpInfo ParLocalOp = mkGenPrimOp FSLIT("parLocal#")  [alphaTyVar, betaTyVar] [alphaTy, intPrimTy, intPrimTy, intPrimTy, intPrimTy, betaTy] (intPrimTy)
primOpInfo ParAtOp = mkGenPrimOp FSLIT("parAt#")  [betaTyVar, alphaTyVar, gammaTyVar] [betaTy, alphaTy, intPrimTy, intPrimTy, intPrimTy, intPrimTy, gammaTy] (intPrimTy)
primOpInfo ParAtAbsOp = mkGenPrimOp FSLIT("parAtAbs#")  [alphaTyVar, betaTyVar] [alphaTy, intPrimTy, intPrimTy, intPrimTy, intPrimTy, intPrimTy, betaTy] (intPrimTy)
primOpInfo ParAtRelOp = mkGenPrimOp FSLIT("parAtRel#")  [alphaTyVar, betaTyVar] [alphaTy, intPrimTy, intPrimTy, intPrimTy, intPrimTy, intPrimTy, betaTy] (intPrimTy)
primOpInfo ParAtForNowOp = mkGenPrimOp FSLIT("parAtForNow#")  [betaTyVar, alphaTyVar, gammaTyVar] [betaTy, alphaTy, intPrimTy, intPrimTy, intPrimTy, intPrimTy, gammaTy] (intPrimTy)
primOpInfo DataToTagOp = mkGenPrimOp FSLIT("dataToTag#")  [alphaTyVar] [alphaTy] (intPrimTy)
primOpInfo TagToEnumOp = mkGenPrimOp FSLIT("tagToEnum#")  [alphaTyVar] [intPrimTy] (alphaTy)
primOpInfo AddrToHValueOp = mkGenPrimOp FSLIT("addrToHValue#")  [alphaTyVar] [addrPrimTy] ((mkTupleTy Unboxed 1 [alphaTy]))
primOpInfo MkApUpd0_Op = mkGenPrimOp FSLIT("mkApUpd0#")  [alphaTyVar] [bcoPrimTy] ((mkTupleTy Unboxed 1 [alphaTy]))
primOpInfo NewBCOOp = mkGenPrimOp FSLIT("newBCO#")  [alphaTyVar, deltaTyVar] [byteArrayPrimTy, byteArrayPrimTy, mkArrayPrimTy alphaTy, byteArrayPrimTy, intPrimTy, byteArrayPrimTy, mkStatePrimTy deltaTy] ((mkTupleTy Unboxed 2 [mkStatePrimTy deltaTy, bcoPrimTy]))
primOpInfo InbOp = mkGenPrimOp FSLIT("inb#")  [] [wordPrimTy, mkStatePrimTy realWorldTy] ((mkTupleTy Unboxed 2 [mkStatePrimTy realWorldTy, wordPrimTy]))
primOpInfo OutbOp = mkGenPrimOp FSLIT("outb#")  [] [wordPrimTy, wordPrimTy, mkStatePrimTy realWorldTy] (mkStatePrimTy realWorldTy)
primOpInfo RegisterForIRQ = mkGenPrimOp FSLIT("registerForIRQ#")  [] [wordPrimTy, mkStatePrimTy realWorldTy] (mkStatePrimTy realWorldTy)
primOpInfo WaitNextInterrupt = mkGenPrimOp FSLIT("waitNextInterrupt#")  [] [wordPrimTy, mkStatePrimTy realWorldTy] (mkStatePrimTy realWorldTy)
