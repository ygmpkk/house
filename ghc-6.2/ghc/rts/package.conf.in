#include "config.h"
#include "Derived.h"

Package {
	name           = "rts",  /* The RTS is just another package! */
        import_dirs    = [],
        source_dirs    = [],

#ifdef INSTALLING
        library_dirs   =  [ "$libdir"
# ifdef mingw32_TARGET_OS
			  /* force the dist-provided gcc-lib/ into scope. */
			  , "$libdir/gcc-lib"
# endif
#else /* !INSTALLING */
        library_dirs	= [ "$libdir/ghc/rts"
# ifndef HAVE_LIBGMP
			  , "$libdir/ghc/rts/gmp"
# endif
#endif
			  ],

        hs_libraries      = [ "HSrts" ],
	extra_libraries   = [
			    "m"		/* for ldexp() */
#ifndef HAVE_FRAMEWORK_HASKELLSUPPORT
			      , "gmp"
#ifdef HAVE_LIBDL
			      , "dl"
#endif
#endif
#ifdef mingw32_TARGET_OS
			      ,"wsock32"	/* for the linker */
#endif
#ifdef WANT_DOTNET_SUPPORT
			      , "oleaut32", "ole32", "uuid"
#endif
#if defined(DEBUG) && defined(HAVE_LIBBFD)
			      ,"bfd", "iberty"	/* for debugging */
#endif
#ifdef HAVE_LIBMINGWEX
# ifndef INSTALLING                             /* Bundled Mingw is behind */
                              ,"mingwex"
# endif
#endif
#if defined(THREADED_RTS) && !defined(mingw32_TARGET_OS) && !defined(freebsd_TARGET_OS)
			      ,"pthread"
# ifdef osf3_TARGET_OS
			      ,"exc"
# endif
#endif
			    ],

#ifdef INSTALLING
        include_dirs	= [ "$libdir/include"
# ifdef mingw32_TARGET_OS
			  , "$libdir/include/mingw"
# endif
			  ],
#else /* !INSTALLING */
	include_dirs	= [ "$libdir/ghc/includes" ],
#endif

        c_includes     = [ "Stg.h" ],
        package_deps   = [],
        extra_ghc_opts = [],
#if defined(THREADED_RTS) && defined(freebsd_TARGET_OS)
        extra_cc_opts  = [ "-pthread" ],
#else
        extra_cc_opts  = [],
#endif
               /* the RTS forward-references to a bunch of stuff in the prelude,
                  so we force it to be included with special options to ld. */
        extra_ld_opts  =
         [
#ifdef LEADING_UNDERSCORE
           "-u", "_GHCziBase_Izh_static_info"
         , "-u", "_GHCziBase_Czh_static_info"
         , "-u", "_GHCziFloat_Fzh_static_info"
         , "-u", "_GHCziFloat_Dzh_static_info"
         , "-u", "_GHCziPtr_Ptr_static_info"
         , "-u", "_GHCziWord_Wzh_static_info"
         , "-u", "_GHCziInt_I8zh_static_info"
         , "-u", "_GHCziInt_I16zh_static_info"
         , "-u", "_GHCziInt_I32zh_static_info"
         , "-u", "_GHCziInt_I64zh_static_info"
         , "-u", "_GHCziWord_W8zh_static_info"
         , "-u", "_GHCziWord_W16zh_static_info"
         , "-u", "_GHCziWord_W32zh_static_info"
         , "-u", "_GHCziWord_W64zh_static_info"
         , "-u", "_GHCziStable_StablePtr_static_info"
         , "-u", "_GHCziBase_Izh_con_info"
         , "-u", "_GHCziBase_Czh_con_info"
         , "-u", "_GHCziFloat_Fzh_con_info"
         , "-u", "_GHCziFloat_Dzh_con_info"
         , "-u", "_GHCziPtr_Ptr_con_info"
         , "-u", "_GHCziPtr_FunPtr_con_info"
         , "-u", "_GHCziStable_StablePtr_con_info"
         , "-u", "_GHCziBase_False_closure"
         , "-u", "_GHCziBase_True_closure"
         , "-u", "_GHCziPack_unpackCString_closure"
         , "-u", "_GHCziIOBase_stackOverflow_closure"
         , "-u", "_GHCziIOBase_heapOverflow_closure"
         , "-u", "_GHCziIOBase_NonTermination_closure"
         , "-u", "_GHCziIOBase_BlockedOnDeadMVar_closure"
         , "-u", "_GHCziIOBase_Deadlock_closure"
         , "-u", "_GHCziWeak_runFinalizzerBatch_closure"
         , "-u", "___stginit_Prelude"
#else
           "-u", "GHCziBase_Izh_static_info"
         , "-u", "GHCziBase_Czh_static_info"
         , "-u", "GHCziFloat_Fzh_static_info"
         , "-u", "GHCziFloat_Dzh_static_info"
         , "-u", "GHCziPtr_Ptr_static_info"
         , "-u", "GHCziWord_Wzh_static_info"
         , "-u", "GHCziInt_I8zh_static_info"
         , "-u", "GHCziInt_I16zh_static_info"
         , "-u", "GHCziInt_I32zh_static_info"
         , "-u", "GHCziInt_I64zh_static_info"
         , "-u", "GHCziWord_W8zh_static_info"
         , "-u", "GHCziWord_W16zh_static_info"
         , "-u", "GHCziWord_W32zh_static_info"
         , "-u", "GHCziWord_W64zh_static_info"
         , "-u", "GHCziStable_StablePtr_static_info"
         , "-u", "GHCziBase_Izh_con_info"
         , "-u", "GHCziBase_Czh_con_info"
         , "-u", "GHCziFloat_Fzh_con_info"
         , "-u", "GHCziFloat_Dzh_con_info"
         , "-u", "GHCziPtr_Ptr_con_info"
         , "-u", "GHCziPtr_FunPtr_con_info"
         , "-u", "GHCziStable_StablePtr_con_info"
         , "-u", "GHCziBase_False_closure"
         , "-u", "GHCziBase_True_closure"
         , "-u", "GHCziPack_unpackCString_closure"
         , "-u", "GHCziIOBase_stackOverflow_closure"
         , "-u", "GHCziIOBase_heapOverflow_closure"
         , "-u", "GHCziIOBase_NonTermination_closure"
         , "-u", "GHCziIOBase_BlockedOnDeadMVar_closure"
         , "-u", "GHCziIOBase_Deadlock_closure"
         , "-u", "GHCziWeak_runFinalizzerBatch_closure"
         , "-u", "__stginit_Prelude"
#endif
#if defined(THREADED_RTS) && defined(freebsd_TARGET_OS)
	 , "-pthread"
#endif
         ]
#ifdef HAVE_FRAMEWORK_HASKELLSUPPORT
        , extra_frameworks  = [ "HaskellSupport" ]
#endif
}
