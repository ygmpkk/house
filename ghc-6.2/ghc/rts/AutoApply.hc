// DO NOT EDIT!
// Automatically generated by GenApply.hs

#include "Stg.h"
#include "Rts.h"
#include "RtsFlags.h"
#include "Storage.h"
#include "RtsUtils.h"
#include "Printer.h"
#include "Sanity.h"
#include "Apply.h"

#include <stdio.h>
INFO_TABLE_RET(stg_ap_v_info,stg_ap_v_ret,MK_SMALL_BITMAP(0/*framsize*/,0/*bitmap*/), 0,0,0,RET_SMALL,,EF_,0,0);

F_ stg_ap_v_ret( void )
{
    StgInfoTable *info;
    nat arity;
    FB_
    
    IF_DEBUG(apply,fprintf(stderr, "stg_ap_v_ret... "); printClosure(R1.cl));
    IF_DEBUG(sanity,checkStackFrame(Sp+1));
    TICK_SLOW_CALL(1);
    again:
    info = get_itbl(R1.cl);
    switch (info->type) {
	case BCO:
	    arity = ((StgBCO *)R1.p)->arity;
	    ASSERT(arity > 0);
	    if (arity == 1) {
		Sp += 1;
		JMP_(stg_BCO_entry);
	    } else {
		BUILD_PAP(1,0,(W_)&stg_ap_v_info);
	    }
	case FUN:
	case FUN_1_0:
	case FUN_0_1:
	case FUN_2_0:
	case FUN_1_1:
	case FUN_0_2:
	case FUN_STATIC:
	    arity = itbl_to_fun_itbl(info)->arity;
	    ASSERT(arity > 0);
	    if (arity == 1) {
		Sp += 1;
		JMP_(GET_ENTRY(R1.cl));
	    } else {
		BUILD_PAP(1,0,(W_)&stg_ap_v_info);
	    }
	case PAP:
	    arity = ((StgPAP *)R1.p)->arity;
	    ASSERT(arity > 0);
	    if (arity == 1) {
		Sp += 1;
		R2.w = (W_)&stg_ap_v_info;
		JMP_(stg_PAP_entry);
	    } else {
		NEW_PAP(1,0,(W_)&stg_ap_v_info);
	    }
	
	case AP:
	case AP_STACK:
	case CAF_BLACKHOLE:
	case BLACKHOLE:
	case BLACKHOLE_BQ:
	case SE_BLACKHOLE:
	case SE_CAF_BLACKHOLE:
	case THUNK:
	case THUNK_1_0:
	case THUNK_0_1:
	case THUNK_2_0:
	case THUNK_1_1:
	case THUNK_0_2:
	case THUNK_STATIC:
	case THUNK_SELECTOR:
	    Sp[0] = (W_)&stg_ap_v_info;
	    JMP_(GET_ENTRY(R1.cl));
	    
	case IND:
	case IND_OLDGEN:
	case IND_STATIC:
	case IND_PERM:
	case IND_OLDGEN_PERM:
	    R1.cl = ((StgInd *)R1.p)->indirectee;
	    goto again;
	
	default:
	    barf("stg_ap_v_ret");
	}
FE_
}

INFO_TABLE_RET(stg_ap_f_info,stg_ap_f_ret,MK_SMALL_BITMAP(1/*framsize*/,1/*bitmap*/), 0,0,0,RET_SMALL,,EF_,0,0);

F_ stg_ap_f_ret( void )
{
    StgInfoTable *info;
    nat arity;
    FB_
    
    IF_DEBUG(apply,fprintf(stderr, "stg_ap_f_ret... "); printClosure(R1.cl));
    IF_DEBUG(sanity,checkStackFrame(Sp+2));
    TICK_SLOW_CALL(1);
    again:
    info = get_itbl(R1.cl);
    switch (info->type) {
	case BCO:
	    arity = ((StgBCO *)R1.p)->arity;
	    ASSERT(arity > 0);
	    if (arity == 1) {
		Sp += 1;
		JMP_(stg_BCO_entry);
	    } else {
		BUILD_PAP(1,1,(W_)&stg_ap_f_info);
	    }
	case FUN:
	case FUN_1_0:
	case FUN_0_1:
	case FUN_2_0:
	case FUN_1_1:
	case FUN_0_2:
	case FUN_STATIC:
	    arity = itbl_to_fun_itbl(info)->arity;
	    ASSERT(arity > 0);
	    if (arity == 1) {
		Sp += 1;
		JMP_(GET_ENTRY(R1.cl));
	    } else {
		BUILD_PAP(1,1,(W_)&stg_ap_f_info);
	    }
	case PAP:
	    arity = ((StgPAP *)R1.p)->arity;
	    ASSERT(arity > 0);
	    if (arity == 1) {
		Sp += 1;
		R2.w = (W_)&stg_ap_f_info;
		JMP_(stg_PAP_entry);
	    } else {
		NEW_PAP(1,1,(W_)&stg_ap_f_info);
	    }
	
	case AP:
	case AP_STACK:
	case CAF_BLACKHOLE:
	case BLACKHOLE:
	case BLACKHOLE_BQ:
	case SE_BLACKHOLE:
	case SE_CAF_BLACKHOLE:
	case THUNK:
	case THUNK_1_0:
	case THUNK_0_1:
	case THUNK_2_0:
	case THUNK_1_1:
	case THUNK_0_2:
	case THUNK_STATIC:
	case THUNK_SELECTOR:
	    Sp[0] = (W_)&stg_ap_f_info;
	    JMP_(GET_ENTRY(R1.cl));
	    
	case IND:
	case IND_OLDGEN:
	case IND_STATIC:
	case IND_PERM:
	case IND_OLDGEN_PERM:
	    R1.cl = ((StgInd *)R1.p)->indirectee;
	    goto again;
	
	default:
	    barf("stg_ap_f_ret");
	}
FE_
}

INFO_TABLE_RET(stg_ap_d_info,stg_ap_d_ret,MK_SMALL_BITMAP(2/*framsize*/,3/*bitmap*/), 0,0,0,RET_SMALL,,EF_,0,0);

F_ stg_ap_d_ret( void )
{
    StgInfoTable *info;
    nat arity;
    FB_
    
    IF_DEBUG(apply,fprintf(stderr, "stg_ap_d_ret... "); printClosure(R1.cl));
    IF_DEBUG(sanity,checkStackFrame(Sp+3));
    TICK_SLOW_CALL(1);
    again:
    info = get_itbl(R1.cl);
    switch (info->type) {
	case BCO:
	    arity = ((StgBCO *)R1.p)->arity;
	    ASSERT(arity > 0);
	    if (arity == 1) {
		Sp += 1;
		JMP_(stg_BCO_entry);
	    } else {
		BUILD_PAP(1,2,(W_)&stg_ap_d_info);
	    }
	case FUN:
	case FUN_1_0:
	case FUN_0_1:
	case FUN_2_0:
	case FUN_1_1:
	case FUN_0_2:
	case FUN_STATIC:
	    arity = itbl_to_fun_itbl(info)->arity;
	    ASSERT(arity > 0);
	    if (arity == 1) {
		Sp += 1;
		JMP_(GET_ENTRY(R1.cl));
	    } else {
		BUILD_PAP(1,2,(W_)&stg_ap_d_info);
	    }
	case PAP:
	    arity = ((StgPAP *)R1.p)->arity;
	    ASSERT(arity > 0);
	    if (arity == 1) {
		Sp += 1;
		R2.w = (W_)&stg_ap_d_info;
		JMP_(stg_PAP_entry);
	    } else {
		NEW_PAP(1,2,(W_)&stg_ap_d_info);
	    }
	
	case AP:
	case AP_STACK:
	case CAF_BLACKHOLE:
	case BLACKHOLE:
	case BLACKHOLE_BQ:
	case SE_BLACKHOLE:
	case SE_CAF_BLACKHOLE:
	case THUNK:
	case THUNK_1_0:
	case THUNK_0_1:
	case THUNK_2_0:
	case THUNK_1_1:
	case THUNK_0_2:
	case THUNK_STATIC:
	case THUNK_SELECTOR:
	    Sp[0] = (W_)&stg_ap_d_info;
	    JMP_(GET_ENTRY(R1.cl));
	    
	case IND:
	case IND_OLDGEN:
	case IND_STATIC:
	case IND_PERM:
	case IND_OLDGEN_PERM:
	    R1.cl = ((StgInd *)R1.p)->indirectee;
	    goto again;
	
	default:
	    barf("stg_ap_d_ret");
	}
FE_
}

INFO_TABLE_RET(stg_ap_l_info,stg_ap_l_ret,MK_SMALL_BITMAP(2/*framsize*/,3/*bitmap*/), 0,0,0,RET_SMALL,,EF_,0,0);

F_ stg_ap_l_ret( void )
{
    StgInfoTable *info;
    nat arity;
    FB_
    
    IF_DEBUG(apply,fprintf(stderr, "stg_ap_l_ret... "); printClosure(R1.cl));
    IF_DEBUG(sanity,checkStackFrame(Sp+3));
    TICK_SLOW_CALL(1);
    again:
    info = get_itbl(R1.cl);
    switch (info->type) {
	case BCO:
	    arity = ((StgBCO *)R1.p)->arity;
	    ASSERT(arity > 0);
	    if (arity == 1) {
		Sp += 1;
		JMP_(stg_BCO_entry);
	    } else {
		BUILD_PAP(1,2,(W_)&stg_ap_l_info);
	    }
	case FUN:
	case FUN_1_0:
	case FUN_0_1:
	case FUN_2_0:
	case FUN_1_1:
	case FUN_0_2:
	case FUN_STATIC:
	    arity = itbl_to_fun_itbl(info)->arity;
	    ASSERT(arity > 0);
	    if (arity == 1) {
		Sp += 1;
		JMP_(GET_ENTRY(R1.cl));
	    } else {
		BUILD_PAP(1,2,(W_)&stg_ap_l_info);
	    }
	case PAP:
	    arity = ((StgPAP *)R1.p)->arity;
	    ASSERT(arity > 0);
	    if (arity == 1) {
		Sp += 1;
		R2.w = (W_)&stg_ap_l_info;
		JMP_(stg_PAP_entry);
	    } else {
		NEW_PAP(1,2,(W_)&stg_ap_l_info);
	    }
	
	case AP:
	case AP_STACK:
	case CAF_BLACKHOLE:
	case BLACKHOLE:
	case BLACKHOLE_BQ:
	case SE_BLACKHOLE:
	case SE_CAF_BLACKHOLE:
	case THUNK:
	case THUNK_1_0:
	case THUNK_0_1:
	case THUNK_2_0:
	case THUNK_1_1:
	case THUNK_0_2:
	case THUNK_STATIC:
	case THUNK_SELECTOR:
	    Sp[0] = (W_)&stg_ap_l_info;
	    JMP_(GET_ENTRY(R1.cl));
	    
	case IND:
	case IND_OLDGEN:
	case IND_STATIC:
	case IND_PERM:
	case IND_OLDGEN_PERM:
	    R1.cl = ((StgInd *)R1.p)->indirectee;
	    goto again;
	
	default:
	    barf("stg_ap_l_ret");
	}
FE_
}

INFO_TABLE_RET(stg_ap_n_info,stg_ap_n_ret,MK_SMALL_BITMAP(1/*framsize*/,1/*bitmap*/), 0,0,0,RET_SMALL,,EF_,0,0);

F_ stg_ap_n_ret( void )
{
    StgInfoTable *info;
    nat arity;
    FB_
    
    IF_DEBUG(apply,fprintf(stderr, "stg_ap_n_ret... "); printClosure(R1.cl));
    IF_DEBUG(sanity,checkStackFrame(Sp+2));
    TICK_SLOW_CALL(1);
    again:
    info = get_itbl(R1.cl);
    switch (info->type) {
	case BCO:
	    arity = ((StgBCO *)R1.p)->arity;
	    ASSERT(arity > 0);
	    if (arity == 1) {
		Sp += 1;
		JMP_(stg_BCO_entry);
	    } else {
		BUILD_PAP(1,1,(W_)&stg_ap_n_info);
	    }
	case FUN:
	case FUN_1_0:
	case FUN_0_1:
	case FUN_2_0:
	case FUN_1_1:
	case FUN_0_2:
	case FUN_STATIC:
	    arity = itbl_to_fun_itbl(info)->arity;
	    ASSERT(arity > 0);
	    if (arity == 1) {
		Sp += 1;
		JMP_(GET_ENTRY(R1.cl));
	    } else {
		BUILD_PAP(1,1,(W_)&stg_ap_n_info);
	    }
	case PAP:
	    arity = ((StgPAP *)R1.p)->arity;
	    ASSERT(arity > 0);
	    if (arity == 1) {
		Sp += 1;
		R2.w = (W_)&stg_ap_n_info;
		JMP_(stg_PAP_entry);
	    } else {
		NEW_PAP(1,1,(W_)&stg_ap_n_info);
	    }
	
	case AP:
	case AP_STACK:
	case CAF_BLACKHOLE:
	case BLACKHOLE:
	case BLACKHOLE_BQ:
	case SE_BLACKHOLE:
	case SE_CAF_BLACKHOLE:
	case THUNK:
	case THUNK_1_0:
	case THUNK_0_1:
	case THUNK_2_0:
	case THUNK_1_1:
	case THUNK_0_2:
	case THUNK_STATIC:
	case THUNK_SELECTOR:
	    Sp[0] = (W_)&stg_ap_n_info;
	    JMP_(GET_ENTRY(R1.cl));
	    
	case IND:
	case IND_OLDGEN:
	case IND_STATIC:
	case IND_PERM:
	case IND_OLDGEN_PERM:
	    R1.cl = ((StgInd *)R1.p)->indirectee;
	    goto again;
	
	default:
	    barf("stg_ap_n_ret");
	}
FE_
}

INFO_TABLE_RET(stg_ap_p_info,stg_ap_p_ret,MK_SMALL_BITMAP(1/*framsize*/,0/*bitmap*/), 0,0,0,RET_SMALL,,EF_,0,0);

F_ stg_ap_p_ret( void )
{
    StgInfoTable *info;
    nat arity;
    FB_
    
    IF_DEBUG(apply,fprintf(stderr, "stg_ap_p_ret... "); printClosure(R1.cl));
    IF_DEBUG(sanity,checkStackFrame(Sp+2));
    TICK_SLOW_CALL(1);
    ASSERT(LOOKS_LIKE_CLOSURE_PTR(Sp[1]));
    again:
    info = get_itbl(R1.cl);
    switch (info->type) {
	case BCO:
	    arity = ((StgBCO *)R1.p)->arity;
	    ASSERT(arity > 0);
	    if (arity == 1) {
		Sp += 1;
		JMP_(stg_BCO_entry);
	    } else {
		BUILD_PAP(1,1,(W_)&stg_ap_p_info);
	    }
	case FUN:
	case FUN_1_0:
	case FUN_0_1:
	case FUN_2_0:
	case FUN_1_1:
	case FUN_0_2:
	case FUN_STATIC:
	    arity = itbl_to_fun_itbl(info)->arity;
	    ASSERT(arity > 0);
	    if (arity == 1) {
		Sp += 1;
		JMP_(GET_ENTRY(R1.cl));
	    } else {
		BUILD_PAP(1,1,(W_)&stg_ap_p_info);
	    }
	case PAP:
	    arity = ((StgPAP *)R1.p)->arity;
	    ASSERT(arity > 0);
	    if (arity == 1) {
		Sp += 1;
		R2.w = (W_)&stg_ap_p_info;
		JMP_(stg_PAP_entry);
	    } else {
		NEW_PAP(1,1,(W_)&stg_ap_p_info);
	    }
	
	case AP:
	case AP_STACK:
	case CAF_BLACKHOLE:
	case BLACKHOLE:
	case BLACKHOLE_BQ:
	case SE_BLACKHOLE:
	case SE_CAF_BLACKHOLE:
	case THUNK:
	case THUNK_1_0:
	case THUNK_0_1:
	case THUNK_2_0:
	case THUNK_1_1:
	case THUNK_0_2:
	case THUNK_STATIC:
	case THUNK_SELECTOR:
	    Sp[0] = (W_)&stg_ap_p_info;
	    JMP_(GET_ENTRY(R1.cl));
	    
	case IND:
	case IND_OLDGEN:
	case IND_STATIC:
	case IND_PERM:
	case IND_OLDGEN_PERM:
	    R1.cl = ((StgInd *)R1.p)->indirectee;
	    goto again;
	
	default:
	    barf("stg_ap_p_ret");
	}
FE_
}

INFO_TABLE_RET(stg_ap_pv_info,stg_ap_pv_ret,MK_SMALL_BITMAP(1/*framsize*/,0/*bitmap*/), 0,0,0,RET_SMALL,,EF_,0,0);

F_ stg_ap_pv_ret( void )
{
    StgInfoTable *info;
    nat arity;
    FB_
    
    IF_DEBUG(apply,fprintf(stderr, "stg_ap_pv_ret... "); printClosure(R1.cl));
    IF_DEBUG(sanity,checkStackFrame(Sp+2));
    TICK_SLOW_CALL(2);
    ASSERT(LOOKS_LIKE_CLOSURE_PTR(Sp[1]));
    again:
    info = get_itbl(R1.cl);
    switch (info->type) {
	case BCO:
	    arity = ((StgBCO *)R1.p)->arity;
	    ASSERT(arity > 0);
	    if (arity == 1) {
		Sp[0] = Sp[1];
		Sp[1] = (W_)&stg_ap_v_info;
		Sp += 0;
		JMP_(stg_BCO_entry);
	    }
	    if (arity == 2) {
		Sp += 1;
		JMP_(stg_BCO_entry);
	    } else {
		BUILD_PAP(2,1,(W_)&stg_ap_pv_info);
	    }
	case FUN:
	case FUN_1_0:
	case FUN_0_1:
	case FUN_2_0:
	case FUN_1_1:
	case FUN_0_2:
	case FUN_STATIC:
	    arity = itbl_to_fun_itbl(info)->arity;
	    ASSERT(arity > 0);
	    if (arity == 1) {
		Sp[0] = Sp[1];
		Sp[1] = (W_)&stg_ap_v_info;
		Sp += 0;
		JMP_(GET_ENTRY(R1.cl));
	    }
	    if (arity == 2) {
		Sp += 1;
		JMP_(GET_ENTRY(R1.cl));
	    } else {
		BUILD_PAP(2,1,(W_)&stg_ap_pv_info);
	    }
	case PAP:
	    arity = ((StgPAP *)R1.p)->arity;
	    ASSERT(arity > 0);
	    if (arity == 1) {
		Sp[0] = Sp[1];
		Sp[1] = (W_)&stg_ap_v_info;
		Sp += 0;
		R2.w = (W_)&stg_ap_p_info;
		JMP_(stg_PAP_entry);
	    }
	    if (arity == 2) {
		Sp += 1;
		R2.w = (W_)&stg_ap_pv_info;
		JMP_(stg_PAP_entry);
	    } else {
		NEW_PAP(2,1,(W_)&stg_ap_pv_info);
	    }
	
	case AP:
	case AP_STACK:
	case CAF_BLACKHOLE:
	case BLACKHOLE:
	case BLACKHOLE_BQ:
	case SE_BLACKHOLE:
	case SE_CAF_BLACKHOLE:
	case THUNK:
	case THUNK_1_0:
	case THUNK_0_1:
	case THUNK_2_0:
	case THUNK_1_1:
	case THUNK_0_2:
	case THUNK_STATIC:
	case THUNK_SELECTOR:
	    Sp[0] = (W_)&stg_ap_pv_info;
	    JMP_(GET_ENTRY(R1.cl));
	    
	case IND:
	case IND_OLDGEN:
	case IND_STATIC:
	case IND_PERM:
	case IND_OLDGEN_PERM:
	    R1.cl = ((StgInd *)R1.p)->indirectee;
	    goto again;
	
	default:
	    barf("stg_ap_pv_ret");
	}
FE_
}

INFO_TABLE_RET(stg_ap_pp_info,stg_ap_pp_ret,MK_SMALL_BITMAP(2/*framsize*/,0/*bitmap*/), 0,0,0,RET_SMALL,,EF_,0,0);

F_ stg_ap_pp_ret( void )
{
    StgInfoTable *info;
    nat arity;
    FB_
    
    IF_DEBUG(apply,fprintf(stderr, "stg_ap_pp_ret... "); printClosure(R1.cl));
    IF_DEBUG(sanity,checkStackFrame(Sp+3));
    TICK_SLOW_CALL(2);
    ASSERT(LOOKS_LIKE_CLOSURE_PTR(Sp[1]));
    ASSERT(LOOKS_LIKE_CLOSURE_PTR(Sp[2]));
    again:
    info = get_itbl(R1.cl);
    switch (info->type) {
	case BCO:
	    arity = ((StgBCO *)R1.p)->arity;
	    ASSERT(arity > 0);
	    if (arity == 1) {
		Sp[0] = Sp[1];
		Sp[1] = (W_)&stg_ap_p_info;
		Sp += 0;
		JMP_(stg_BCO_entry);
	    }
	    if (arity == 2) {
		Sp += 1;
		JMP_(stg_BCO_entry);
	    } else {
		BUILD_PAP(2,2,(W_)&stg_ap_pp_info);
	    }
	case FUN:
	case FUN_1_0:
	case FUN_0_1:
	case FUN_2_0:
	case FUN_1_1:
	case FUN_0_2:
	case FUN_STATIC:
	    arity = itbl_to_fun_itbl(info)->arity;
	    ASSERT(arity > 0);
	    if (arity == 1) {
		Sp[0] = Sp[1];
		Sp[1] = (W_)&stg_ap_p_info;
		Sp += 0;
		JMP_(GET_ENTRY(R1.cl));
	    }
	    if (arity == 2) {
		Sp += 1;
		JMP_(GET_ENTRY(R1.cl));
	    } else {
		BUILD_PAP(2,2,(W_)&stg_ap_pp_info);
	    }
	case PAP:
	    arity = ((StgPAP *)R1.p)->arity;
	    ASSERT(arity > 0);
	    if (arity == 1) {
		Sp[0] = Sp[1];
		Sp[1] = (W_)&stg_ap_p_info;
		Sp += 0;
		R2.w = (W_)&stg_ap_p_info;
		JMP_(stg_PAP_entry);
	    }
	    if (arity == 2) {
		Sp += 1;
		R2.w = (W_)&stg_ap_pp_info;
		JMP_(stg_PAP_entry);
	    } else {
		NEW_PAP(2,2,(W_)&stg_ap_pp_info);
	    }
	
	case AP:
	case AP_STACK:
	case CAF_BLACKHOLE:
	case BLACKHOLE:
	case BLACKHOLE_BQ:
	case SE_BLACKHOLE:
	case SE_CAF_BLACKHOLE:
	case THUNK:
	case THUNK_1_0:
	case THUNK_0_1:
	case THUNK_2_0:
	case THUNK_1_1:
	case THUNK_0_2:
	case THUNK_STATIC:
	case THUNK_SELECTOR:
	    Sp[0] = (W_)&stg_ap_pp_info;
	    JMP_(GET_ENTRY(R1.cl));
	    
	case IND:
	case IND_OLDGEN:
	case IND_STATIC:
	case IND_PERM:
	case IND_OLDGEN_PERM:
	    R1.cl = ((StgInd *)R1.p)->indirectee;
	    goto again;
	
	default:
	    barf("stg_ap_pp_ret");
	}
FE_
}

INFO_TABLE_RET(stg_ap_ppv_info,stg_ap_ppv_ret,MK_SMALL_BITMAP(2/*framsize*/,0/*bitmap*/), 0,0,0,RET_SMALL,,EF_,0,0);

F_ stg_ap_ppv_ret( void )
{
    StgInfoTable *info;
    nat arity;
    FB_
    
    IF_DEBUG(apply,fprintf(stderr, "stg_ap_ppv_ret... "); printClosure(R1.cl));
    IF_DEBUG(sanity,checkStackFrame(Sp+3));
    TICK_SLOW_CALL(3);
    ASSERT(LOOKS_LIKE_CLOSURE_PTR(Sp[1]));
    ASSERT(LOOKS_LIKE_CLOSURE_PTR(Sp[2]));
    again:
    info = get_itbl(R1.cl);
    switch (info->type) {
	case BCO:
	    arity = ((StgBCO *)R1.p)->arity;
	    ASSERT(arity > 0);
	    if (arity == 1) {
		Sp[0] = Sp[1];
		Sp[1] = (W_)&stg_ap_pv_info;
		Sp += 0;
		JMP_(stg_BCO_entry);
	    }
	    if (arity == 2) {
		Sp[0] = Sp[1];
		Sp[1] = Sp[2];
		Sp[2] = (W_)&stg_ap_v_info;
		Sp += 0;
		JMP_(stg_BCO_entry);
	    }
	    if (arity == 3) {
		Sp += 1;
		JMP_(stg_BCO_entry);
	    } else {
		BUILD_PAP(3,2,(W_)&stg_ap_ppv_info);
	    }
	case FUN:
	case FUN_1_0:
	case FUN_0_1:
	case FUN_2_0:
	case FUN_1_1:
	case FUN_0_2:
	case FUN_STATIC:
	    arity = itbl_to_fun_itbl(info)->arity;
	    ASSERT(arity > 0);
	    if (arity == 1) {
		Sp[0] = Sp[1];
		Sp[1] = (W_)&stg_ap_pv_info;
		Sp += 0;
		JMP_(GET_ENTRY(R1.cl));
	    }
	    if (arity == 2) {
		Sp[0] = Sp[1];
		Sp[1] = Sp[2];
		Sp[2] = (W_)&stg_ap_v_info;
		Sp += 0;
		JMP_(GET_ENTRY(R1.cl));
	    }
	    if (arity == 3) {
		Sp += 1;
		JMP_(GET_ENTRY(R1.cl));
	    } else {
		BUILD_PAP(3,2,(W_)&stg_ap_ppv_info);
	    }
	case PAP:
	    arity = ((StgPAP *)R1.p)->arity;
	    ASSERT(arity > 0);
	    if (arity == 1) {
		Sp[0] = Sp[1];
		Sp[1] = (W_)&stg_ap_pv_info;
		Sp += 0;
		R2.w = (W_)&stg_ap_p_info;
		JMP_(stg_PAP_entry);
	    }
	    if (arity == 2) {
		Sp[0] = Sp[1];
		Sp[1] = Sp[2];
		Sp[2] = (W_)&stg_ap_v_info;
		Sp += 0;
		R2.w = (W_)&stg_ap_pp_info;
		JMP_(stg_PAP_entry);
	    }
	    if (arity == 3) {
		Sp += 1;
		R2.w = (W_)&stg_ap_ppv_info;
		JMP_(stg_PAP_entry);
	    } else {
		NEW_PAP(3,2,(W_)&stg_ap_ppv_info);
	    }
	
	case AP:
	case AP_STACK:
	case CAF_BLACKHOLE:
	case BLACKHOLE:
	case BLACKHOLE_BQ:
	case SE_BLACKHOLE:
	case SE_CAF_BLACKHOLE:
	case THUNK:
	case THUNK_1_0:
	case THUNK_0_1:
	case THUNK_2_0:
	case THUNK_1_1:
	case THUNK_0_2:
	case THUNK_STATIC:
	case THUNK_SELECTOR:
	    Sp[0] = (W_)&stg_ap_ppv_info;
	    JMP_(GET_ENTRY(R1.cl));
	    
	case IND:
	case IND_OLDGEN:
	case IND_STATIC:
	case IND_PERM:
	case IND_OLDGEN_PERM:
	    R1.cl = ((StgInd *)R1.p)->indirectee;
	    goto again;
	
	default:
	    barf("stg_ap_ppv_ret");
	}
FE_
}

INFO_TABLE_RET(stg_ap_ppp_info,stg_ap_ppp_ret,MK_SMALL_BITMAP(3/*framsize*/,0/*bitmap*/), 0,0,0,RET_SMALL,,EF_,0,0);

F_ stg_ap_ppp_ret( void )
{
    StgInfoTable *info;
    nat arity;
    FB_
    
    IF_DEBUG(apply,fprintf(stderr, "stg_ap_ppp_ret... "); printClosure(R1.cl));
    IF_DEBUG(sanity,checkStackFrame(Sp+4));
    TICK_SLOW_CALL(3);
    ASSERT(LOOKS_LIKE_CLOSURE_PTR(Sp[1]));
    ASSERT(LOOKS_LIKE_CLOSURE_PTR(Sp[2]));
    ASSERT(LOOKS_LIKE_CLOSURE_PTR(Sp[3]));
    again:
    info = get_itbl(R1.cl);
    switch (info->type) {
	case BCO:
	    arity = ((StgBCO *)R1.p)->arity;
	    ASSERT(arity > 0);
	    if (arity == 1) {
		Sp[0] = Sp[1];
		Sp[1] = (W_)&stg_ap_pp_info;
		Sp += 0;
		JMP_(stg_BCO_entry);
	    }
	    if (arity == 2) {
		Sp[0] = Sp[1];
		Sp[1] = Sp[2];
		Sp[2] = (W_)&stg_ap_p_info;
		Sp += 0;
		JMP_(stg_BCO_entry);
	    }
	    if (arity == 3) {
		Sp += 1;
		JMP_(stg_BCO_entry);
	    } else {
		BUILD_PAP(3,3,(W_)&stg_ap_ppp_info);
	    }
	case FUN:
	case FUN_1_0:
	case FUN_0_1:
	case FUN_2_0:
	case FUN_1_1:
	case FUN_0_2:
	case FUN_STATIC:
	    arity = itbl_to_fun_itbl(info)->arity;
	    ASSERT(arity > 0);
	    if (arity == 1) {
		Sp[0] = Sp[1];
		Sp[1] = (W_)&stg_ap_pp_info;
		Sp += 0;
		JMP_(GET_ENTRY(R1.cl));
	    }
	    if (arity == 2) {
		Sp[0] = Sp[1];
		Sp[1] = Sp[2];
		Sp[2] = (W_)&stg_ap_p_info;
		Sp += 0;
		JMP_(GET_ENTRY(R1.cl));
	    }
	    if (arity == 3) {
		Sp += 1;
		JMP_(GET_ENTRY(R1.cl));
	    } else {
		BUILD_PAP(3,3,(W_)&stg_ap_ppp_info);
	    }
	case PAP:
	    arity = ((StgPAP *)R1.p)->arity;
	    ASSERT(arity > 0);
	    if (arity == 1) {
		Sp[0] = Sp[1];
		Sp[1] = (W_)&stg_ap_pp_info;
		Sp += 0;
		R2.w = (W_)&stg_ap_p_info;
		JMP_(stg_PAP_entry);
	    }
	    if (arity == 2) {
		Sp[0] = Sp[1];
		Sp[1] = Sp[2];
		Sp[2] = (W_)&stg_ap_p_info;
		Sp += 0;
		R2.w = (W_)&stg_ap_pp_info;
		JMP_(stg_PAP_entry);
	    }
	    if (arity == 3) {
		Sp += 1;
		R2.w = (W_)&stg_ap_ppp_info;
		JMP_(stg_PAP_entry);
	    } else {
		NEW_PAP(3,3,(W_)&stg_ap_ppp_info);
	    }
	
	case AP:
	case AP_STACK:
	case CAF_BLACKHOLE:
	case BLACKHOLE:
	case BLACKHOLE_BQ:
	case SE_BLACKHOLE:
	case SE_CAF_BLACKHOLE:
	case THUNK:
	case THUNK_1_0:
	case THUNK_0_1:
	case THUNK_2_0:
	case THUNK_1_1:
	case THUNK_0_2:
	case THUNK_STATIC:
	case THUNK_SELECTOR:
	    Sp[0] = (W_)&stg_ap_ppp_info;
	    JMP_(GET_ENTRY(R1.cl));
	    
	case IND:
	case IND_OLDGEN:
	case IND_STATIC:
	case IND_PERM:
	case IND_OLDGEN_PERM:
	    R1.cl = ((StgInd *)R1.p)->indirectee;
	    goto again;
	
	default:
	    barf("stg_ap_ppp_ret");
	}
FE_
}

INFO_TABLE_RET(stg_ap_pppp_info,stg_ap_pppp_ret,MK_SMALL_BITMAP(4/*framsize*/,0/*bitmap*/), 0,0,0,RET_SMALL,,EF_,0,0);

F_ stg_ap_pppp_ret( void )
{
    StgInfoTable *info;
    nat arity;
    FB_
    
    IF_DEBUG(apply,fprintf(stderr, "stg_ap_pppp_ret... "); printClosure(R1.cl));
    IF_DEBUG(sanity,checkStackFrame(Sp+5));
    TICK_SLOW_CALL(4);
    ASSERT(LOOKS_LIKE_CLOSURE_PTR(Sp[1]));
    ASSERT(LOOKS_LIKE_CLOSURE_PTR(Sp[2]));
    ASSERT(LOOKS_LIKE_CLOSURE_PTR(Sp[3]));
    ASSERT(LOOKS_LIKE_CLOSURE_PTR(Sp[4]));
    again:
    info = get_itbl(R1.cl);
    switch (info->type) {
	case BCO:
	    arity = ((StgBCO *)R1.p)->arity;
	    ASSERT(arity > 0);
	    if (arity == 1) {
		Sp[0] = Sp[1];
		Sp[1] = (W_)&stg_ap_ppp_info;
		Sp += 0;
		JMP_(stg_BCO_entry);
	    }
	    if (arity == 2) {
		Sp[0] = Sp[1];
		Sp[1] = Sp[2];
		Sp[2] = (W_)&stg_ap_pp_info;
		Sp += 0;
		JMP_(stg_BCO_entry);
	    }
	    if (arity == 3) {
		Sp[0] = Sp[1];
		Sp[1] = Sp[2];
		Sp[2] = Sp[3];
		Sp[3] = (W_)&stg_ap_p_info;
		Sp += 0;
		JMP_(stg_BCO_entry);
	    }
	    if (arity == 4) {
		Sp += 1;
		JMP_(stg_BCO_entry);
	    } else {
		BUILD_PAP(4,4,(W_)&stg_ap_pppp_info);
	    }
	case FUN:
	case FUN_1_0:
	case FUN_0_1:
	case FUN_2_0:
	case FUN_1_1:
	case FUN_0_2:
	case FUN_STATIC:
	    arity = itbl_to_fun_itbl(info)->arity;
	    ASSERT(arity > 0);
	    if (arity == 1) {
		Sp[0] = Sp[1];
		Sp[1] = (W_)&stg_ap_ppp_info;
		Sp += 0;
		JMP_(GET_ENTRY(R1.cl));
	    }
	    if (arity == 2) {
		Sp[0] = Sp[1];
		Sp[1] = Sp[2];
		Sp[2] = (W_)&stg_ap_pp_info;
		Sp += 0;
		JMP_(GET_ENTRY(R1.cl));
	    }
	    if (arity == 3) {
		Sp[0] = Sp[1];
		Sp[1] = Sp[2];
		Sp[2] = Sp[3];
		Sp[3] = (W_)&stg_ap_p_info;
		Sp += 0;
		JMP_(GET_ENTRY(R1.cl));
	    }
	    if (arity == 4) {
		Sp += 1;
		JMP_(GET_ENTRY(R1.cl));
	    } else {
		BUILD_PAP(4,4,(W_)&stg_ap_pppp_info);
	    }
	case PAP:
	    arity = ((StgPAP *)R1.p)->arity;
	    ASSERT(arity > 0);
	    if (arity == 1) {
		Sp[0] = Sp[1];
		Sp[1] = (W_)&stg_ap_ppp_info;
		Sp += 0;
		R2.w = (W_)&stg_ap_p_info;
		JMP_(stg_PAP_entry);
	    }
	    if (arity == 2) {
		Sp[0] = Sp[1];
		Sp[1] = Sp[2];
		Sp[2] = (W_)&stg_ap_pp_info;
		Sp += 0;
		R2.w = (W_)&stg_ap_pp_info;
		JMP_(stg_PAP_entry);
	    }
	    if (arity == 3) {
		Sp[0] = Sp[1];
		Sp[1] = Sp[2];
		Sp[2] = Sp[3];
		Sp[3] = (W_)&stg_ap_p_info;
		Sp += 0;
		R2.w = (W_)&stg_ap_ppp_info;
		JMP_(stg_PAP_entry);
	    }
	    if (arity == 4) {
		Sp += 1;
		R2.w = (W_)&stg_ap_pppp_info;
		JMP_(stg_PAP_entry);
	    } else {
		NEW_PAP(4,4,(W_)&stg_ap_pppp_info);
	    }
	
	case AP:
	case AP_STACK:
	case CAF_BLACKHOLE:
	case BLACKHOLE:
	case BLACKHOLE_BQ:
	case SE_BLACKHOLE:
	case SE_CAF_BLACKHOLE:
	case THUNK:
	case THUNK_1_0:
	case THUNK_0_1:
	case THUNK_2_0:
	case THUNK_1_1:
	case THUNK_0_2:
	case THUNK_STATIC:
	case THUNK_SELECTOR:
	    Sp[0] = (W_)&stg_ap_pppp_info;
	    JMP_(GET_ENTRY(R1.cl));
	    
	case IND:
	case IND_OLDGEN:
	case IND_STATIC:
	case IND_PERM:
	case IND_OLDGEN_PERM:
	    R1.cl = ((StgInd *)R1.p)->indirectee;
	    goto again;
	
	default:
	    barf("stg_ap_pppp_ret");
	}
FE_
}

INFO_TABLE_RET(stg_ap_ppppp_info,stg_ap_ppppp_ret,MK_SMALL_BITMAP(5/*framsize*/,0/*bitmap*/), 0,0,0,RET_SMALL,,EF_,0,0);

F_ stg_ap_ppppp_ret( void )
{
    StgInfoTable *info;
    nat arity;
    FB_
    
    IF_DEBUG(apply,fprintf(stderr, "stg_ap_ppppp_ret... "); printClosure(R1.cl));
    IF_DEBUG(sanity,checkStackFrame(Sp+6));
    TICK_SLOW_CALL(5);
    ASSERT(LOOKS_LIKE_CLOSURE_PTR(Sp[1]));
    ASSERT(LOOKS_LIKE_CLOSURE_PTR(Sp[2]));
    ASSERT(LOOKS_LIKE_CLOSURE_PTR(Sp[3]));
    ASSERT(LOOKS_LIKE_CLOSURE_PTR(Sp[4]));
    ASSERT(LOOKS_LIKE_CLOSURE_PTR(Sp[5]));
    again:
    info = get_itbl(R1.cl);
    switch (info->type) {
	case BCO:
	    arity = ((StgBCO *)R1.p)->arity;
	    ASSERT(arity > 0);
	    if (arity == 1) {
		Sp[0] = Sp[1];
		Sp[1] = (W_)&stg_ap_pppp_info;
		Sp += 0;
		JMP_(stg_BCO_entry);
	    }
	    if (arity == 2) {
		Sp[0] = Sp[1];
		Sp[1] = Sp[2];
		Sp[2] = (W_)&stg_ap_ppp_info;
		Sp += 0;
		JMP_(stg_BCO_entry);
	    }
	    if (arity == 3) {
		Sp[0] = Sp[1];
		Sp[1] = Sp[2];
		Sp[2] = Sp[3];
		Sp[3] = (W_)&stg_ap_pp_info;
		Sp += 0;
		JMP_(stg_BCO_entry);
	    }
	    if (arity == 4) {
		Sp[0] = Sp[1];
		Sp[1] = Sp[2];
		Sp[2] = Sp[3];
		Sp[3] = Sp[4];
		Sp[4] = (W_)&stg_ap_p_info;
		Sp += 0;
		JMP_(stg_BCO_entry);
	    }
	    if (arity == 5) {
		Sp += 1;
		JMP_(stg_BCO_entry);
	    } else {
		BUILD_PAP(5,5,(W_)&stg_ap_ppppp_info);
	    }
	case FUN:
	case FUN_1_0:
	case FUN_0_1:
	case FUN_2_0:
	case FUN_1_1:
	case FUN_0_2:
	case FUN_STATIC:
	    arity = itbl_to_fun_itbl(info)->arity;
	    ASSERT(arity > 0);
	    if (arity == 1) {
		Sp[0] = Sp[1];
		Sp[1] = (W_)&stg_ap_pppp_info;
		Sp += 0;
		JMP_(GET_ENTRY(R1.cl));
	    }
	    if (arity == 2) {
		Sp[0] = Sp[1];
		Sp[1] = Sp[2];
		Sp[2] = (W_)&stg_ap_ppp_info;
		Sp += 0;
		JMP_(GET_ENTRY(R1.cl));
	    }
	    if (arity == 3) {
		Sp[0] = Sp[1];
		Sp[1] = Sp[2];
		Sp[2] = Sp[3];
		Sp[3] = (W_)&stg_ap_pp_info;
		Sp += 0;
		JMP_(GET_ENTRY(R1.cl));
	    }
	    if (arity == 4) {
		Sp[0] = Sp[1];
		Sp[1] = Sp[2];
		Sp[2] = Sp[3];
		Sp[3] = Sp[4];
		Sp[4] = (W_)&stg_ap_p_info;
		Sp += 0;
		JMP_(GET_ENTRY(R1.cl));
	    }
	    if (arity == 5) {
		Sp += 1;
		JMP_(GET_ENTRY(R1.cl));
	    } else {
		BUILD_PAP(5,5,(W_)&stg_ap_ppppp_info);
	    }
	case PAP:
	    arity = ((StgPAP *)R1.p)->arity;
	    ASSERT(arity > 0);
	    if (arity == 1) {
		Sp[0] = Sp[1];
		Sp[1] = (W_)&stg_ap_pppp_info;
		Sp += 0;
		R2.w = (W_)&stg_ap_p_info;
		JMP_(stg_PAP_entry);
	    }
	    if (arity == 2) {
		Sp[0] = Sp[1];
		Sp[1] = Sp[2];
		Sp[2] = (W_)&stg_ap_ppp_info;
		Sp += 0;
		R2.w = (W_)&stg_ap_pp_info;
		JMP_(stg_PAP_entry);
	    }
	    if (arity == 3) {
		Sp[0] = Sp[1];
		Sp[1] = Sp[2];
		Sp[2] = Sp[3];
		Sp[3] = (W_)&stg_ap_pp_info;
		Sp += 0;
		R2.w = (W_)&stg_ap_ppp_info;
		JMP_(stg_PAP_entry);
	    }
	    if (arity == 4) {
		Sp[0] = Sp[1];
		Sp[1] = Sp[2];
		Sp[2] = Sp[3];
		Sp[3] = Sp[4];
		Sp[4] = (W_)&stg_ap_p_info;
		Sp += 0;
		R2.w = (W_)&stg_ap_pppp_info;
		JMP_(stg_PAP_entry);
	    }
	    if (arity == 5) {
		Sp += 1;
		R2.w = (W_)&stg_ap_ppppp_info;
		JMP_(stg_PAP_entry);
	    } else {
		NEW_PAP(5,5,(W_)&stg_ap_ppppp_info);
	    }
	
	case AP:
	case AP_STACK:
	case CAF_BLACKHOLE:
	case BLACKHOLE:
	case BLACKHOLE_BQ:
	case SE_BLACKHOLE:
	case SE_CAF_BLACKHOLE:
	case THUNK:
	case THUNK_1_0:
	case THUNK_0_1:
	case THUNK_2_0:
	case THUNK_1_1:
	case THUNK_0_2:
	case THUNK_STATIC:
	case THUNK_SELECTOR:
	    Sp[0] = (W_)&stg_ap_ppppp_info;
	    JMP_(GET_ENTRY(R1.cl));
	    
	case IND:
	case IND_OLDGEN:
	case IND_STATIC:
	case IND_PERM:
	case IND_OLDGEN_PERM:
	    R1.cl = ((StgInd *)R1.p)->indirectee;
	    goto again;
	
	default:
	    barf("stg_ap_ppppp_ret");
	}
FE_
}

INFO_TABLE_RET(stg_ap_pppppp_info,stg_ap_pppppp_ret,MK_SMALL_BITMAP(6/*framsize*/,0/*bitmap*/), 0,0,0,RET_SMALL,,EF_,0,0);

F_ stg_ap_pppppp_ret( void )
{
    StgInfoTable *info;
    nat arity;
    FB_
    
    IF_DEBUG(apply,fprintf(stderr, "stg_ap_pppppp_ret... "); printClosure(R1.cl));
    IF_DEBUG(sanity,checkStackFrame(Sp+7));
    TICK_SLOW_CALL(6);
    ASSERT(LOOKS_LIKE_CLOSURE_PTR(Sp[1]));
    ASSERT(LOOKS_LIKE_CLOSURE_PTR(Sp[2]));
    ASSERT(LOOKS_LIKE_CLOSURE_PTR(Sp[3]));
    ASSERT(LOOKS_LIKE_CLOSURE_PTR(Sp[4]));
    ASSERT(LOOKS_LIKE_CLOSURE_PTR(Sp[5]));
    ASSERT(LOOKS_LIKE_CLOSURE_PTR(Sp[6]));
    again:
    info = get_itbl(R1.cl);
    switch (info->type) {
	case BCO:
	    arity = ((StgBCO *)R1.p)->arity;
	    ASSERT(arity > 0);
	    if (arity == 1) {
		Sp[0] = Sp[1];
		Sp[1] = (W_)&stg_ap_ppppp_info;
		Sp += 0;
		JMP_(stg_BCO_entry);
	    }
	    if (arity == 2) {
		Sp[0] = Sp[1];
		Sp[1] = Sp[2];
		Sp[2] = (W_)&stg_ap_pppp_info;
		Sp += 0;
		JMP_(stg_BCO_entry);
	    }
	    if (arity == 3) {
		Sp[0] = Sp[1];
		Sp[1] = Sp[2];
		Sp[2] = Sp[3];
		Sp[3] = (W_)&stg_ap_ppp_info;
		Sp += 0;
		JMP_(stg_BCO_entry);
	    }
	    if (arity == 4) {
		Sp[0] = Sp[1];
		Sp[1] = Sp[2];
		Sp[2] = Sp[3];
		Sp[3] = Sp[4];
		Sp[4] = (W_)&stg_ap_pp_info;
		Sp += 0;
		JMP_(stg_BCO_entry);
	    }
	    if (arity == 5) {
		Sp[0] = Sp[1];
		Sp[1] = Sp[2];
		Sp[2] = Sp[3];
		Sp[3] = Sp[4];
		Sp[4] = Sp[5];
		Sp[5] = (W_)&stg_ap_p_info;
		Sp += 0;
		JMP_(stg_BCO_entry);
	    }
	    if (arity == 6) {
		Sp += 1;
		JMP_(stg_BCO_entry);
	    } else {
		BUILD_PAP(6,6,(W_)&stg_ap_pppppp_info);
	    }
	case FUN:
	case FUN_1_0:
	case FUN_0_1:
	case FUN_2_0:
	case FUN_1_1:
	case FUN_0_2:
	case FUN_STATIC:
	    arity = itbl_to_fun_itbl(info)->arity;
	    ASSERT(arity > 0);
	    if (arity == 1) {
		Sp[0] = Sp[1];
		Sp[1] = (W_)&stg_ap_ppppp_info;
		Sp += 0;
		JMP_(GET_ENTRY(R1.cl));
	    }
	    if (arity == 2) {
		Sp[0] = Sp[1];
		Sp[1] = Sp[2];
		Sp[2] = (W_)&stg_ap_pppp_info;
		Sp += 0;
		JMP_(GET_ENTRY(R1.cl));
	    }
	    if (arity == 3) {
		Sp[0] = Sp[1];
		Sp[1] = Sp[2];
		Sp[2] = Sp[3];
		Sp[3] = (W_)&stg_ap_ppp_info;
		Sp += 0;
		JMP_(GET_ENTRY(R1.cl));
	    }
	    if (arity == 4) {
		Sp[0] = Sp[1];
		Sp[1] = Sp[2];
		Sp[2] = Sp[3];
		Sp[3] = Sp[4];
		Sp[4] = (W_)&stg_ap_pp_info;
		Sp += 0;
		JMP_(GET_ENTRY(R1.cl));
	    }
	    if (arity == 5) {
		Sp[0] = Sp[1];
		Sp[1] = Sp[2];
		Sp[2] = Sp[3];
		Sp[3] = Sp[4];
		Sp[4] = Sp[5];
		Sp[5] = (W_)&stg_ap_p_info;
		Sp += 0;
		JMP_(GET_ENTRY(R1.cl));
	    }
	    if (arity == 6) {
		Sp += 1;
		JMP_(GET_ENTRY(R1.cl));
	    } else {
		BUILD_PAP(6,6,(W_)&stg_ap_pppppp_info);
	    }
	case PAP:
	    arity = ((StgPAP *)R1.p)->arity;
	    ASSERT(arity > 0);
	    if (arity == 1) {
		Sp[0] = Sp[1];
		Sp[1] = (W_)&stg_ap_ppppp_info;
		Sp += 0;
		R2.w = (W_)&stg_ap_p_info;
		JMP_(stg_PAP_entry);
	    }
	    if (arity == 2) {
		Sp[0] = Sp[1];
		Sp[1] = Sp[2];
		Sp[2] = (W_)&stg_ap_pppp_info;
		Sp += 0;
		R2.w = (W_)&stg_ap_pp_info;
		JMP_(stg_PAP_entry);
	    }
	    if (arity == 3) {
		Sp[0] = Sp[1];
		Sp[1] = Sp[2];
		Sp[2] = Sp[3];
		Sp[3] = (W_)&stg_ap_ppp_info;
		Sp += 0;
		R2.w = (W_)&stg_ap_ppp_info;
		JMP_(stg_PAP_entry);
	    }
	    if (arity == 4) {
		Sp[0] = Sp[1];
		Sp[1] = Sp[2];
		Sp[2] = Sp[3];
		Sp[3] = Sp[4];
		Sp[4] = (W_)&stg_ap_pp_info;
		Sp += 0;
		R2.w = (W_)&stg_ap_pppp_info;
		JMP_(stg_PAP_entry);
	    }
	    if (arity == 5) {
		Sp[0] = Sp[1];
		Sp[1] = Sp[2];
		Sp[2] = Sp[3];
		Sp[3] = Sp[4];
		Sp[4] = Sp[5];
		Sp[5] = (W_)&stg_ap_p_info;
		Sp += 0;
		R2.w = (W_)&stg_ap_ppppp_info;
		JMP_(stg_PAP_entry);
	    }
	    if (arity == 6) {
		Sp += 1;
		R2.w = (W_)&stg_ap_pppppp_info;
		JMP_(stg_PAP_entry);
	    } else {
		NEW_PAP(6,6,(W_)&stg_ap_pppppp_info);
	    }
	
	case AP:
	case AP_STACK:
	case CAF_BLACKHOLE:
	case BLACKHOLE:
	case BLACKHOLE_BQ:
	case SE_BLACKHOLE:
	case SE_CAF_BLACKHOLE:
	case THUNK:
	case THUNK_1_0:
	case THUNK_0_1:
	case THUNK_2_0:
	case THUNK_1_1:
	case THUNK_0_2:
	case THUNK_STATIC:
	case THUNK_SELECTOR:
	    Sp[0] = (W_)&stg_ap_pppppp_info;
	    JMP_(GET_ENTRY(R1.cl));
	    
	case IND:
	case IND_OLDGEN:
	case IND_STATIC:
	case IND_PERM:
	case IND_OLDGEN_PERM:
	    R1.cl = ((StgInd *)R1.p)->indirectee;
	    goto again;
	
	default:
	    barf("stg_ap_pppppp_ret");
	}
FE_
}

INFO_TABLE_RET(stg_ap_ppppppp_info,stg_ap_ppppppp_ret,MK_SMALL_BITMAP(7/*framsize*/,0/*bitmap*/), 0,0,0,RET_SMALL,,EF_,0,0);

F_ stg_ap_ppppppp_ret( void )
{
    StgInfoTable *info;
    nat arity;
    FB_
    
    IF_DEBUG(apply,fprintf(stderr, "stg_ap_ppppppp_ret... "); printClosure(R1.cl));
    IF_DEBUG(sanity,checkStackFrame(Sp+8));
    TICK_SLOW_CALL(7);
    ASSERT(LOOKS_LIKE_CLOSURE_PTR(Sp[1]));
    ASSERT(LOOKS_LIKE_CLOSURE_PTR(Sp[2]));
    ASSERT(LOOKS_LIKE_CLOSURE_PTR(Sp[3]));
    ASSERT(LOOKS_LIKE_CLOSURE_PTR(Sp[4]));
    ASSERT(LOOKS_LIKE_CLOSURE_PTR(Sp[5]));
    ASSERT(LOOKS_LIKE_CLOSURE_PTR(Sp[6]));
    ASSERT(LOOKS_LIKE_CLOSURE_PTR(Sp[7]));
    again:
    info = get_itbl(R1.cl);
    switch (info->type) {
	case BCO:
	    arity = ((StgBCO *)R1.p)->arity;
	    ASSERT(arity > 0);
	    if (arity == 1) {
		Sp[0] = Sp[1];
		Sp[1] = (W_)&stg_ap_pppppp_info;
		Sp += 0;
		JMP_(stg_BCO_entry);
	    }
	    if (arity == 2) {
		Sp[0] = Sp[1];
		Sp[1] = Sp[2];
		Sp[2] = (W_)&stg_ap_ppppp_info;
		Sp += 0;
		JMP_(stg_BCO_entry);
	    }
	    if (arity == 3) {
		Sp[0] = Sp[1];
		Sp[1] = Sp[2];
		Sp[2] = Sp[3];
		Sp[3] = (W_)&stg_ap_pppp_info;
		Sp += 0;
		JMP_(stg_BCO_entry);
	    }
	    if (arity == 4) {
		Sp[0] = Sp[1];
		Sp[1] = Sp[2];
		Sp[2] = Sp[3];
		Sp[3] = Sp[4];
		Sp[4] = (W_)&stg_ap_ppp_info;
		Sp += 0;
		JMP_(stg_BCO_entry);
	    }
	    if (arity == 5) {
		Sp[0] = Sp[1];
		Sp[1] = Sp[2];
		Sp[2] = Sp[3];
		Sp[3] = Sp[4];
		Sp[4] = Sp[5];
		Sp[5] = (W_)&stg_ap_pp_info;
		Sp += 0;
		JMP_(stg_BCO_entry);
	    }
	    if (arity == 6) {
		Sp[0] = Sp[1];
		Sp[1] = Sp[2];
		Sp[2] = Sp[3];
		Sp[3] = Sp[4];
		Sp[4] = Sp[5];
		Sp[5] = Sp[6];
		Sp[6] = (W_)&stg_ap_p_info;
		Sp += 0;
		JMP_(stg_BCO_entry);
	    }
	    if (arity == 7) {
		Sp += 1;
		JMP_(stg_BCO_entry);
	    } else {
		BUILD_PAP(7,7,(W_)&stg_ap_ppppppp_info);
	    }
	case FUN:
	case FUN_1_0:
	case FUN_0_1:
	case FUN_2_0:
	case FUN_1_1:
	case FUN_0_2:
	case FUN_STATIC:
	    arity = itbl_to_fun_itbl(info)->arity;
	    ASSERT(arity > 0);
	    if (arity == 1) {
		Sp[0] = Sp[1];
		Sp[1] = (W_)&stg_ap_pppppp_info;
		Sp += 0;
		JMP_(GET_ENTRY(R1.cl));
	    }
	    if (arity == 2) {
		Sp[0] = Sp[1];
		Sp[1] = Sp[2];
		Sp[2] = (W_)&stg_ap_ppppp_info;
		Sp += 0;
		JMP_(GET_ENTRY(R1.cl));
	    }
	    if (arity == 3) {
		Sp[0] = Sp[1];
		Sp[1] = Sp[2];
		Sp[2] = Sp[3];
		Sp[3] = (W_)&stg_ap_pppp_info;
		Sp += 0;
		JMP_(GET_ENTRY(R1.cl));
	    }
	    if (arity == 4) {
		Sp[0] = Sp[1];
		Sp[1] = Sp[2];
		Sp[2] = Sp[3];
		Sp[3] = Sp[4];
		Sp[4] = (W_)&stg_ap_ppp_info;
		Sp += 0;
		JMP_(GET_ENTRY(R1.cl));
	    }
	    if (arity == 5) {
		Sp[0] = Sp[1];
		Sp[1] = Sp[2];
		Sp[2] = Sp[3];
		Sp[3] = Sp[4];
		Sp[4] = Sp[5];
		Sp[5] = (W_)&stg_ap_pp_info;
		Sp += 0;
		JMP_(GET_ENTRY(R1.cl));
	    }
	    if (arity == 6) {
		Sp[0] = Sp[1];
		Sp[1] = Sp[2];
		Sp[2] = Sp[3];
		Sp[3] = Sp[4];
		Sp[4] = Sp[5];
		Sp[5] = Sp[6];
		Sp[6] = (W_)&stg_ap_p_info;
		Sp += 0;
		JMP_(GET_ENTRY(R1.cl));
	    }
	    if (arity == 7) {
		Sp += 1;
		JMP_(GET_ENTRY(R1.cl));
	    } else {
		BUILD_PAP(7,7,(W_)&stg_ap_ppppppp_info);
	    }
	case PAP:
	    arity = ((StgPAP *)R1.p)->arity;
	    ASSERT(arity > 0);
	    if (arity == 1) {
		Sp[0] = Sp[1];
		Sp[1] = (W_)&stg_ap_pppppp_info;
		Sp += 0;
		R2.w = (W_)&stg_ap_p_info;
		JMP_(stg_PAP_entry);
	    }
	    if (arity == 2) {
		Sp[0] = Sp[1];
		Sp[1] = Sp[2];
		Sp[2] = (W_)&stg_ap_ppppp_info;
		Sp += 0;
		R2.w = (W_)&stg_ap_pp_info;
		JMP_(stg_PAP_entry);
	    }
	    if (arity == 3) {
		Sp[0] = Sp[1];
		Sp[1] = Sp[2];
		Sp[2] = Sp[3];
		Sp[3] = (W_)&stg_ap_pppp_info;
		Sp += 0;
		R2.w = (W_)&stg_ap_ppp_info;
		JMP_(stg_PAP_entry);
	    }
	    if (arity == 4) {
		Sp[0] = Sp[1];
		Sp[1] = Sp[2];
		Sp[2] = Sp[3];
		Sp[3] = Sp[4];
		Sp[4] = (W_)&stg_ap_ppp_info;
		Sp += 0;
		R2.w = (W_)&stg_ap_pppp_info;
		JMP_(stg_PAP_entry);
	    }
	    if (arity == 5) {
		Sp[0] = Sp[1];
		Sp[1] = Sp[2];
		Sp[2] = Sp[3];
		Sp[3] = Sp[4];
		Sp[4] = Sp[5];
		Sp[5] = (W_)&stg_ap_pp_info;
		Sp += 0;
		R2.w = (W_)&stg_ap_ppppp_info;
		JMP_(stg_PAP_entry);
	    }
	    if (arity == 6) {
		Sp[0] = Sp[1];
		Sp[1] = Sp[2];
		Sp[2] = Sp[3];
		Sp[3] = Sp[4];
		Sp[4] = Sp[5];
		Sp[5] = Sp[6];
		Sp[6] = (W_)&stg_ap_p_info;
		Sp += 0;
		R2.w = (W_)&stg_ap_pppppp_info;
		JMP_(stg_PAP_entry);
	    }
	    if (arity == 7) {
		Sp += 1;
		R2.w = (W_)&stg_ap_ppppppp_info;
		JMP_(stg_PAP_entry);
	    } else {
		NEW_PAP(7,7,(W_)&stg_ap_ppppppp_info);
	    }
	
	case AP:
	case AP_STACK:
	case CAF_BLACKHOLE:
	case BLACKHOLE:
	case BLACKHOLE_BQ:
	case SE_BLACKHOLE:
	case SE_CAF_BLACKHOLE:
	case THUNK:
	case THUNK_1_0:
	case THUNK_0_1:
	case THUNK_2_0:
	case THUNK_1_1:
	case THUNK_0_2:
	case THUNK_STATIC:
	case THUNK_SELECTOR:
	    Sp[0] = (W_)&stg_ap_ppppppp_info;
	    JMP_(GET_ENTRY(R1.cl));
	    
	case IND:
	case IND_OLDGEN:
	case IND_STATIC:
	case IND_PERM:
	case IND_OLDGEN_PERM:
	    R1.cl = ((StgInd *)R1.p)->indirectee;
	    goto again;
	
	default:
	    barf("stg_ap_ppppppp_ret");
	}
FE_
}
IF_(stg_ap_stk_n)
{   FB_
    Sp += 0;
    JMP_(GET_ENTRY(R1.cl));
    FE_
}
IF_(stg_stk_save_n)
{   FB_
    Sp -= 3;
    Sp[2] = R1.w;
    Sp[1] = 0;
    Sp[0] = (W_)&stg_gc_fun_info;
    JMP_(stg_gc_noregs);
    FE_
}

IF_(stg_ap_stk_p)
{   FB_
    Sp += 0;
    JMP_(GET_ENTRY(R1.cl));
    FE_
}
IF_(stg_stk_save_p)
{   FB_
    Sp -= 3;
    Sp[2] = R1.w;
    Sp[1] = 0;
    Sp[0] = (W_)&stg_gc_fun_info;
    JMP_(stg_gc_noregs);
    FE_
}

IF_(stg_ap_stk_f)
{   FB_
    Sp += 0;
    JMP_(GET_ENTRY(R1.cl));
    FE_
}
IF_(stg_stk_save_f)
{   FB_
    Sp -= 3;
    Sp[2] = R1.w;
    Sp[1] = 0;
    Sp[0] = (W_)&stg_gc_fun_info;
    JMP_(stg_gc_noregs);
    FE_
}

IF_(stg_ap_stk_d)
{   FB_
    Sp += 0;
    JMP_(GET_ENTRY(R1.cl));
    FE_
}
IF_(stg_stk_save_d)
{   FB_
    Sp -= 3;
    Sp[2] = R1.w;
    Sp[1] = 0;
    Sp[0] = (W_)&stg_gc_fun_info;
    JMP_(stg_gc_noregs);
    FE_
}

IF_(stg_ap_stk_l)
{   FB_
    Sp += 0;
    JMP_(GET_ENTRY(R1.cl));
    FE_
}
IF_(stg_stk_save_l)
{   FB_
    Sp -= 3;
    Sp[2] = R1.w;
    Sp[1] = 0;
    Sp[0] = (W_)&stg_gc_fun_info;
    JMP_(stg_gc_noregs);
    FE_
}

IF_(stg_ap_stk_nn)
{   FB_
    Sp += 0;
    JMP_(GET_ENTRY(R1.cl));
    FE_
}
IF_(stg_stk_save_nn)
{   FB_
    Sp -= 3;
    Sp[2] = R1.w;
    Sp[1] = 0;
    Sp[0] = (W_)&stg_gc_fun_info;
    JMP_(stg_gc_noregs);
    FE_
}

IF_(stg_ap_stk_np)
{   FB_
    Sp += 0;
    JMP_(GET_ENTRY(R1.cl));
    FE_
}
IF_(stg_stk_save_np)
{   FB_
    Sp -= 3;
    Sp[2] = R1.w;
    Sp[1] = 0;
    Sp[0] = (W_)&stg_gc_fun_info;
    JMP_(stg_gc_noregs);
    FE_
}

IF_(stg_ap_stk_pn)
{   FB_
    Sp += 0;
    JMP_(GET_ENTRY(R1.cl));
    FE_
}
IF_(stg_stk_save_pn)
{   FB_
    Sp -= 3;
    Sp[2] = R1.w;
    Sp[1] = 0;
    Sp[0] = (W_)&stg_gc_fun_info;
    JMP_(stg_gc_noregs);
    FE_
}

IF_(stg_ap_stk_pp)
{   FB_
    Sp += 0;
    JMP_(GET_ENTRY(R1.cl));
    FE_
}
IF_(stg_stk_save_pp)
{   FB_
    Sp -= 3;
    Sp[2] = R1.w;
    Sp[1] = 0;
    Sp[0] = (W_)&stg_gc_fun_info;
    JMP_(stg_gc_noregs);
    FE_
}

IF_(stg_ap_stk_nnn)
{   FB_
    Sp += 0;
    JMP_(GET_ENTRY(R1.cl));
    FE_
}
IF_(stg_stk_save_nnn)
{   FB_
    Sp -= 3;
    Sp[2] = R1.w;
    Sp[1] = 0;
    Sp[0] = (W_)&stg_gc_fun_info;
    JMP_(stg_gc_noregs);
    FE_
}

IF_(stg_ap_stk_nnp)
{   FB_
    Sp += 0;
    JMP_(GET_ENTRY(R1.cl));
    FE_
}
IF_(stg_stk_save_nnp)
{   FB_
    Sp -= 3;
    Sp[2] = R1.w;
    Sp[1] = 0;
    Sp[0] = (W_)&stg_gc_fun_info;
    JMP_(stg_gc_noregs);
    FE_
}

IF_(stg_ap_stk_npn)
{   FB_
    Sp += 0;
    JMP_(GET_ENTRY(R1.cl));
    FE_
}
IF_(stg_stk_save_npn)
{   FB_
    Sp -= 3;
    Sp[2] = R1.w;
    Sp[1] = 0;
    Sp[0] = (W_)&stg_gc_fun_info;
    JMP_(stg_gc_noregs);
    FE_
}

IF_(stg_ap_stk_npp)
{   FB_
    Sp += 0;
    JMP_(GET_ENTRY(R1.cl));
    FE_
}
IF_(stg_stk_save_npp)
{   FB_
    Sp -= 3;
    Sp[2] = R1.w;
    Sp[1] = 0;
    Sp[0] = (W_)&stg_gc_fun_info;
    JMP_(stg_gc_noregs);
    FE_
}

IF_(stg_ap_stk_pnn)
{   FB_
    Sp += 0;
    JMP_(GET_ENTRY(R1.cl));
    FE_
}
IF_(stg_stk_save_pnn)
{   FB_
    Sp -= 3;
    Sp[2] = R1.w;
    Sp[1] = 0;
    Sp[0] = (W_)&stg_gc_fun_info;
    JMP_(stg_gc_noregs);
    FE_
}

IF_(stg_ap_stk_pnp)
{   FB_
    Sp += 0;
    JMP_(GET_ENTRY(R1.cl));
    FE_
}
IF_(stg_stk_save_pnp)
{   FB_
    Sp -= 3;
    Sp[2] = R1.w;
    Sp[1] = 0;
    Sp[0] = (W_)&stg_gc_fun_info;
    JMP_(stg_gc_noregs);
    FE_
}

IF_(stg_ap_stk_ppn)
{   FB_
    Sp += 0;
    JMP_(GET_ENTRY(R1.cl));
    FE_
}
IF_(stg_stk_save_ppn)
{   FB_
    Sp -= 3;
    Sp[2] = R1.w;
    Sp[1] = 0;
    Sp[0] = (W_)&stg_gc_fun_info;
    JMP_(stg_gc_noregs);
    FE_
}

IF_(stg_ap_stk_ppp)
{   FB_
    Sp += 0;
    JMP_(GET_ENTRY(R1.cl));
    FE_
}
IF_(stg_stk_save_ppp)
{   FB_
    Sp -= 3;
    Sp[2] = R1.w;
    Sp[1] = 0;
    Sp[0] = (W_)&stg_gc_fun_info;
    JMP_(stg_gc_noregs);
    FE_
}

IF_(stg_ap_stk_pppp)
{   FB_
    Sp += 0;
    JMP_(GET_ENTRY(R1.cl));
    FE_
}
IF_(stg_stk_save_pppp)
{   FB_
    Sp -= 3;
    Sp[2] = R1.w;
    Sp[1] = 0;
    Sp[0] = (W_)&stg_gc_fun_info;
    JMP_(stg_gc_noregs);
    FE_
}

IF_(stg_ap_stk_ppppp)
{   FB_
    Sp += 0;
    JMP_(GET_ENTRY(R1.cl));
    FE_
}
IF_(stg_stk_save_ppppp)
{   FB_
    Sp -= 3;
    Sp[2] = R1.w;
    Sp[1] = 0;
    Sp[0] = (W_)&stg_gc_fun_info;
    JMP_(stg_gc_noregs);
    FE_
}

IF_(stg_ap_stk_pppppp)
{   FB_
    Sp += 0;
    JMP_(GET_ENTRY(R1.cl));
    FE_
}
IF_(stg_stk_save_pppppp)
{   FB_
    Sp -= 3;
    Sp[2] = R1.w;
    Sp[1] = 0;
    Sp[0] = (W_)&stg_gc_fun_info;
    JMP_(stg_gc_noregs);
    FE_
}

IF_(stg_ap_stk_ppppppp)
{   FB_
    Sp += 0;
    JMP_(GET_ENTRY(R1.cl));
    FE_
}
IF_(stg_stk_save_ppppppp)
{   FB_
    Sp -= 3;
    Sp[2] = R1.w;
    Sp[1] = 0;
    Sp[0] = (W_)&stg_gc_fun_info;
    JMP_(stg_gc_noregs);
    FE_
}

IF_(stg_ap_stk_pppppppp)
{   FB_
    Sp += 0;
    JMP_(GET_ENTRY(R1.cl));
    FE_
}
IF_(stg_stk_save_pppppppp)
{   FB_
    Sp -= 3;
    Sp[2] = R1.w;
    Sp[1] = 0;
    Sp[0] = (W_)&stg_gc_fun_info;
    JMP_(stg_gc_noregs);
    FE_
}
StgFun *stg_ap_stack_entries[] = {
[ARG_N] stg_ap_stk_n,
[ARG_P] stg_ap_stk_p,
[ARG_F] stg_ap_stk_f,
[ARG_D] stg_ap_stk_d,
[ARG_L] stg_ap_stk_l,
[ARG_NN] stg_ap_stk_nn,
[ARG_NP] stg_ap_stk_np,
[ARG_PN] stg_ap_stk_pn,
[ARG_PP] stg_ap_stk_pp,
[ARG_NNN] stg_ap_stk_nnn,
[ARG_NNP] stg_ap_stk_nnp,
[ARG_NPN] stg_ap_stk_npn,
[ARG_NPP] stg_ap_stk_npp,
[ARG_PNN] stg_ap_stk_pnn,
[ARG_PNP] stg_ap_stk_pnp,
[ARG_PPN] stg_ap_stk_ppn,
[ARG_PPP] stg_ap_stk_ppp,
[ARG_PPPP] stg_ap_stk_pppp,
[ARG_PPPPP] stg_ap_stk_ppppp,
[ARG_PPPPPP] stg_ap_stk_pppppp,
[ARG_PPPPPPP] stg_ap_stk_ppppppp,
[ARG_PPPPPPPP] stg_ap_stk_pppppppp,
};
StgFun *stg_stack_save_entries[] = {
[ARG_N] stg_stk_save_n,
[ARG_P] stg_stk_save_p,
[ARG_F] stg_stk_save_f,
[ARG_D] stg_stk_save_d,
[ARG_L] stg_stk_save_l,
[ARG_NN] stg_stk_save_nn,
[ARG_NP] stg_stk_save_np,
[ARG_PN] stg_stk_save_pn,
[ARG_PP] stg_stk_save_pp,
[ARG_NNN] stg_stk_save_nnn,
[ARG_NNP] stg_stk_save_nnp,
[ARG_NPN] stg_stk_save_npn,
[ARG_NPP] stg_stk_save_npp,
[ARG_PNN] stg_stk_save_pnn,
[ARG_PNP] stg_stk_save_pnp,
[ARG_PPN] stg_stk_save_ppn,
[ARG_PPP] stg_stk_save_ppp,
[ARG_PPPP] stg_stk_save_pppp,
[ARG_PPPPP] stg_stk_save_ppppp,
[ARG_PPPPPP] stg_stk_save_pppppp,
[ARG_PPPPPPP] stg_stk_save_ppppppp,
[ARG_PPPPPPPP] stg_stk_save_pppppppp,
};
StgWord stg_arg_bitmaps[] = {
[ARG_N] MK_SMALL_BITMAP(1,1),
[ARG_P] MK_SMALL_BITMAP(1,0),
[ARG_F] MK_SMALL_BITMAP(1,1),
[ARG_D] MK_SMALL_BITMAP(2,3),
[ARG_L] MK_SMALL_BITMAP(2,3),
[ARG_NN] MK_SMALL_BITMAP(2,3),
[ARG_NP] MK_SMALL_BITMAP(2,1),
[ARG_PN] MK_SMALL_BITMAP(2,2),
[ARG_PP] MK_SMALL_BITMAP(2,0),
[ARG_NNN] MK_SMALL_BITMAP(3,7),
[ARG_NNP] MK_SMALL_BITMAP(3,3),
[ARG_NPN] MK_SMALL_BITMAP(3,5),
[ARG_NPP] MK_SMALL_BITMAP(3,1),
[ARG_PNN] MK_SMALL_BITMAP(3,6),
[ARG_PNP] MK_SMALL_BITMAP(3,2),
[ARG_PPN] MK_SMALL_BITMAP(3,4),
[ARG_PPP] MK_SMALL_BITMAP(3,0),
[ARG_PPPP] MK_SMALL_BITMAP(4,0),
[ARG_PPPPP] MK_SMALL_BITMAP(5,0),
[ARG_PPPPPP] MK_SMALL_BITMAP(6,0),
[ARG_PPPPPPP] MK_SMALL_BITMAP(7,0),
[ARG_PPPPPPPP] MK_SMALL_BITMAP(8,0),
};
