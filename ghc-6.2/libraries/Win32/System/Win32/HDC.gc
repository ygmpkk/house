-----------------------------------------------------------------------------
-- |
-- Module      :  System.Win32.HDC
-- Copyright   :  (c) Alastair Reid, 1997-2003
-- License     :  BSD-style (see the file libraries/base/LICENSE)
-- 
-- Maintainer  :  libraries@haskell.org
-- Stability   :  provisional
-- Portability :  portable
--
-- A collection of GreenCard declarations for interfacing with Win32.
--
-----------------------------------------------------------------------------

module System.Win32.HDC
	( module System.Win32.HDC
	) where

import System.Win32.Types
import Foreign.GreenCard
import System.Win32.GDITypes

%#include <windows.h>
%#include "errors.h"
%#include "win32debug.h"
%#include "finalizers.h"

---------------- Macros to set/get fields of HDC ----------------









----------------------------------------------------------------

%fun  SetArcDirection    :: HDC ->  ArcDirection  -> IO  ArcDirection  
%fail {res1== 0 } { ErrorString("SetArcDirection") } 
%fun  GetArcDirection    :: HDC -> IO  ArcDirection  
%fail {res1== 0 } { ErrorString("GetArcDirection") } 
       
%fun  SetPolyFillMode    :: HDC ->  PolyFillMode  -> IO  PolyFillMode  
%fail {res1== 0 } { ErrorString("SetPolyFillMode") } 
%fun  GetPolyFillMode    :: HDC -> IO  PolyFillMode  
%fail {res1== 0 } { ErrorString("GetPolyFillMode") } 
       
%fun  SetGraphicsMode    :: HDC ->  GraphicsMode  -> IO  GraphicsMode  
%fail {res1== 0 } { ErrorString("SetGraphicsMode") } 
%fun  GetGraphicsMode    :: HDC -> IO  GraphicsMode  
%fail {res1== 0 } { ErrorString("GetGraphicsMode") } 
       
%fun  SetStretchBltMode    :: HDC ->  StretchBltMode  -> IO  StretchBltMode  
%fail {res1== 0 } { ErrorString("SetStretchBltMode") } 
%fun  GetStretchBltMode    :: HDC -> IO  StretchBltMode  
%fail {res1== 0 } { ErrorString("GetStretchBltMode") } 
       
%fun  SetBkColor    :: HDC ->  COLORREF  -> IO  COLORREF  
%fail {res1== 0 } { ErrorString("SetBkColor") } 
%fun  GetBkColor    :: HDC -> IO  COLORREF  
%fail {res1== 0 } { ErrorString("GetBkColor") } 

%fun  SetTextColor    :: HDC ->  COLORREF  -> IO  COLORREF  
%fail {res1== CLR_INVALID } { ErrorString("SetTextColor") } 
%fun  GetTextColor    :: HDC -> IO  COLORREF  
%fail {res1== CLR_INVALID } { ErrorString("GetTextColor") } 
       
%fun  SetBkMode    :: HDC ->  BackgroundMode  -> IO  BackgroundMode  
%fail {res1== 0 } { ErrorString("SetBkMode") } 
%fun  GetBkMode    :: HDC -> IO  BackgroundMode  
%fail {res1== 0 } { ErrorString("GetBkMode") } 

%fun setBrushOrgEx :: HDC -> Int -> Int -> IO POINT
%code POINT res1;
%     BOOL success = SetBrushOrgEx(arg1,arg2,arg3,&res1);
%fail {!success} { ErrorString("SetBrushOrgEx") }
%result (point {res1})

%fun getBrushOrgEx :: HDC -> IO POINT
%code POINT res1;
%     BOOL success = GetBrushOrgEx(arg1,&res1);
%fail {!success} { ErrorString("GetBrushOrgEx") }
%result (point {res1})

%fun SetTextAlign    :: HDC ->  TextAlignment  -> IO  TextAlignment  
%fail {res1== GDI_ERROR } { ErrorWin("Set" "TextAlign") } 
%fun GetTextAlign    :: HDC -> IO  TextAlignment  
%fail {res1== GDI_ERROR } { ErrorWin("Get" "TextAlign") } 

%fun  SetTextCharacterExtra    :: HDC ->  Int  -> IO  Int  
%fail {res1== 0x80000000 } { ErrorString("SetTextCharacterExtra") } 
%fun  GetTextCharacterExtra    :: HDC -> IO  Int  
%fail {res1== 0x80000000 } { ErrorString("GetTextCharacterExtra") } 

%fun getMiterLimit :: HDC -> IO Float
%code BOOL success = GetMiterLimit(arg1,&res1);
%fail {!success} { ErrorString("GetMiterLimit") }

%fun setMiterLimit :: HDC -> Float -> IO Float
%code BOOL success = SetMiterLimit(arg1,arg2,&res1);
%fail {!success} { ErrorString("SetMiterLimit") }

----------------------------------------------------------------

%fun SaveDC :: HDC -> IO Int
%fail {res1==0} { ErrorString("SaveDC") }

%fun RestoreDC :: HDC -> Int -> IO ()
%code BOOL success = RestoreDC(arg1,arg2);
%fail {!success} { ErrorString("RestoreDC") }

----------------------------------------------------------------
-- Macros for getting/selecting objects in HDCs
----------------------------------------------------------------





----------------------------------------------------------------

%fun  GetCurrentBitmap  :: HDC -> IO  HBITMAP  
%code res1 = ( HBITMAP ) GetCurrentObject(arg1,  OBJ_BITMAP ) 
%fail {res1==NULL} { ErrorString("GetCurrentBitmap") } 
%fun  GetCurrentBrush  :: HDC -> IO   HBRUSH  
%code res1 = (  HBRUSH ) GetCurrentObject(arg1,   OBJ_BRUSH ) 
%fail {res1==NULL} { ErrorString("GetCurrentBrush") } 
%fun  GetCurrentFont  :: HDC -> IO    HFONT  
%code res1 = (   HFONT ) GetCurrentObject(arg1,    OBJ_FONT ) 
%fail {res1==NULL} { ErrorString("GetCurrentFont") } 
%fun  GetCurrentPalette  :: HDC -> IO     HPALETTE  
%code res1 = (    HPALETTE ) GetCurrentObject(arg1, OBJ_PAL ) 
%fail {res1==NULL} { ErrorString("GetCurrentPalette") } 
%fun  GetCurrentPen  :: HDC -> IO     HPEN  
%code res1 = (    HPEN ) GetCurrentObject(arg1,     OBJ_PEN ) 
%fail {res1==NULL} { ErrorString("GetCurrentPen") } 

%fun  SelectBitmap  :: HDC ->   HBITMAP  -> IO   HBITMAP  
%code res1 = (  HBITMAP ) SelectObject(arg1,arg2) 
%fail {res1==NULL} { ErrorString("SelectBitmap") } 
%fun  SelectBrush  :: HDC ->    HBRUSH  -> IO    HBRUSH  
%code res1 = (   HBRUSH ) SelectObject(arg1,arg2) 
%fail {res1==NULL} { ErrorString("SelectBrush") } 
%fun  SelectFont  :: HDC ->     HFONT  -> IO     HFONT  
%code res1 = (    HFONT ) SelectObject(arg1,arg2) 
%fail {res1==NULL} { ErrorString("SelectFont") } 
%fun  SelectPen  :: HDC ->      HPEN  -> IO      HPEN  
%code res1 = (     HPEN ) SelectObject(arg1,arg2) 
%fail {res1==NULL} { ErrorString("SelectPen") } 

----------------------------------------------------------------
--
----------------------------------------------------------------

%fun SelectPalette    :: HDC -> HPALETTE -> Bool -> IO HPALETTE
%fail {res1 == NULL} {ErrorWin("SelectPalette")}

%fun SelectRgn :: HDC -> HRGN -> IO RegionType
%code res1 = (int)SelectObject(arg1,arg2)
%fail {res1==GDI_ERROR} { ErrorString("SelectRgn") }

%fun SelectClipRgn :: HDC -> MbHRGN -> IO RegionType
%fail {res1==ERROR} { ErrorString("SelectClipRgn") }

%fun ExtSelectClipRgn :: HDC -> MbHRGN -> ClippingMode -> IO RegionType
%fail {res1==ERROR} { ErrorString("ExtSelectClipRgn") }

%fun SelectClipPath   :: HDC -> ClippingMode -> IO RegionType
%fail {res1==0} { ErrorWin("SelectClipPath") }

----------------------------------------------------------------
-- Misc
----------------------------------------------------------------

%fun CancelDC :: HDC -> IO ()
%code BOOL success = CancelDC(arg1)
%fail {!success} {"CancelDC"}

%fun CreateCompatibleDC :: MbHDC -> IO HDC
%fail {res1==NULL} {"CreateCompatibleDC"}

%fun DeleteDC :: HDC -> IO ()
%code BOOL success = DeleteDC(arg1)
%fail {!success} {"DeleteDC"}

----------------------------------------------------------------
-- End
----------------------------------------------------------------
