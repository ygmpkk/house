-----------------------------------------------------------------------------
-- |
-- Module      :  System.Win32.Misc
-- Copyright   :  (c) Alastair Reid, 1997-2003
-- License     :  BSD-style (see the file libraries/base/LICENSE)
-- 
-- Maintainer  :  libraries@haskell.org
-- Stability   :  provisional
-- Portability :  portable
--
-- A collection of GreenCard declarations for interfacing with Win32.
--
-----------------------------------------------------------------------------

module System.Win32.Misc where

import Foreign.GreenCard
import System.Win32.GDITypes
import System.Win32.Types

%#include <windows.h>
%#include "errors.h"
%#include "win32debug.h"
%#include "finalizers.h"
%#include "gettime.h"

----------------------------------------------------------------
-- Resources 
-- (should probably be distributed between 
--  Win32{Icon,Cursor,Accelerator,Menu,...}.gc)
----------------------------------------------------------------

%dis accelerator x = lPCSTR x
type Accelerator = LPCSTR
-- intToAccelerator :: Int -> Accelerator
-- intToAccelerator i = makeIntResource (toWord i)

-- cursor and icon should not be const pointer; GSL ???
%dis cursor x = lPSTR x
type Cursor = LPSTR
-- intToCursor :: Int -> Cursor
-- intToCursor i = makeIntResource (toWord i)

%dis icon x = lPSTR x
type Icon = LPSTR
-- intToIcon :: Int -> Icon
-- intToIcon i = makeIntResource (toWord i)

%fun LoadAccelerators :: MbHINSTANCE -> Accelerator -> IO HACCEL
%fail { res1 == 0 } { ErrorString("LoadAccelerators") }

%fun LoadCursor       :: MbHINSTANCE -> Cursor -> IO HCURSOR
%fail { res1 == 0 } { ErrorString("LoadCursor") }

%fun LoadIcon         :: MbHINSTANCE -> Icon -> IO HICON
%fail { res1 == 0 } { ErrorString("LoadIcon") }

%const Cursor 
% [ IDC_ARROW		= { MAKEINTRESOURCE(IDC_ARROW) }
% , IDC_IBEAM		= { MAKEINTRESOURCE(IDC_IBEAM) }
% , IDC_WAIT		= { MAKEINTRESOURCE(IDC_WAIT) }
% , IDC_CROSS		= { MAKEINTRESOURCE(IDC_CROSS) }
% , IDC_UPARROW		= { MAKEINTRESOURCE(IDC_UPARROW) }
% , IDC_SIZENWSE	= { MAKEINTRESOURCE(IDC_SIZENWSE) }
% , IDC_SIZENESW	= { MAKEINTRESOURCE(IDC_SIZENESW) }
% , IDC_SIZEWE		= { MAKEINTRESOURCE(IDC_SIZEWE) }
% , IDC_SIZENS		= { MAKEINTRESOURCE(IDC_SIZENS) }
% ]

%const Icon 
% [ IDI_APPLICATION	= { MAKEINTRESOURCE(IDI_APPLICATION) }
% , IDI_HAND		= { MAKEINTRESOURCE(IDI_HAND) }
% , IDI_QUESTION	= { MAKEINTRESOURCE(IDI_QUESTION) }
% , IDI_EXCLAMATION	= { MAKEINTRESOURCE(IDI_EXCLAMATION) }
% , IDI_ASTERISK	= { MAKEINTRESOURCE(IDI_ASTERISK) }
% ]

----------------------------------------------------------------
-- Message Boxes
----------------------------------------------------------------

%dis mBStyle x = uINT x
type MBStyle = UINT

%const MBStyle 
% [ MB_OK
% , MB_OKCANCEL
% , MB_ABORTRETRYIGNORE
% , MB_YESNOCANCEL
% , MB_YESNO
% , MB_RETRYCANCEL
% , MB_ICONHAND
% , MB_ICONQUESTION
% , MB_ICONEXCLAMATION
% , MB_ICONASTERISK
% , MB_ICONINFORMATION
% , MB_ICONSTOP
% , MB_DEFBUTTON1
% , MB_DEFBUTTON2
% , MB_DEFBUTTON3
% , MB_APPLMODAL
% , MB_SYSTEMMODAL
% , MB_TASKMODAL
% , MB_SETFOREGROUND
% ]

%dis mBStatus x = uINT x
type MBStatus = UINT

%const MBStatus 
% [ IDABORT
% , IDCANCEL
% , IDIGNORE
% , IDNO
% , IDOK
% , IDRETRY
% , IDYES
% ]

-- Note: if the error is ever raised, we're in a very sad way!
%fun MessageBox :: HWND -> String -> String -> MBStyle -> IO MBStatus
%fail { res1 == 0 } { ErrorString("MessageBox") }

----------------------------------------------------------------
--
----------------------------------------------------------------

-- %fun GetModuleHandle :: MbString -> IO HMODULE
-- %fail { res1 == 0 } { ErrorWin("GetModuleHandle") }

%dis stdHandleId x = dWORD x
type StdHandleId   = DWORD

%const StdHandleId
% [ STD_INPUT_HANDLE
% , STD_OUTPUT_HANDLE
% , STD_ERROR_HANDLE
% ]

%fun GetStdHandle :: StdHandleId -> IO HANDLE
%fail { res1 == INVALID_HANDLE_VALUE } { ErrorWin("GetStdHandle") }

----------------------------------------------------------------
-- Rotatable Ellipse hack
--
-- Win95 (Win32?) doesn't support rotating ellipses - so we 
-- implement them with polygons.
--
-- We use a fixed number of edges rather than varying the number 
-- according to the radius of the ellipse.  
-- If anyone feels like improving the code (to vary the number),
-- they should place a fixed upper bound on the number of edges
-- since it takes a relatively long time to draw 1000 edges.
----------------------------------------------------------------

%#include <math.h>

-- \hash define SIN_Cache_Size 20

%fun transformedEllipse :: HDC -> POINT -> POINT -> POINT -> IO ()
%call (hDC hdc) 
%     (declare {POINT} p0 in (lONG {p0.x}, lONG {p0.y}))
%     (declare {POINT} p1 in (lONG {p1.x}, lONG {p1.y}))
%     (declare {POINT} p2 in (lONG {p2.x}, lONG {p2.y}))
%code
%  static BOOL firstTime = 1;
%  static double sins[20]; 
%  static double coss[20];
%
%  int   i;
%  POINT pts[20];
%
%  double x = (p1.x + p2.x) / 2;  /* centre of parallelogram */
%  double y = (p1.y + p2.y) / 2;
%
%  double dx1 = (p1.x - p0.x) / 2; /* distance to corners from centre */
%  double dy1 = (p1.y - p0.y) / 2;
%  double dx2 = (p2.x - p0.x) / 2;
%  double dy2 = (p2.y - p0.y) / 2;
%
%  BOOL  errcode;
%
%  if (firstTime) {
%    double a  = 0.0;
%    double da = 2.0*3.14159 / 20;
%    for (i=0; i < 20; ++i, a+=da) {
%	sins[i] = sin(a);
%	coss[i] = cos(a);
%    }
%    firstTime = 0;
%  }
%  for(i=0; i < 20; ++i) {
%    double c = coss[i];
%    double s = sins[i];
%    pts[i].x = x + c*dx1 + s*dx2;
%    pts[i].y = y + c*dy1 + s*dy2;
%  }
%  errcode = Polygon(hdc,pts,20);
%fail {!errcode} { ErrorString("TransformedEllipse") }


----------------------------------------------------------------
-- Cursor
----------------------------------------------------------------

-- %fun getCursorPos :: IO POINT
-- %code BOOL success = GetCursorPos(p);
-- %fail { !success } { ErrorString/Win("GetCursorPos") }
-- %result (point p)
-- 
-- %fun SetCursorPos :: POINT -> IO ()
-- %code BOOL success = SetCursorPos(arg1->x,arg1->y);
-- %fail { !success } { ErrorString/Win("SetCursorPos") }
--
-- %fun ClipCursor :: RECT -> IO ()
-- %call (declare {RECT} arg1 in (rect {arg1}))
-- %code BOOL success = ClipCursor(&arg1);
-- %fail { !success } { ErrorString/Win("ClipCursor") }
--
-- %fun getClipCursor :: IO RECT
-- %code BOOL success = GetClipCursor(&res1) } )
-- %fail { !success } { ErrorString/Win("GetClipCursor") }
-- %result (declare {RECT} res1 in (rect {res1}))

----------------------------------------------------------------
-- Exit/shutdown
----------------------------------------------------------------

%dis exitOption x = uINT x
type ExitOption = UINT

%const ExitOption 
% [ EWX_FORCE
% , EWX_LOGOFF
% , EWX_POWEROFF
% , EWX_REBOOT
% , EWX_SHUTDOWN
% ]

-- %fun exitWindowsEx :: ExitOption -> IO ()
-- %code ExitWindowEx(arg1,0);
-- %fail { !success } { ErrorWin("ExitWindowsEx") }
--
-- %fun exitWindows :: IO ()
-- %code ExitWindows(0,0)
-- %fail { !success } { ErrorWin("ExitWindows") }

----------------------------------------------------------------
-- Beeping
----------------------------------------------------------------

type MbBeep = Maybe UINT
%dis mbBeep x = maybeT {0xFFFFFFFF} (uINT x)

type Duration   = Int
%dis duration x = int x

type MbDuration   = Maybe Duration
%dis mbDuration x = maybeT {-1} (duration x)

%fun MessageBeep :: MbBeep -> IO ()

%fun Beep :: WORD -> MbDuration -> IO ()
%code BOOL success = Beep(arg1, arg2);
%fail { !success } { ErrorWin("Beep") }

----------------------------------------------------------------
-- Timers
----------------------------------------------------------------

%dis timerId x = uINT x
type TimerId   = UINT

-- ToDo: support the other two forms of timer initialisation

-- Cause WM_TIMER events to be sent to window callback
%fun setWinTimer :: HWND -> TimerId -> UINT -> IO TimerId
%code res1 = SetTimer(arg1, arg2, arg3, NULL);
%fail {res1 == 0} { ErrorString("setWinTimer") }

%fun KillTimer :: MbHWND -> TimerId -> IO ()
%code BOOL success = KillTimer(arg1,arg2)
%fail {!success} { ErrorWin("KillTimer") }

-- For documentation purposes:
type MilliSeconds = DWORD
%dis milliSeconds x = dWORD x

%fun timeGetTime :: IO MilliSeconds

----------------------------------------------------------------

-- %fun ezCreateFont :: Unknown
-- %result BITMAP({ getBitmapInfo(x) })

----------------------------------------------------------------
-- End
----------------------------------------------------------------
