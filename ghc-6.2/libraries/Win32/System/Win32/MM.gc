-----------------------------------------------------------------------------
-- |
-- Module      :  System.Win32.MM
-- Copyright   :  (c) Alastair Reid, 1997-2003
-- License     :  BSD-style (see the file libraries/base/LICENSE)
-- 
-- Maintainer  :  libraries@haskell.org
-- Stability   :  provisional
-- Portability :  portable
--
-- A collection of GreenCard declarations for interfacing with Win32.
--
-----------------------------------------------------------------------------

module System.Win32.MM where

import Foreign.GreenCard
import System.Win32.Types
import System.Win32.GDITypes

%#include <windows.h>
%#include "errors.h"
%#include "win32debug.h"
%#include "finalizers.h"

%fun CopyMemory :: Addr -> Addr -> DWORD -> IO ()

%fun FillMemory :: Addr -> DWORD -> BYTE -> IO ()

%fun GetProcessHeap :: IO HANDLE

%fun GetProcessHeaps :: DWORD -> Addr -> IO DWORD

type   HGLOBAL   = Addr
%dis   hGLOBAL x = ptr ({HGLOBAL} x)

type GlobalAllocFlags = UINT
%dis globalAllocFlags x = uINT x


%const GlobalAllocFlags
% [ GMEM_FIXED
% , GMEM_MOVEABLE
% , GPTR
% , GHND
% , GMEM_DDESHARE
% , GMEM_SHARE
% , GMEM_LOWER
% , GMEM_NOCOMPACT
% , GMEM_NODISCARD
% , GMEM_NOT_BANKED
% , GMEM_NOTIFY
% , GMEM_ZEROINIT
% ]


%fun GlobalAlloc :: GlobalAllocFlags -> DWORD -> IO HGLOBAL
%fail {res1==NULL}{ErrorWin("GlobalAlloc")}

-- %fun GlobalDiscard :: HGLOBAL -> IO HGLOBAL
-- %fail {res1==NULL}{ErrorWin("GlobalDiscard")}

%fun GlobalFlags :: HGLOBAL -> IO GlobalAllocFlags
%fail {res1==GMEM_INVALID_HANDLE}{ErrorWin("GlobalFlags")}

%fun GlobalFree :: HGLOBAL -> IO HGLOBAL
%fail {res1==NULL}{ErrorWin("GlobalFree")}

%fun GlobalHandle :: Addr -> IO HGLOBAL
%fail {res1==NULL}{ErrorWin("GlobalHandle")}

%fun GlobalLock :: HGLOBAL -> IO Addr
%fail {res1==NULL}{ErrorWin("GlobalLock")}

-- %fun GlobalMemoryStatus :: IO MEMORYSTATUS

%fun GlobalReAlloc :: HGLOBAL -> DWORD -> GlobalAllocFlags -> IO HGLOBAL
%fail {res1==NULL}{ErrorWin("GlobalReAlloc")}

%fun GlobalSize :: HGLOBAL -> IO DWORD
%fail {res1==0}{ErrorWin("GlobalSize")}

%fun GlobalUnlock :: HGLOBAL -> IO ()
%code BOOL res=GlobalSize(arg1);
%fail {res==0}{ErrorWin("GlobalUnlock")}

type HeapAllocFlags = DWORD
%dis heapAllocFlags x = dWORD x

%const HeapAllocFlags
% [ HEAP_GENERATE_EXCEPTIONS
% , HEAP_NO_SERIALIZE
% , HEAP_ZERO_MEMORY
% ]

%fun HeapAlloc :: HANDLE -> HeapAllocFlags -> DWORD -> IO Addr
%fail {res1==NULL}{ErrorWin("HeapAlloc")}

%fun HeapCompact :: HANDLE -> HeapAllocFlags -> IO UINT
%fail {res1==NULL}{ErrorWin("HeapCompact")}

%fun HeapCreate :: HeapAllocFlags -> DWORD -> DWORD -> IO HANDLE
%fail {res1==NULL}{ErrorWin("HeapCreate")}

%fun HeapDestroy :: HANDLE -> IO ()
%code BOOL res1=HeapDestroy(arg1);
%fail {res1==0}{ErrorWin("HeapDestroy")}

%fun HeapFree :: HANDLE -> HeapAllocFlags -> Addr -> IO ()
%code BOOL res1=HeapFree(arg1,arg2,arg3);
%fail {res1==0}{ErrorWin("HeapFree")}

%fun HeapLock :: HANDLE -> IO ()
%code BOOL res1=HeapLock(arg1);
%fail {res1==0}{ErrorWin("HeapLock")}

%fun HeapReAlloc :: HANDLE -> HeapAllocFlags -> Addr -> DWORD -> IO Addr
%fail {res1==NULL}{ErrorWin("HeapReAlloc")}

%fun HeapSize :: HANDLE -> HeapAllocFlags -> Addr -> IO DWORD
%fail {res1==NULL}{ErrorWin("HeapSize")}

%fun HeapUnlock :: HANDLE -> IO ()
%code BOOL res1=HeapUnlock(arg1);
%fail {res1==0}{ErrorWin("HeapUnlock")}

%fun HeapValidate :: HANDLE -> HeapAllocFlags -> Addr -> IO Bool

%fun MoveMemory :: Addr -> Addr -> DWORD -> IO ()

type VirtualAllocFlags = DWORD
%dis virtualAllocFlags x = dWORD x

%const VirtualAllocFlags
% [ MEM_COMMIT
% , MEM_RESERVE
% ]

-- % , MEM_TOP_DOWN (not in mingw-20001111 winnt.h)

type ProtectFlags = DWORD
%dis protectFlags x = dWORD x

%const ProtectFlags
% [ PAGE_READONLY
% , PAGE_READWRITE
% , PAGE_EXECUTE
% , PAGE_EXECUTE_READ
% , PAGE_EXECUTE_READWRITE
% , PAGE_GUARD
% , PAGE_NOACCESS
% , PAGE_NOCACHE
% ]

type FreeFlags = DWORD
%dis freeFlags x = dWORD x

%const FreeFlags
% [ MEM_DECOMMIT, MEM_RELEASE ]

%fun VirtualAlloc :: Addr -> DWORD -> VirtualAllocFlags -> ProtectFlags -> IO Addr
%fail {res1==NULL}{ErrorWin("VirtualAlloc")}


-- %fun VirtualAllocEx :: HANDLE -> Addr -> DWORD -> VirtualAllocFlags -> ProtectFlags ->IO Addr
-- %code extern LPVOID WINAPI VirtualAllocEx(HANDLE,LPVOID,DWORD,DWORD,DWORD);
-- %     LPVOID res1=VirtualAllocEx(arg1,arg2,arg3,arg4,arg5);
-- %fail {res1==NULL}{ErrorWin("VirtualAllocEx")}

%fun VirtualFree :: Addr -> DWORD -> FreeFlags -> IO ()
%code BOOL res1=VirtualFree(arg1,arg2,arg3);
%fail {res1=0}{ErrorWin("VirtualFree")}

-- %fun VirtualFreeEx :: HANDLE -> Addr -> DWORD -> FreeFlags -> IO ()
-- %code extern BOOL WINAPI VirtualFreeEx(HANDLE,LPVOID,DWORD,DWORD);
-- %     BOOL res1=VirtualFreeEx(arg1,arg2,arg3,arg4);
-- %fail {res1=0}{ErrorWin("VirtualFreeEx")}

%fun VirtualLock :: Addr -> DWORD -> IO ()
%code BOOL res1=VirtualLock(arg1,arg2);
%fail {res1=0}{ErrorWin("VirtualLock")}

%fun VirtualProtect :: Addr -> DWORD -> ProtectFlags -> IO ()
%code BOOL res1=VirtualLock(arg1,arg2);
%fail {res1=0}{ErrorWin("VirtualProtect")}

%fun VirtualProtectEx :: HANDLE -> Addr -> DWORD -> ProtectFlags -> Addr -> IO ()
%code BOOL res1=VirtualProtectEx(arg1,arg2,arg3,arg4,arg5);
%fail {res1=0}{ErrorWin("VirtualProtectEx")}

-- No VirtualQuery..()

%fun VirtualUnlock :: Addr -> DWORD -> IO ()
%code BOOL res1=VirtualUnlock(arg1,arg2);
%fail {res1=0}{ErrorWin("VirtualUnlock")}

%fun ZeroMemory :: Addr -> DWORD -> IO ()

