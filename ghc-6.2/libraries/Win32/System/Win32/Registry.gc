-- Stubs for Win32 API for accessing the registry.

module System.Win32.Registry 
		( module System.Win32.Registry
		, MbString
		) where
{- What's really on offer:
	(
	  regCloseKey        -- :: HKEY -> IO ()
	, regConnectRegistry -- :: MbString -> HKEY -> IO HKEY
	, regCreateKey       -- :: HKEY -> String -> IO HKEY
	, regCreateKeyEx     -- :: HKEY -> String -> String 
	                     -- -> RegCreateOptions -> REGSAM
			     -- -> MbLPSECURITY_ATTRIBUTES 
			     -- -> IO (HKEY, Bool)
        , regDeleteKey       -- :: HKEY -> String -> IO ()
	, regDeleteValue     -- :: HKEY -> String -> IO ()
	, regEnumKeys	     -- :: HKEY -> IO [String]
	, regEnumKey 	     -- :: HKEY -> DWORD -> Addr -> DWORD -> IO String
	, regEnumKeyValue    -- :: HKEY -> DWORD -> Addr -> DWORD -> Addr -> DWORD -> IO String
	, regFlushKey        -- :: HKEY -> IO ()
	, regLoadKey         -- :: HKEY -> String -> String -> IO ()
	, regNotifyChangeKeyValue -- :: HKEY -> Bool -> RegNotifyOptions 
				  -- -> HANDLE -> Bool -> IO ()
	, regOpenKey         -- :: HKEY -> String -> IO HKEY
	, regOpenKeyEx 	     -- :: HKEY -> String -> REGSAM -> IO HKEY
	, regQueryInfoKey    -- :: HKEY -> IO RegInfoKey
	, regQueryValue      -- :: HKEY -> MbString -> IO String
	, regQueryValueKey   -- :: HKEY -> MbString -> IO String
	, regQueryValueEx    -- :: HKEY -> String -> Addr -> Int -> IO RegValueType
	, regReplaceKey      -- :: HKEY -> String -> String -> String -> IO ()
	, regRestoreKey      -- :: HKEY -> String -> RegRestoreFlags -> IO ()
	, regSaveKey         -- :: HKEY -> String -> MbLPSECURITY_ATTRIBUTES -> IO ()
	, regSetValue        -- :: HKEY -> String -> String -> IO ()
	, regSetValueEx      -- :: HKEY -> String -> RegValueType -> Addr -> Int -> IO ()
	, regSetStringValue  -- :: HKEY -> String -> String -> IO ()
	, regUnloadKey       -- :: HKEY -> String -> IO ()
	) where
-}

{-
 Registry API omissions:

   RegQueryMultipleValues()
   RegEnumKeyEx()

-}

import Foreign.GreenCard
import System.Win32.Types
import System.Win32.File
import Foreign( mallocBytes, free )
import Foreign( castPtr )

%#include <windows.h>
%#include "errors.h"
%#include "win32debug.h"
%#include "finalizers.h"

%const HKEY
%   [ HKEY_CLASSES_ROOT
%   , HKEY_CURRENT_CONFIG
%   , HKEY_CURRENT_USER
%   , HKEY_LOCAL_MACHINE
%   , HKEY_USERS
% --  , HKEY_PERFORMANCE_DATA  NT only
% --  , HKEY_DYN_DATA       95/98 only
%   ]

%fun RegCloseKey :: HKEY -> IO ()
%code LONG r = RegCloseKey(arg1);
%fail {r != ERROR_SUCCESS} {ErrorWithCode("RegCloseKey",r)}

-- Connects to a predefined registry handle on another computer.
%fun RegConnectRegistry :: MbString -> HKEY -> IO HKEY
%code HKEY hk;
%     LONG r;
%     r = RegConnectRegistry((LPTSTR)arg1,
%                            (HKEY)arg2,
%                            &hk);
%fail { r != ERROR_SUCCESS} {ErrorWithCode("RegConnectRegistry",r)}
%result (hKEY {hk})

%fun RegCreateKey :: HKEY -> String -> IO HKEY
%code HKEY res;
%     LONG r;
%     r = RegCreateKey((HKEY)arg1,(LPCTSTR)arg2,&res);
%fail { r != ERROR_SUCCESS } {ErrorWithCode("RegCreateKey",r)}
%result (hKEY {res})

type RegCreateOptions = Int32

%const RegCreateOptions [REG_OPTION_NON_VOLATILE, REG_OPTION_VOLATILE]
%dis regCreateOptions x = (int32 x)

type REGSAM = Int32

%const REGSAM 
%  [KEY_ALL_ACCESS,
%   KEY_CREATE_LINK,
%   KEY_CREATE_SUB_KEY,
%   KEY_ENUMERATE_SUB_KEYS,
%   KEY_EXECUTE,
%   KEY_NOTIFY,
%   KEY_QUERY_VALUE,
%   KEY_READ,
%   KEY_SET_VALUE,
%   KEY_WRITE
%  ]

%dis rEGSAM x = (int32 x)

%fun RegCreateKeyEx :: HKEY -> String -> String -> RegCreateOptions -> REGSAM -> MbLPSECURITY_ATTRIBUTES -> IO (HKEY, Bool)
%code HKEY hkey;
%     DWORD disp;
%     LONG r;
%     r = RegCreateKeyEx((HKEY)arg1,(LPCTSTR)arg2,(DWORD)0,
%                        (LPTSTR)arg3,(DWORD)arg4,(REGSAM)arg5,
%                        (LPSECURITY_ATTRIBUTES)arg6,&hkey,&disp);
%fail {r != ERROR_SUCCESS} {ErrorWithCode("RegCreateKeyEx",r)}
%result (hKEY {hkey},bool {disp == REG_CREATED_NEW_KEY})

%fun RegDeleteKey :: HKEY -> String -> IO ()
%code LONG r;
%     r = RegDeleteKey((HKEY)arg1,(LPCTSTR)arg2);
%fail {r != ERROR_SUCCESS} {ErrorWithCode("RegDeleteKey",r)}

%fun RegDeleteValue :: HKEY -> String -> IO ()
%code LONG r;
%     r = RegDeleteValue((HKEY)arg1,(LPCTSTR)arg2);
%fail {r != ERROR_SUCCESS} {ErrorWithCode("RegDeleteValue",r)}

regEnumKeys :: HKEY -> IO [String]
regEnumKeys hkey = do
   hinfo <- regQueryInfoKey hkey
   let buflen = 1+max_subkey_len hinfo
   buf   <- mallocBytes (fromIntegral buflen)
   ls    <- go 0 buf buflen
   free buf
   return ls
 where
   go n buf buflen = do
      (v,flg)  <- regEnumKey hkey n buf buflen
      if flg /= 0
       then return []
       else do
         vs <- go (n+1) buf buflen
         return (v:vs)

regEnumKeyVals :: HKEY -> IO [(String,String,RegValueType)]
regEnumKeyVals hkey = do
   hinfo <- regQueryInfoKey hkey
   let nmlen  = 1+max_value_name_len hinfo  -- add spc for terminating NUL.
   let vallen = 1+max_value_len hinfo
   nmbuf  <- mallocBytes (fromIntegral nmlen)
   valbuf <- mallocBytes (fromIntegral vallen)
   ls     <- go 0 nmbuf nmlen valbuf vallen
   free nmbuf
   free valbuf
   return ls
 where
   go n nmbuf nmlen valbuf vallen = do
      (ty,nm,flg) <- regEnumValue hkey n nmbuf nmlen valbuf vallen
      if flg /= 0
       then return []
       else do

        val <- 
	   case ty of
	     x | x == rEG_SZ    -> unmarshall_string_ (castPtr valbuf)
	       | x == rEG_DWORD -> peekElemOff (castPtr valbuf) 0 >>= \ v -> return (show (v :: DWORD))
	       | otherwise      -> return "<<unknown>>"

        vs <- go (n+1) nmbuf nmlen valbuf vallen
        return ((nm,val,ty):vs)

-- It's up to the programmer to ensure that a large enough
-- buffer is passed in here.

%fun RegEnumKey :: HKEY -> DWORD -> LPTSTR -> DWORD -> IO (String, Int)
%code LONG res;
%     res = RegEnumKey(arg1,arg2,arg3,arg4);
%fail { res != ERROR_SUCCESS && res != ERROR_NO_MORE_ITEMS } { ErrorWithCode("RegEnumKey",res) }
%result (string {arg3}, int {res == ERROR_NO_MORE_ITEMS})

%fun RegEnumValue :: HKEY -> DWORD -> LPSTR -> DWORD -> LPBYTE -> DWORD -> IO (RegValueType, String, Int)
%code LONG res=0; DWORD regTy;
%     res = RegEnumValue(arg1,arg2,arg3,&arg4,NULL, &regTy, arg5, &arg6);
%fail { res != ERROR_SUCCESS && res != ERROR_NO_MORE_ITEMS } { ErrorWithCode("RegEnumValue",res) }
%result (regValueType {regTy}, string {arg3}, int {res == ERROR_NO_MORE_ITEMS})

%fun RegFlushKey :: HKEY -> IO ()
%code LONG r = RegFlushKey((HKEY)arg1);
%fail { r != ERROR_SUCCESS } { ErrorWithCode("RegFlushKey",r) }

-- ifdef FOR_WINDOWS_NT
-- %fun RegGetKeySecurity :: HKEY -> SECURITY_INFORMATION -> IO SECURITY_DESCRIPTION

-- endif

%dis fileName x = string x

%fun RegLoadKey :: HKEY -> String -> String -> IO ()
%code LONG r;
%     r = RegLoadKey((HKEY)arg1,(LPCTSTR)arg2,(LPCTSTR)arg3);
%fail { r != ERROR_SUCCESS } {ErrorWithCode("RegLoadKey",r)}

-- ifdef FOR_WINDOWS_NT

type RegNotifyOptions = Int32

%const RegNotifyOptions [REG_NOTIFY_CHANGE_NAME, REG_NOTIFY_CHANGE_ATTRIBUTES, REG_NOTIFY_CHANGE_LAST_SET, REG_NOTIFY_CHANGE_SECURITY]

%dis regNotifyOptions x = int32 x


%fun RegNotifyChangeKeyValue :: HKEY -> Bool -> RegNotifyOptions -> HANDLE -> Bool -> IO ()
%code LONG r;
%     r = RegNotifyChangeKeyValue((HKEY)arg1,  (BOOL)arg2,
%                                 (DWORD)arg3, (HANDLE)arg4,
%                                 (BOOL)arg5);
%fail { r != ERROR_SUCCESS } { ErrorWithCode("RegNotifyChangeKeyValue",r)}

-- endif

-- for Win 3.x compatibility, use RegOpenKeyEx instead.
%fun RegOpenKey :: HKEY -> String -> IO HKEY
%code HKEY ret;
%     LONG r;
%     r=RegOpenKey((HKEY)arg1,(LPCTSTR)arg2,&ret);
%fail { r != ERROR_SUCCESS } {ErrorWithCode("RegOpenKey",r)}
%result (hKEY {ret})

%fun RegOpenKeyEx :: HKEY -> String -> REGSAM -> IO HKEY
%code HKEY ret;
%     LONG r;
%     r=RegOpenKeyEx((HKEY)arg1,(LPCTSTR)arg2,(DWORD)0,
%                    (REGSAM)arg3,&ret);
%fail { r != ERROR_SUCCESS } { ErrorWithCode("RegOpenKeyEx",r)}
%result (hKEY {ret})

data RegInfoKey =
 RegInfoKey {
    class_string       :: String,
    class_id           :: Int,
    subkeys            :: Word32,
    max_subkey_len     :: Word32,
    max_class_len      :: Word32,
    values             :: Word32,
    max_value_name_len :: Word32,
    max_value_len      :: Word32,
    sec_len            :: Int,
    lastWrite_lo       :: Word32,
    lastWrite_hi       :: Word32
 }

%fun RegQueryInfoKey :: HKEY -> IO RegInfoKey
%code LONG r;
%     char* str;
%     DWORD cbClass;
%     DWORD cSubKeys;
%     DWORD cbMaxSubKeyLen;
%     DWORD cbMaxClassLen;
%     DWORD cValues;
%     DWORD cbMaxValueNameLen;
%     DWORD cbMaxValueLen;
%     DWORD cbSecurityDescriptor;
%     FILETIME ftLastWriteTime;
%
%     cbClass = 100;
%     str=(char*)malloc(sizeof(char)*cbClass);
%     
%     r=RegQueryInfoKey((HKEY)arg1, str, &cbClass, NULL,
%                       &cSubKeys, &cbMaxSubKeyLen, &cbMaxClassLen,
%			&cValues, &cbMaxValueNameLen, &cbMaxValueLen,
%                       &cbSecurityDescriptor, &ftLastWriteTime
%                      );
%fail { r != ERROR_SUCCESS } { ErrorWithCode("RegQueryInfoKey",r) }
%result (RegInfoKey (string str) (int cbClass) (dWORD cSubKeys)
%                   (dWORD cbMaxSubKeyLen) (dWORD cbMaxClassLen)
%                   (dWORD cValues) (dWORD cbMaxValueNameLen)
%                   (dWORD cbMaxValueLen) (int cbSecurityDescriptor)
%                   (dWORD {ftLastWriteTime.dwLowDateTime}) (dWORD {ftLastWriteTime.dwHighDateTime})
%       )

-- %fun RegQueryMultipleValues :: HKEY -> IO ([VALENT],String)

-- RegQueryValue() isn't really that, it just allows you to
-- get at the default values of keys, so we provide our own
-- (and better!) version of it. If you want RegQueryValue()s
-- behaviour, use regQueryValueKey.

%fun RegQueryValueKey :: HKEY -> MbString -> IO String
%code char* szValue; long valueLen;
%     long res;
%     res = RegQueryValue ((HKEY)arg1,(char*)arg2, NULL, &valueLen);
%     if ( res == ERROR_SUCCESS ) {
%        szValue=(LPTSTR)malloc(sizeof(char)*(valueLen + 1));
%        res = RegQueryValue((HKEY)arg1,(char*)arg2, szValue, &valueLen);
%     }
%fail { res != ERROR_SUCCESS } { ErrorWithCode("RegQueryValue",res) }
%result (string {szValue})

%fun RegQueryValue :: HKEY -> MbString -> IO String
%code char* res1; DWORD valueLen;
%     long res; DWORD ty;
%     res = RegQueryValueEx ((HKEY)arg1,(char*)arg2, NULL, &ty, NULL, &valueLen);
%     if ( ty== REG_SZ && res == ERROR_SUCCESS ) {
%        res1=(LPTSTR)malloc(sizeof(char)*(valueLen + 1));
%        res = RegQueryValueEx((HKEY)arg1,(char*)arg2, NULL, &ty, res1, &valueLen);
%     } else {
%        if ( ty != REG_SZ ) res = 1;
%     }
%fail { res != ERROR_SUCCESS } { ErrorWithCode("RegQueryValue",res) }
%result (string {res1})

-- %end free(szValue);

%fun RegQueryValueEx :: HKEY -> String -> LPBYTE -> Int -> IO RegValueType
%code LONG res;
%     DWORD ty;
%     
%     res = RegQueryValueEx (arg1, arg2, NULL, &ty, arg3, arg4);
%fail { res != ERROR_SUCCESS } { ErrorWithCode("RegQueryValueEx",res) }
%result (regValueType {res})

%fun RegReplaceKey :: HKEY -> String -> String -> String -> IO ()
%code LONG r;
%     r= RegReplaceKey((HKEY)arg1,(LPCTSTR)arg2,
%                      (LPCTSTR)arg3,(LPCTSTR)arg4);
%fail { r != ERROR_SUCCESS } { ErrorWithCode("RegReplaceKey",r) }

type RegRestoreFlags = Int32

%const RegRestoreFlags [REG_WHOLE_HIVE_VOLATILE, REG_REFRESH_HIVE, REG_NO_LAZY_FLUSH]
%dis regRestoreFlags x = int32 x

%fun RegRestoreKey :: HKEY -> String -> RegRestoreFlags -> IO ()
%code LONG r;
%     r = RegRestoreKey((HKEY)arg1,(LPCTSTR)arg2,
%                       (DWORD)arg3);
%fail { r != ERROR_SUCCESS } { ErrorWithCode("RegRestoreKey",r) }

%fun RegSaveKey :: HKEY -> String -> MbLPSECURITY_ATTRIBUTES -> IO ()
%code LONG r;
%     r = RegSaveKey((HKEY)arg1,(LPCTSTR)arg2,
%                    (LPSECURITY_ATTRIBUTES)arg3);
%fail { r != ERROR_SUCCESS } { ErrorWithCode("RegSaveKey",r) }

-- ifdef FOR_WINDOWS_NT

-- %fun RegSetKeySecurity :: HKEY -> SECURITY_INFORMATION -> SECURITY_DESCRIPTOR -> IO ()

-- endif

-- 3.1 compat. - only allows storage of REG_SZ values.
%fun RegSetValue :: HKEY -> String -> String -> IO ()
%call (hKEY arg1) (string arg2) (stringLen arg3 arg4)
%code LONG res = RegSetValue(arg1,arg2,REG_SZ,arg3,arg4);
%fail { res != ERROR_SUCCESS } { ErrorWithCode("RegSetValue",res) }


type RegValueType = Int32

%const RegValueType [REG_BINARY,REG_DWORD,REG_DWORD_LITTLE_ENDIAN,REG_DWORD_BIG_ENDIAN,REG_EXPAND_SZ,REG_LINK,REG_MULTI_SZ,REG_NONE,REG_RESOURCE_LIST,REG_SZ]

%dis regValueType x = int32 x

-- regSetValueEx has a somewhat wieldly interface if all you want to do is
-- add a string value (a Common Thing to want to do), so we support this
-- specially:
regSetStringValue :: HKEY -> String -> String -> IO ()
regSetStringValue hk key val = do
   v <- marshall_string_ val
   regSetValueEx hk key rEG_SZ v (length val)
   free v
   return ()

%fun RegSetValueEx :: HKEY -> String -> RegValueType -> CString -> Int -> IO ()
%code LONG r;
%     r = RegSetValueEx(arg1,(LPCTSTR)arg2,0,arg3,arg4,arg5);
%fail { r!=ERROR_SUCCESS } { ErrorWithCode("RegSetValueEx",r) }

%fun RegUnLoadKey :: HKEY -> String -> IO ()
%code LONG r;
%     r = RegUnLoadKey((HKEY)arg1,(LPCTSTR)arg2);
%fail {r != ERROR_SUCCESS} {ErrorWithCode("RegUnLoadKey",r)}

