-----------------------------------------------------------------------------
-- |
-- Module      :  Graphics.X11.Xlib.Context
-- Copyright   :  (c) Alastair Reid, 1999-2003
-- License     :  BSD-style (see the file libraries/base/LICENSE)
-- 
-- Maintainer  :  libraries@haskell.org
-- Stability   :  provisional
-- Portability :  portable
--
-- A collection of GreenCard declarations for interfacing with Xlib Graphics
-- Contexts.
--
-----------------------------------------------------------------------------

module Graphics.X11.Xlib.Context(

        setArcMode,
        setBackground,
        setForeground,
        setFunction,
        setGraphicsExposures,
        setClipMask,
        setClipOrigin,
        setDashes,
        setFillRule,
        setFillStyle,
        setFont,
        setLineAttributes,
        setPlaneMask,
        setState,
        setStipple,
        setSubwindowMode,
        setTSOrigin,
        setTile,
        createGC,
        gContextFromGC,
        freeGC,
        flushGC,
        copyGC,

        ) where
 
import Foreign.GreenCard
import Graphics.X11.Types
import Graphics.X11.Xlib.Types

%#include "HsXlib.h"

%prefix X

----------------------------------------------------------------
-- Graphics contexts
----------------------------------------------------------------

-- Convenience functions

%fun XSetArcMode      	   :: Display -> GC -> ArcMode        	      -> IO ()
%fun XSetBackground   	   :: Display -> GC -> Pixel          	      -> IO ()
%fun XSetForeground   	   :: Display -> GC -> Pixel          	      -> IO ()
%fun XSetFunction     	   :: Display -> GC -> GXFunction     	      -> IO ()
%fun XSetGraphicsExposures :: Display -> GC -> Bool                  -> IO ()
%fun XSetClipMask          :: Display -> GC -> Pixmap                -> IO ()
%fun XSetClipOrigin        :: Display -> GC -> Position -> Position  -> IO ()

-- XSetClipRectangles omitted because it's not clear when it's safe to delete the
-- array of rectangles

%fun XSetDashes            :: Display -> GC -> Int -> String -> Int  -> IO ()
%fun XSetFillRule          :: Display -> GC -> FillRule              -> IO ()
%fun XSetFillStyle         :: Display -> GC -> FillStyle             -> IO ()
%fun XSetFont              :: Display -> GC -> Font                  -> IO ()
%fun XSetLineAttributes    :: Display -> GC -> Int -> LineStyle -> CapStyle -> JoinStyle -> IO ()
%fun XSetPlaneMask         :: Display -> GC -> Pixel                 -> IO ()
%fun XSetState             :: Display -> GC -> Pixel -> Pixel -> GXFunction -> Pixel -> IO ()
%fun XSetStipple           :: Display -> GC -> Pixmap                -> IO ()
%fun XSetSubwindowMode     :: Display -> GC -> SubWindowMode         -> IO ()
%fun XSetTSOrigin          :: Display -> GC -> Position -> Position  -> IO ()
%fun XSetTile              :: Display -> GC -> Pixmap                -> IO ()

-- ToDo: create a real interface to this
%fun XCreateGC :: Display -> Drawable -> IO GC
%code res1 = XCreateGC(arg1,arg2,0,0);

-- OLD: 
-- %synonym : GCValueSet : Ptr
--   in rtsDummy
-- 
-- {%
-- typedef unsigned long GCMask; /* cf XtGCMask */
-- typedef struct _gcvalues {
--     GCMask	mask;
--     XGCValues	values;
-- }* GCValueSet;
-- %}
--
-- IMPURE GCValueSet	emptyGCValueSet()
-- RESULT: (RETVAL = (GCValueSet) malloc(sizeof(struct _gcvalues))) ? RETVAL->mask = 0, RETVAL : RETVAL;
-- POST: RETVAL != NULL
-- 
-- IMPURE void	setGCForeground(colour, set)
-- IN Pixel	colour
-- IN GCValueSet	set
-- RESULT: set->mask |= GCForeground; set->values.foreground = colour
-- 
-- IMPURE void	setGCBackground(colour, set)
-- IN Pixel	colour
-- IN GCValueSet	set
-- RESULT: set->mask |= GCBackground; set->values.background = colour
-- 
-- IMPURE void	freeGCValueSet(set)
-- IN GCValueSet	set
-- RESULT: free(set)
-- 
-- IMPURE GC	XCreateGC(display, d, set->mask, &(set->values))
-- NAME: xCreateGC
-- IN Display*	display
-- IN Drawable	d
-- IN GCValueSet	set
-- 
-- IMPURE void	XChangeGC(display, gc, set->mask, &(set->values))
-- NAME: xChangeGC
-- IN Display*	display
-- IN GC		gc
-- IN GCValueSet	set
-- 
-- STARTH
-- -- Code that packages GCValueSets up in a clean monoidic way.
-- 
-- data GCSetter = GCSetter (GCValueSet -> IO ()) -- should be newtype 
-- 
-- createGC :: Display -> Drawable -> GCSetter -> IO GC
-- createGC display d (GCSetter setter) =
--   emptyGCValueSet        >>= \ set ->
--   setter set             >>
--   xCreateGC display d set >>= \ gc ->
--   freeGCValueSet set     >>
--   return gc
-- 
-- changeGC :: Display -> Drawable -> GC -> GCSetter -> IO ()
-- changeGC display d gc (GCSetter setter) =
--   emptyGCValueSet        >>= \ set ->
--   setter set             >>
--   xChangeGC display d set >>= \ gc ->
--   freeGCValueSet set
-- 
-- instance Monoid GCSetter where
--   (GCSetter m) >>> (GCSetter k) 
--     = GCSetter (\ settings -> m settings >> k settings)
--   unit = GCSetter (\ _ -> return ())
-- 
-- set_Background :: Pixel -> GCSetter
-- set_Background c = GCSetter (setGCBackground c)
-- 
-- set_Foreground :: Pixel -> GCSetter
-- set_Foreground c = GCSetter (setGCForeground c)
-- ENDH

%fun XGContextFromGC :: GC -> GContext

%fun XFreeGC  :: Display -> GC -> IO ()
%fun XFlushGC :: Display -> GC -> IO ()

%fun XCopyGC :: Display -> GC -> Mask -> GC -> IO ()

----------------------------------------------------------------
-- End
----------------------------------------------------------------
