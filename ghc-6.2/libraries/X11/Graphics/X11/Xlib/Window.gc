-----------------------------------------------------------------------------
-- |
-- Module      :  Graphics.X11.Xlib.Window
-- Copyright   :  (c) Alastair Reid, 1999-2003
-- License     :  BSD-style (see the file libraries/base/LICENSE)
-- 
-- Maintainer  :  libraries@haskell.org
-- Stability   :  provisional
-- Portability :  portable
--
-- A collection of GreenCard declarations for interfacing with Xlib Windows.
--
-----------------------------------------------------------------------------

module Graphics.X11.Xlib.Window(
        storeName,
        createSimpleWindow,
        createWindow,
        translateCoordinates,
        moveResizeWindow,
        resizeWindow,
        moveWindow,
        reparentWindow,
        mapSubwindows,
        unmapSubwindows,
        mapWindow,
        lowerWindow,
        raiseWindow,
        circulateSubwindowsDown,
        circulateSubwindowsUp,
        circulateSubwindows,
        iconifyWindow,
        withdrawWindow,
        destroyWindow,
        destroySubwindows,
        setWindowBorder,
        setWindowBorderPixmap,
        setWindowBorderWidth,
        setWindowBackground,
        setWindowBackgroundPixmap,
        setWindowColormap,
        addToSaveSet,
        removeFromSaveSet,
        changeSaveSet,
        clearWindow,
        clearArea,
        restackWindows,

        ) where
 
import Foreign.GreenCard
import Graphics.X11.Types
import Graphics.X11.Xlib.Types

%#include "HsXlib.h"

%prefix X

----------------------------------------------------------------
-- Windows
----------------------------------------------------------------

%fun XStoreName :: Display -> Window -> String -> IO ()
%fun XCreateSimpleWindow :: Display -> Window -> Position -> Position -> Dimension -> Dimension -> Int -> Pixel -> Pixel -> IO Window

%fun XCreateWindow :: Display -> Window -> Position -> Position -> Dimension -> Dimension -> Int -> Int -> WindowClass -> Visual -> AttributeMask -> XSetWindowAttributesPtr -> IO Window

----------------------------------------------------------------

--ToDo: find an effective way to use Maybes
%fun XTranslateCoordinates :: Display -> Window -> Window -> Position -> Position -> IO (Bool,Position,Position,Window)
%code res1 = XTranslateCoordinates(arg1,arg2,arg3,arg4,arg5,&res2,&res3,&res4)

%fun XMoveResizeWindow            :: Display -> Window -> Position  -> Position  -> Dimension -> Dimension -> IO ()
%fun XResizeWindow                :: Display -> Window -> Dimension -> Dimension -> IO ()
%fun XMoveWindow                  :: Display -> Window -> Position  -> Position  -> IO ()
%fun XReparentWindow              :: Display -> Window -> Window -> Position -> Position  -> IO ()
%fun XMapSubwindows               :: Display -> Window -> IO ()
%fun XUnmapSubwindows             :: Display -> Window -> IO ()
%fun XMapWindow                   :: Display -> Window -> IO ()
-- Disnae exist: %fun XUnmapWindows                :: Display -> Window -> IO ()
-- Disnae exist: %fun XMapRaisedWindow             :: Display -> Window -> IO ()
%fun XLowerWindow                 :: Display -> Window -> IO ()
%fun XRaiseWindow                 :: Display -> Window -> IO ()
%fun XCirculateSubwindowsDown     :: Display -> Window -> IO ()
%fun XCirculateSubwindowsUp       :: Display -> Window -> IO ()
%fun XCirculateSubwindows         :: Display -> Window -> CirculationDirection -> IO ()
%fun XIconifyWindow  :: Display -> Window -> ScreenNumber -> IO ()
%code Status err = XIconifyWindow(arg1,arg2,arg3)
%fail { Success != err }{ BadStatus(err,XIconifyWindow) }
%fun XWithdrawWindow :: Display -> Window -> ScreenNumber -> IO ()
%code Status err = XWithdrawWindow(arg1,arg2,arg3)
%fail { Success != err }{ BadStatus(err,XWithdrawWindow) }
%fun XDestroyWindow               :: Display -> Window -> IO ()
%fun XDestroySubwindows           :: Display -> Window -> IO ()

%fun XSetWindowBorder             :: Display -> Window -> Pixel     -> IO ()
%fun XSetWindowBorderPixmap       :: Display -> Window -> Pixmap    -> IO ()
%fun XSetWindowBorderWidth        :: Display -> Window -> Dimension -> IO ()
%fun XSetWindowBackground         :: Display -> Window -> Pixel     -> IO ()
%fun XSetWindowBackgroundPixmap   :: Display -> Window -> Pixmap    -> IO ()
%fun XSetWindowColormap           :: Display -> Window -> Colormap  -> IO ()

%fun XAddToSaveSet                :: Display -> Window -> IO ()
%fun XRemoveFromSaveSet           :: Display -> Window -> IO ()
%fun XChangeSaveSet               :: Display -> Window -> ChangeSaveSetMode -> IO ()

%fun XClearWindow                 :: Display -> Window -> IO ()
%fun XClearArea                   :: Display -> Window -> Position -> Position -> Dimension -> Dimension -> Bool -> IO ()

-- -- This is almost good enough - but doesn't call XFree
-- -- %errfun BadStatus XQueryTree :: Display -> Window -> IO (Window, Window, ListWindow) using err = XQueryTree(arg1,arg2,&res1,&res2,&res3,&res3_size)
-- %prim XQueryTree :: Display -> Window -> IO (Window, Window, ListWindow)
-- Window root_w, parent;
-- Int children_size;
-- Window *children;
-- Status r = XQueryTree(arg1,arg2,&root_w, &parent, &children, &children_size);
-- if (Success != r) { %failWith(BadStatus,r); }
-- %update(root_w,parent,children);
-- XFree(children);
-- return;

%fun XRestackWindows :: Display -> ListWindow -> IO ()
%call (display arg1) (listWindow arg2 arg2_size)
%code XRestackWindows(arg1, arg2, arg2_size)

-- -- ToDo: I want to be able to write this
-- -- %fun XListInstalledColormaps :: Display -> Window -> IO ListColormap using res1 = XListInstalledColormaps(arg1,arg2,&res1_size) 
-- -- But I have to write this instead - need to add a notion of cleanup code!
-- %prim XListInstalledColormaps :: Display -> Window -> IO ListColormap
-- Int r_size;
-- Colormap* r = XListInstalledColormaps(arg1,arg2,&r_size);
-- %update(r);
-- XFree(r);
-- return;
-- 
-- -- Again, this is almost good enough
-- -- %errfun BadStatus XGetCommand :: Display -> Window -> IO ListString using err = XGetCommand(arg1,arg2,&res1,&res1_size)
-- -- but not quite
-- -- %prim XGetCommand :: Display -> Window -> IO ListString
-- --Int    argv_size;
-- --String *argv;
-- --Status r = XGetCommand(arg1,arg2,&argv,&argv_size);
-- --if (Success != r) { %failWith(BadStatus, r); }
-- -- %update(argv);
-- --XFreeStringList(argv);
-- --return;
-- 
-- -- %fun XSetCommand :: Display -> Window -> ListString -> IO ()            using XSetCommand(arg1,arg2,arg3,res3_size)
-- 
-- %errfun BadStatus XGetTransientForHint :: Display -> Window -> IO Window using err = XGetTransientForHint(arg1,arg2,&res1)
-- 
-- %fun XSetTransientForHint :: Display -> Window -> Window -> IO ()
-- 
-- -- XRotateWindowProperties omitted
-- -- XGetWindowProperty omitted
-- 
-- -- XGetWindowAttributes omitted
-- -- XChangeWindowAttributes omitted

----------------------------------------------------------------
-- End
----------------------------------------------------------------
