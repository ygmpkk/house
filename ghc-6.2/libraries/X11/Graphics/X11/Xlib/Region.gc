-----------------------------------------------------------------------------
-- |
-- Module      :  Graphics.X11.Xlib.Region
-- Copyright   :  (c) Alastair Reid, 1999-2003
-- License     :  BSD-style (see the file libraries/base/LICENSE)
-- 
-- Maintainer  :  libraries@haskell.org
-- Stability   :  provisional
-- Portability :  portable
--
-- A collection of GreenCard declarations for interfacing with Xlib Regions.
--
-----------------------------------------------------------------------------

module Graphics.X11.Xlib.Region(
        Region,

        RectInRegionResult,
        rectangleOut,
        rectangleIn,
        rectanglePart,

        createRegion,
        polygonRegion,
        intersectRegion,
        subtractRegion,
        unionRectWithRegion,
        unionRegion,
        xorRegion,
        emptyRegion,
        equalRegion,
        pointInRegion,
        rectInRegion,
        clipBox,
        offsetRegion,
        shrinkRegion,
        setRegion,

        ) where
 
import Foreign.GreenCard
import Graphics.X11.Types
import Graphics.X11.Xlib.Types

%#include "HsXlib.h"

%prefix X

----------------------------------------------------------------
-- Regions
----------------------------------------------------------------

%dis region x     = Region     (%ForeignPtr {Region} x {XDestroyRegion})
newtype Region     = Region     (ForeignPtr Stub_Region)
data Stub_Region

type RectInRegionResult = Int
%dis rectInRegionResult x = int x

-- Return values from XRectInRegion()
%const RectInRegionResult
% [ RectangleOut
% , RectangleIn
% , RectanglePart
% ]
 
-- regions deallocation is handled by the GC (ForeignPtr magic)
-- so we don't provide XDestroyRegion explicitly
-- no idea what the int is for
-- %fun XDestroyRegion :: Region -> IO Int

----------------------------------------------------------------
-- Creating regions
----------------------------------------------------------------

-- an empty region 
-- (often used as "out argument" to binary operators which return regions)
%fun XCreateRegion :: IO Region

%fun XPolygonRegion :: ListPoint -> FillRule -> IO Region
%call (listPoint arg1 arg2) (fillRule arg3)

----------------------------------------------------------------
-- Combining Regions
--
-- The usual shoddy state of Xlib documentation fails to mention
-- what the Int is for.
--
-- All operations overwrite the region in their third argument
-- which is usually a freshly created region.
----------------------------------------------------------------

%fun XIntersectRegion     :: Region -> Region -> Region -> IO Int
%fun XSubtractRegion      :: Region -> Region -> Region -> IO Int
%fun XUnionRectWithRegion :: Rectangle -> Region -> Region -> IO Int
%code res1 = XUnionRectWithRegion(&arg1,arg2,arg3)
%fun XUnionRegion         :: Region -> Region -> Region -> IO Int
%fun XXorRegion           :: Region -> Region -> Region -> IO Int

----------------------------------------------------------------
-- Examining regions (tests, bounding boxes, etc)
----------------------------------------------------------------

%fun XEmptyRegion :: Region -> IO Bool
%fun XEqualRegion :: Region -> Region -> IO Bool
%fun XPointInRegion :: Region -> Point -> IO Bool
%code res1 = XPointInRegion(arg1,arg2.x,arg2.y)
%fun XRectInRegion :: Region -> Rectangle -> IO RectInRegionResult
%code res1 = XRectInRegion(arg1,arg2.x,arg2.y,arg2.width,arg2.height)

-- I have no idea what the int is for
%fun XClipBox :: Region -> IO (Rectangle,Int)
%code res2 = XClipBox(arg1,&res1)

----------------------------------------------------------------
-- Modifying regions
-- (If you use any of these, you can't make regions look like
--  first class data structures.)
----------------------------------------------------------------

-- translate region
%fun XOffsetRegion :: Region -> Point -> IO Int
%code res1 = XOffsetRegion(arg1,arg2.x,arg2.y)

-- increase size of region by +ve or -ve number of pixels
-- while preserving the centre of the region (ie half the pixels
-- come off the left, and half off the right)
%fun XShrinkRegion :: Region -> Point -> IO Int
%code res1 = XShrinkRegion(arg1,arg2.x,arg2.y)

----------------------------------------------------------------
-- Graphics Context
----------------------------------------------------------------

-- set clip mask of GC
%fun XSetRegion :: Display -> GC -> Region -> IO Int

----------------------------------------------------------------
-- End
----------------------------------------------------------------
