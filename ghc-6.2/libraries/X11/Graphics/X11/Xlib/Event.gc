-----------------------------------------------------------------------------
-- |
-- Module      :  Graphics.X11.Xlib.Event
-- Copyright   :  (c) Alastair Reid, 1999-2003
-- License     :  BSD-style (see the file libraries/base/LICENSE)
-- 
-- Maintainer  :  libraries@haskell.org
-- Stability   :  provisional
-- Portability :  portable
--
-- A collection of GreenCard declarations for interfacing with Xlib Events.
--
-----------------------------------------------------------------------------

module Graphics.X11.Xlib.Event(
        QueuedMode,
        queuedAlready,
        queuedAfterFlush,
        queuedAfterReading,
        XEvent,
        XEventPtr,
        allocXEvent,
        get_EventType,
        get_Window,
        XKeyEvent,
        XKeyEventPtr,
        asKeyEvent,
        XButtonEvent,
        get_KeyEvent,
        get_ButtonEvent,
        get_MotionEvent,
        XMotionEvent,
        XExposeEvent,
        get_ExposeEvent,
        XMappingEvent,
        XConfigureEvent,
        get_ConfigureEvent,
        waitForEvent,
        gettimeofday_in_milliseconds,
        gettimeofday_in_milliseconds_internal,
        flush,
        sync,
        pending,
        eventsQueued,
        nextEvent,
        allowEvents,
        selectInput,
        sendEvent,
        windowEvent,
        checkWindowEvent,
        maskEvent,
        checkMaskEvent,
        checkTypedEvent,
        checkTypedWindowEvent,
        putBackEvent,
        peekEvent,
        refreshKeyboardMapping,

        ) where
 
import Foreign.GreenCard
import Graphics.X11.Types
import Graphics.X11.Xlib.Types

import Foreign( castPtr )

%#include "HsXlib.h"

%prefix X

----------------------------------------------------------------
-- Events
----------------------------------------------------------------

type   QueuedMode   = Int
%dis   queuedMode x = int x
%const QueuedMode
% [ QueuedAlready
% , QueuedAfterFlush
% , QueuedAfterReading
% ]

-- Because of the way the corresponding C types are defined,
-- These "structs" are somewhat unusual - they omit fields which can
-- be found in more general structs.
-- For example, XAnyEvent omits type since it is in XEvent.
-- Therefore, to get the complete contents of an event one typically
-- writes:
--   do
--     ty <- get_XEvent e
--     (serial,send_event,display,window) <- get_XAnyEvent
--     window' <- get_XDestroyWindowEvent

type XEvent = 
 ( EventType
 )
%dis xEvent x = declare {XEvent} x in
% ( eventType {(%x).type}
% )
type XEventPtr   = Ptr Stub_EventPtr
data Stub_EventPtr
%dis xEventPtr x = ptr ({XEvent*} x)

%fun allocXEvent :: IO XEventPtr
%code res1 = (void*)malloc(sizeof(XEvent))

%fun get_EventType :: XEventPtr -> IO EventType
%code res1 = arg1->type

%fun get_Window :: XEventPtr -> IO Window
%code res1 = ((XAnyEvent*)arg1)->window

-- %struct : XAnyEvent : XAnyEvent arg1
--   Int32     : serial            # # of last request processed by server
--   Bool      : send_event        # true if this came from a SendEvent request
--   Display   : display           # Display the event was read from
--   Window    : window            # window on which event was requested in event mask

type XKeyEvent =
 ( Window    -- root window that the event occured on 
 , Window    -- child window 
 , Time      -- milliseconds 
 , Int       -- pointer x, y coordinates in event window 
 , Int       -- 
 , Int       -- coordinates relative to root 
 , Int       -- 
 , Modifier  -- key or button mask 
 , KeyCode   -- detail 
 , Bool      -- same screen flag 
 )
%dis xKeyEvent x = declare {XKeyEvent} x in
% ( window    {(%x).root} 	
% , window    {(%x).subwindow} 	
% , time      {(%x).time} 	
% , int       {(%x).x} 		
% , int       {(%x).y}		
% , int       {(%x).x_root}
% , int       {(%x).y_root}	
% , modifier  {(%x).state} 	
% , keyCode   {(%x).keycode} 	
% , bool      {(%x).same_screen}
% )
type XKeyEventPtr   = Ptr Stub_KeyEventPtr
data Stub_KeyEventPtr
%dis xKeyEventPtr x = ptr ({XKeyEvent*} x)

asKeyEvent :: XEventPtr -> XKeyEventPtr
asKeyEvent = castPtr

type XButtonEvent = 
 ( Window    --	root window that the event occured on 
 , Window    --	child window 
 , Time      --	milliseconds 
 , Int       --	pointer x, y coordinates in event window 
 , Int       
 , Int       --	coordinates relative to root 
 , Int       
 , Modifier  --	key or button mask 
 , Button    --	detail 
 , Bool      --	same screen flag 
 )
%dis xButtonEvent x = declare {XButtonEvent} x in
% ( window    {(%x).root} 	        
% , window    {(%x).subwindow} 	
% , time      {(%x).time} 		
% , int       {(%x).x} 		
% , int       {(%x).y}		
% , int       {(%x).x_root}	 	
% , int       {(%x).y_root}		
% , modifier  {(%x).state} 	        
% , button    {(%x).button} 	        
% , bool      {(%x).same_screen} 	
% )

%fun get_KeyEvent :: XEventPtr -> IO XKeyEvent
%code 
%result (xKeyEvent {*(XKeyEvent*)arg1})

%fun get_ButtonEvent :: XEventPtr -> IO XButtonEvent
%code 
%result (xButtonEvent {*(XButtonEvent*)arg1})

%fun get_MotionEvent :: XEventPtr -> IO XMotionEvent
%code 
%result (xMotionEvent {*(XMotionEvent*)arg1})


type XMotionEvent =
 ( Window      -- root window that the event occured on 
 , Window      -- child window 
 , Time        -- milliseconds 
 , Int         -- pointer x, y coordinates in event window 
 , Int          
 , Int         -- coordinates relative to root 
 , Int          
 , Modifier    -- key or button mask 
 , NotifyMode  -- detail 
 , Bool        -- same screen flag 
 )
%dis xMotionEvent x = declare {XMotionEvent} x in
% ( window      {(%x).root} 	        
% , window      {(%x).subwindow} 	
% , time        {(%x).time} 		
% , int         {(%x).x} 		
% , int         {(%x).y}		
% , int         {(%x).x_root}	 	
% , int         {(%x).y_root}		
% , modifier    {(%x).state} 	        
% , notifyMode  {(%x).is_hint} 	
% , bool        {(%x).same_screen} 	
% )


-- %struct : XCrossingEvent : XCrossingEvent arg1
--   Window       : root 	        # root window that the event occured on 
--   Window       : subwindow 	# child window 
--   Time         : time 		# milliseconds 
--   Int          : x 		# pointer x, y coordinates in event window 
--   Int          : y
--   Int          : x_root	 	# coordinates relative to root 
--   Int          : y_root
--   NotifyMode   : mode              
--   NotifyDetail : detail
--   Bool         : same_screen	# same screen flag
--   Bool         : focus		# boolean focus
--   Modifier     : state	        # key or button mask 
-- 
-- %struct : XFocusChangeEvent : XFocusChangeEvent arg1
--   NotifyMode   : mode
--   NotifyDetail : detail
-- 
-- -- omitted: should be translated into bitmaps
-- -- PURE void	getKeymapEvent(event)
-- -- IN XEvent*	event
-- -- OUT Window	window	 	= ((XKeymapEvent*)event)->window
-- -- OUT array[32] Char key_vector 	= ((XKeymapEvent*)event)->key_vector
-- -- RESULT: 

type XExposeEvent =
 ( Position	-- x	 	
 , Position	-- y	 	
 , Dimension	-- width	 	
 , Dimension	-- height	
 , Int		-- count	 	
 )
%dis xExposeEvent x = declare {XExposeEvent} x in
% ( position	{(%x).x}	 	
% , position	{(%x).y}	 	
% , dimension	{(%x).width}	 	
% , dimension	{(%x).height}	
% , int		{(%x).count}	 	
% )

%fun get_ExposeEvent :: XEventPtr -> IO XExposeEvent
%code
%result (xExposeEvent {*(XExposeEvent*)arg1})

-- %struct : XGraphicsExposeEvent : XGraphicsExposeEvent arg1
--   Position	: x	 	
--   Position	: y	 	
--   Dimension	: width	 	.
--   Dimension	: height	
--   Int		: count	 	
--   Int		: major_code 	
--   Int		: minor_code 	
-- 
-- %struct : XCirculateEvent : XCirculateEvent arg1
--   Window	: window	 	
--   Place		: place		
-- 
-- %struct : XConfigureEvent : XConfigureEvent arg1
--   Window	: window	
--   Position	: x	 	
--   Position	: y	 	
--   Dimension	: width	 	
--   Dimension	: height	
--   Dimension	: border_width 	
--   Window	: above	 	
--   Bool	        : override_redirect
-- 
-- %struct : XCreateWindowEvent : XCreateWindowEvent arg1
--   Window	: window	 	
--   Position	: x	 	
--   Position	: y	 	
--   Dimension	: width	 	
--   Dimension	: height	 	
--   Dimension	: border_width 	
--   Bool	        : override_redirect
-- 
-- %struct : XDestroyWindowEvent : XDestroyWindowEvent arg1
--   Window	: window
-- 
-- %struct : XGravityEvent : XGravityEvent arg1
--   Window	: window	
--   Position	: x	 	
--   Position	: y	 	
-- 
-- %struct : XMapEvent : XMapEvent arg1
--   Bool	        : override_redirect

type XMappingEvent =
 ( MappingRequest -- request	
 , KeyCode	  -- first_keycode
 , Int		  -- count	
 )
%dis xMappingEvent x = declare {XMappingEvent} x in
% ( mappingRequest {(%x).request}	
% , keyCode	   {(%x).first_keycode}
% , int		   {(%x).count}	
% )

type XConfigureEvent =
 ( Position
 , Position
 , Dimension 
 , Dimension 
 )
%dis xConfigureEvent x =
% ( position  {(%x).x}
% , position  {(%x).y}
% , dimension {(%x).width}	
% , dimension {(%x).height}
% )
%fun get_ConfigureEvent :: XEventPtr -> IO XConfigureEvent
%code
%result (xConfigureEvent {*(XConfigureEvent*)arg1})


-- %struct : XResizeRequestEvent : XResizeRequestEvent arg1
--   Dimension	: width	 
--   Dimension	: height	
-- 

-- %struct : XReparentEvent : XReparentEvent arg1
--   Window	: window	
--   Window	: parent	
--   Position	: x	 	
--   Position	: y	 	
--   Bool	        : override_redirect
-- 
-- %struct : XUnmapEvent : XUnmapEvent arg1
--   Window	: window	 	
--   Bool	        : from_configure	
-- 
-- %struct : XVisibilityEvent : XVisibilityEvent arg1
--   Visibility	: state
-- 
-- %struct : XCirculateRequestEvent : XCirculateRequestEvent arg1
--   Place	        : place
-- 
-- -- omitted because valuemask looks tricky
-- -- %struct : XConfigureRequestEvent : XConfigureRequestEvent arg1
-- --   Window	 : window	
-- --   Position	 : x		
-- --   Position	 : y		
-- --   Dimension	 : width	
-- --   Dimension	 : height	
-- --   Dimension	 : border_width	
-- --   Window	 : above	
-- --   StackingMethod : detail	
-- --   ???	         : valuemask	
-- 
-- %struct : XMapRequestEvent : XMapRequestEvent arg1
--   Window	: window
-- 
-- %struct : XColormapEvent : XColormapEvent arg1
--   Colormap		: colormap
--   Bool		        : new	  
--   ColormapNotification	: state   
-- 
-- -- getClientMessageEvent omitted
-- -- getPropertyEvent omitted
-- -- getSelectionClearEvent omitted
-- -- getSelectionRequestEvent omitted
-- -- getSelectionEvent omitted

-- functions

-- The following is useful if you want to do a read with timeout.
-- Returns True if timeout occurs.
%fun waitForEvent :: Display -> Word32 -> IO Bool
%code
%  struct timeval timeout;
%  fd_set readfds;
%  fd_set nofds;
%  int    fd = ConnectionNumber(arg1);
%  int n;
%  FD_ZERO(&readfds);
%  FD_ZERO(&nofds);
%  FD_SET(fd,&readfds);
%  timeout.tv_sec  = arg2 / 1000000;
%  timeout.tv_usec = arg2 % 1000000;
%  /* HN 2001-02-06: Select needs to be told highest fd _+_ 1. */
%  n = select(fd+1,&readfds,&nofds,&nofds,&timeout);
%result (bool {n == 0})

-- The following is somewhat compatible with Win32's TimeGetTime
gettimeofday_in_milliseconds :: IO Integer
gettimeofday_in_milliseconds = do
  (sec,usec) <- gettimeofday_in_milliseconds_internal
  return (toInteger sec * 1000 + toInteger usec `div` 1000)

%fun gettimeofday_in_milliseconds_internal :: IO (Word32,Word32)
%code
% struct timeval tv;
% int rc = gettimeofday(&tv,0);
% res1 = tv.tv_sec;
% res2 = tv.tv_usec;

%fun XFlush        :: Display ->               IO ()
%fun XSync         :: Display -> Bool ->       IO ()
%fun XPending      :: Display ->               IO Int
%fun XEventsQueued :: Display -> QueuedMode -> IO Int
%fun XNextEvent    :: Display -> XEventPtr  -> IO ()
%fun XAllowEvents  :: Display -> AllowEvents -> Time -> IO ()

-- ToDo: XFree(res1) after constructing result
-- %fun XGetMotionEvents :: Display -> Window -> Time -> Time -> IO ListXTimeCoord
-- %code res1 = XGetMotionEvents(arg1,arg2,arg3,arg4,&res1_size)

%fun XSelectInput :: Display -> Window -> EventMask -> IO ()
%fun XSendEvent :: Display -> Window -> Bool -> EventMask -> XEventPtr -> IO ()
%code Status err = XSendEvent(arg1,arg2,arg3,arg4,arg5)
%fail { Success != err }{ BadStatus(err,XSendEvent) }

%fun XWindowEvent :: Display -> Window -> EventMask -> XEventPtr -> IO ()
%fun XCheckWindowEvent :: Display -> Window -> EventMask -> XEventPtr -> IO Bool

%fun XMaskEvent :: Display -> EventMask -> XEventPtr -> IO ()
%fun XCheckMaskEvent :: Display -> EventMask -> XEventPtr -> IO Bool
%fun XCheckTypedEvent :: Display -> EventType -> XEventPtr -> IO Bool
%fun XCheckTypedWindowEvent :: Display -> Window -> EventType -> XEventPtr -> IO Bool
%fun XPutBackEvent :: Display -> XEventPtr -> IO ()
%fun XPeekEvent :: Display -> XEventPtr -> IO ()

-- XFilterEvent omitted (can't find documentation)
-- XIfEvent omitted (can't pass predicates (yet))
-- XCheckIfEvent omitted (can't pass predicates (yet))
-- XPeekIfEvent omitted (can't pass predicates (yet))

%fun XRefreshKeyboardMapping :: XMappingEvent -> IO ()
%code XRefreshKeyboardMapping(&arg1)

-- XSynchronize omitted (returns C function)
-- XSetAfterFunction omitted (can't pass functions (yet))

----------------------------------------------------------------
-- End
----------------------------------------------------------------
