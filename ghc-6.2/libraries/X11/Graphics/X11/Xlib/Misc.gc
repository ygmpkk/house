-----------------------------------------------------------------------------
-- |
-- Module      :  Graphics.X11.Xlib.Misc
-- Copyright   :  (c) Alastair Reid, 1999-2003
-- License     :  BSD-style (see the file libraries/base/LICENSE)
-- 
-- Maintainer  :  libraries@haskell.org
-- Stability   :  provisional
-- Portability :  portable
--
-- A collection of GreenCard declarations for interfacing with Xlib.
--
-----------------------------------------------------------------------------

module Graphics.X11.Xlib.Misc(

        rmInitialize,
        autoRepeatOff,
        autoRepeatOn,
        bell,
        setCloseDownMode,
        lastKnownRequestProcessed,
        getInputFocus,
        setInputFocus,
        grabButton,
        ungrabButton,
        grabPointer,
        ungrabPointer,
        grabKey,
        ungrabKey,
        grabKeyboard,
        ungrabKeyboard,
        grabServer,
        ungrabServer,
        queryBestTile,
        queryBestStipple,
        queryBestCursor,
        queryBestSize,
        queryPointer,
        displayName,
        setDefaultErrorHandler,
        geometry,
        getGeometry,
        supportsLocale,
        setLocaleModifiers,
        AllowExposuresMode,
        dontAllowExposures,
        allowExposures,
        defaultExposures,
        PreferBlankingMode,
        dontPreferBlanking,
        preferBlanking,
        defaultBlanking,
        ScreenSaverMode,
        screenSaverActive,
        screenSaverReset,
        getScreenSaver,
        setScreenSaver,
        activateScreenSaver,
        resetScreenSaver,
        forceScreenSaver,
        getPointerControl,
        warpPointer,
        
        createPixmap,
        freePixmap,
        bitmapBitOrder,
        bitmapUnit,
        bitmapPad,

        displayKeycodes,
        lookupKeysym,
        keycodeToKeysym,
        keysymToKeycode,
        keysymToString,
        stringToKeysym,
        noSymbol,
        lookupString,
        getIconName,
        setIconName,
        defineCursor,
        undefineCursor,
        createPixmapCursor,
        createGlyphCursor,
        createFontCursor,
        freeCursor,
        recolorCursor,
        setWMProtocols,
        allocXSetWindowAttributes,
        set_background_pixmap,
        set_background_pixel,
        set_border_pixmap,
        set_border_pixel,
        set_bit_gravity,
        set_win_gravity,
        set_backing_store,
        set_backing_planes,
        set_backing_pixel,
        set_save_under,
        set_event_mask,
        set_do_not_propagate_mask,
        set_override_redirect,
        set_colormap,
        set_cursor,
        
        drawPoint,
        drawPoints,
        drawLine,
        drawLines,
        drawSegments,
        drawRectangle,
        drawRectangles,
        drawArc,
        drawArcs,
        fillRectangle,
        fillRectangles,
        fillPolygon,
        fillArc,
        fillArcs,
        copyArea,
        copyPlane,
        drawString,
        drawImageString,
        storeBuffer,
        storeBytes,
        fetchBuffer,
        fetchBytes,
        rotateBuffers,
        
        setTextProperty,

        ) where
 
import Foreign.GreenCard
import Graphics.X11.Types
import Graphics.X11.Xlib.Types
import Graphics.X11.Xlib.Event
import Graphics.X11.Xlib.Font

%#include "HsXlib.h"

%prefix X

-- I'm not sure why I added this since I don't have any of the related
-- functions.
%fun XrmInitialize :: IO ()

-- %fun XGetDefault :: Display -> String -> String -> IO ()

%fun XAutoRepeatOff    :: Display -> IO ()
%fun XAutoRepeatOn     :: Display -> IO ()
%fun XBell             :: Display -> Int -> IO ()
%fun XSetCloseDownMode :: Display -> CloseDownMode -> IO ()
%fun XLastKnownRequestProcessed :: Display -> IO Int

%fun XGetInputFocus :: Display -> IO (Window, FocusMode)
%code XGetInputFocus(arg1,&res1,&res2);

%fun XSetInputFocus   :: Display -> Window -> FocusMode -> Time -> IO ()

-- XAllocID omitted
-- XKillClient omitted
-- XFetchName omitted
-- XGetKeyboardControl omitted
-- XChangeKeyboardControl omitted
-- XChangeKeyboardMapping omitted
-- XChangePointerControl omitted

%fun XGrabButton     :: Display -> Button -> ButtonMask -> Window -> Bool -> EventMask -> GrabMode -> GrabMode -> Window -> Cursor -> IO ()
%fun XUngrabButton   :: Display -> Button -> ButtonMask -> Window -> IO ()

%fun XGrabPointer    :: Display -> Window -> Bool -> EventMask -> GrabMode -> GrabMode -> Window -> Cursor -> Time -> IO GrabStatus
%fun XUngrabPointer  :: Display -> Time -> IO ()

%fun XGrabKey        :: Display -> KeyCode -> ButtonMask -> Window -> Bool -> GrabMode -> GrabMode -> IO ()
%fun XUngrabKey      :: Display -> KeyCode -> ButtonMask -> Window -> IO ()

%fun XGrabKeyboard   :: Display -> Window -> Bool -> GrabMode -> GrabMode -> Time -> IO GrabStatus
%fun XUngrabKeyboard :: Display -> Time -> IO ()

%fun XGrabServer   :: Display -> IO ()
%fun XUngrabServer :: Display -> IO ()

-- XChangeActivePointerGrab omitted

-- XFree omitted
-- XFreeStringList omitted

%fun XQueryBestTile    :: Display -> Drawable -> Dimension -> Dimension -> IO (Dimension, Dimension) 
%code Status err = XQueryBestTile(arg1,arg2,arg3,arg4,&res1,&res2)    
%fail { Success != err }{ BadStatus(err,XQueryBestTile) }

%fun XQueryBestStipple :: Display -> Drawable -> Dimension -> Dimension -> IO (Dimension, Dimension)
%code Status err = XQueryBestStipple(arg1,arg2,arg3,arg4,&res1,&res2) 
%fail { Success != err }{ BadStatus(err,XQueryBestStipple) }

%fun XQueryBestCursor  :: Display -> Drawable -> Dimension -> Dimension -> IO (Dimension, Dimension)
%code Status err = XQueryBestCursor(arg1,arg2,arg3,arg4,&res1,&res2)  
%fail { Success != err }{ BadStatus(err,XQueryBestCursor) }

%fun XQueryBestSize    :: Display -> Drawable -> QueryBestSizeClass -> Dimension -> Dimension -> IO (Dimension, Dimension)
%code Status err = XQueryBestSize(arg1,arg2,arg3,arg4,arg5,&res1,&res2) 
%fail { Success != err }{ BadStatus(err,XQueryBestSize) }

-- Note: Returns false if pointer not in window w (and win_x = win_y = 0)
-- ToDo: more effective use of Maybes?
%fun XQueryPointer :: Display -> Window -> IO (Bool, Window, Window, Int, Int, Int, Int, Modifier)
%code Status res1 = XQueryPointer(arg1,arg2,&res2,&res3,&res4,&res5,&res6,&res7,&res8) 

-- XSetSelectionOwner omitted

-- XOpenOM omitted
-- XCloseOM omitted
-- XSetOMValues omitted
-- XGetOMValues omitted
-- DisplayOfOM omitted
-- XLocaleOfOM omitted

-- XCreateOC omitted
-- XDestroyOC omitted
-- XOMOfOC omitted
-- XSetOCValues omitted
-- XGetOCValues omitted

-- XVaCreateNestedList omitted

----------------------------------------------------------------
-- Error reporting
----------------------------------------------------------------

%fun XDisplayName :: String -> String 

-- type ErrorHandler   = Display -> ErrorEvent -> IO Int
-- %dis errorHandler x = (stable x)
-- 
-- type IOErrorHandler = Display ->                IO Int
-- %dis ioErrorHandler x = (stable x)

-- Sadly, this code doesn't work because hugs->runIO creates a fresh
-- stack of exception handlers so the exception gets thrown to the 
-- wrong place.
-- 
-- %C
-- % static HugsStablePtr ioErrorHandlerPtr; 
-- % 
-- % int genericIOErrorHandler(Display *d)
-- % {
-- %     if (ioErrorHandlerPtr >= 0) {
-- %     	  hugs->putStablePtr(ioErrorHandlerPtr);
-- %     	  hugs->putAddr(d);  
-- %     	  if (hugs->runIO(1)) { /* exitWith value returned */
-- %     	   return hugs->getInt();
-- %     	  } else {
-- %     	   return hugs->getWord();
-- %     	  }
-- %     }
-- %     return 1;
-- % }

-- Here's what we might do instead.  The two error handlers set flags
-- when they fire and every single call to X contains the line:
--
--   %fail { errorFlags != 0 } { XError(errorFlags) }
--
-- This really sucks.
-- Oh, and it won't even work with IOErrors since they terminate
-- the process if the handler returns.  I don't know what the hell they
-- think they're doing taking it upon themselves to terminate MY
-- process when THEIR library has a problem but I don't think anyone 
-- ever accused X of being well-designed.
-- 
-- % static int genericIOErrorHandler(Display *d)
-- % {
-- %     if (ioErrorHandlerPtr >= 0) {
-- %     	  hugs->putStablePtr(ioErrorHandlerPtr);
-- %     	  hugs->putAddr(d);  
-- %     	  if (hugs->runIO(1)) { /* exitWith value returned */
-- %     	   return hugs->getInt();
-- %     	  } else {
-- %     	   return hugs->getWord();
-- %     	  }
-- %     }
-- %     return 1;
-- % }


-- HN 2001-02-06
-- Moved to auxiliaries.c to make it easier to use the inlining option.
-- -- Sigh, for now we just use an error handler that prints an error
-- -- message on the screen
-- %C
-- % static int defaultErrorHandler(Display *d, XErrorEvent *ev)
-- % {
-- % 	  char buffer[1000];
-- % 	  XGetErrorText(d,ev->error_code,buffer,1000);
-- % 	  printf("Error: %s\n", buffer);
-- % 	  return 0;
-- % }

{-# CBITS auxiliaries.c #-}

%fun setDefaultErrorHandler :: IO ()
%code XSetErrorHandler(defaultErrorHandler);


-- %fun XSetIOErrorHandler :: IOErrorHandler -> IO IOErrorHandler
-- %fun XSetErrorHandler   :: ErrorHandler   -> IO ErrorHandler

-- XGetErrorDatabaseText omitted
-- XGetErrorText omitted

-- ----------------------------------------------------------------
-- -- Buffers
-- ----------------------------------------------------------------
-- 
-- -- OLD: Would arrays be more appropriate?
-- --
-- -- IMPURE void	XStoreBytes(display, bytes, nbytes)
-- -- IN Display*		display
-- -- VAR Int			nbytes
-- -- IN list[nbytes] Byte	bytes
-- -- 
-- -- IMPURE list[nbytes] Byte	XFetchBytes(display, &nbytes)
-- -- IN Display*	display
-- -- VAR Int		nbytes
-- -- 
-- -- IMPURE void	XStoreBuffer(display, bytes, nbytes, buffer)
-- -- IN Display*		display
-- -- VAR Int			nbytes
-- -- IN list[nbytes] Byte	bytes
-- -- IN Buffer		buffer
-- -- 
-- -- IMPURE list[nbytes] Byte	XFetchBuffer(display, &nbytes, buffer)
-- -- IN Display*	display
-- -- VAR Int		nbytes
-- -- IN Buffer	buffer
-- -- 
-- -- IMPURE void	XRotateBuffers(display, rotate)
-- -- IN Display*	display
-- -- VAR Int		rotate

----------------------------------------------------------------
-- Extensions
----------------------------------------------------------------

-- ToDo: Use XFreeExtensionList
-- %fun XListExtensions :: Display -> IO ListString using res1 = XListExtensions(arg1,&res1_size)

-- %errfun False XQueryExtension :: Display -> String -> IO (Int,Int,Int) using res4 = XQueryExtension(arg1,arg2,&res1,&res2,&res3)->(res1,res2,res3)
-- %fun XInitExtensions :: Display -> String -> IO XExtCodes
-- %fun XAddExtensions  :: Display ->           IO XExtCodes

-- XAddToExtensionList omitted
-- XFindOnExtensionList omitted
-- XEHeadOfExtensionList omitted

----------------------------------------------------------------
-- Hosts
----------------------------------------------------------------

-- ToDo: operations to construct and destruct an XHostAddress

-- %fun XAddHost :: Display -> XHostAddress -> IO ()
-- %fun XRemoveHost :: Display -> XHostAddress -> IO ()
-- 
-- %fun XAddHosts    :: Display -> ListXHostAddress -> IO () using XAddHosts(arg1,arg2,arg2_size) 
-- %fun XRemoveHosts :: Display -> ListXHostAddress -> IO () using XRemoveHosts(arg1,arg2,arg2_size) 
-- 
-- -- Uses %prim to let us call XFree
-- %prim XListHosts :: Display -> IO (ListXHostAddress, Bool)
-- Bool state;
-- Int r_size;
-- XHostAddress* r = XListHosts(arg1,&r_size,&state);
-- %update(r,state);
-- XFree(r);
-- return;

-- %fun XEnableAccessControl  :: Display -> IO ()
-- %fun XDisableAccessControl :: Display -> IO ()
-- %fun XSetAccessControl     :: Display -> Access -> IO ()


----------------------------------------------------------------
-- Geometry
----------------------------------------------------------------

%fun XGeometry :: Display -> Int -> String -> String -> Dimension -> Dimension -> Dimension -> Int -> Int -> IO (Int, Position, Position, Dimension, Dimension)
%code res1 = XGeometry(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,&res2,&res3,&res4,&res5)

%fun XGetGeometry :: Display -> Int -> Drawable -> IO (Window, Position, Position, Dimension, Dimension, Dimension, Int)
%code Status err = XGetGeometry(arg1,arg2,&res1,&res2,&res3,&res4,&res5,&res6,&res7)
%fail { Success != err }{ BadStatus(err,XGetGeometry) }

-- XParseGeometry omitted (returned bitset too weird)

----------------------------------------------------------------
-- Locale
----------------------------------------------------------------

%fun XSupportsLocale :: IO Bool
%fun XSetLocaleModifiers :: String -> IO String

----------------------------------------------------------------
-- Screen Saver
----------------------------------------------------------------

type AllowExposuresMode = Int
%dis allowExposuresMode x = int x	      
%const AllowExposuresMode
% [ DontAllowExposures
% , AllowExposures
% , DefaultExposures
% ]

type PreferBlankingMode = Int
%dis preferBlankingMode x = int x	      	      
%const PreferBlankingMode	
% [ DontPreferBlanking
% , PreferBlanking
% , DefaultBlanking
% ]

type ScreenSaverMode = Int
%dis screenSaverMode x = int x	      
%const ScreenSaverMode	
% [ ScreenSaverActive
% , ScreenSaverReset
% ]

%fun XGetScreenSaver :: Display -> IO (Int, Int, PreferBlankingMode, AllowExposuresMode)
%code XGetScreenSaver(arg1,&res1,&res2,&res3,&res4)

%fun XSetScreenSaver      :: Display -> Int -> Int -> PreferBlankingMode -> AllowExposuresMode -> IO ()
%fun XActivateScreenSaver :: Display -> IO ()
%fun XResetScreenSaver    :: Display -> IO ()
%fun XForceScreenSaver    :: Display -> ScreenSaverMode -> IO ()


----------------------------------------------------------------
-- Pointer
----------------------------------------------------------------

%fun XGetPointerControl :: Display -> IO (Int, Int, Int)
%code XGetPointerControl(arg1,&res1,&res2,&res3)

%fun XWarpPointer :: Display -> Window -> Window -> Position -> Position -> Dimension -> Dimension -> Position -> Position -> IO ()

-- XGetPointerMapping omitted
-- XSetPointerMapping omitted

----------------------------------------------------------------
-- Visuals
----------------------------------------------------------------

-- XVisualIDFromVisual omitted


----------------------------------------------------------------
-- Threads
----------------------------------------------------------------

-- XInitThreads omitted (leary of thread stuff)
-- XLockDisplay omitted (leary of thread stuff)
-- XUnlockDisplay omitted (leary of thread stuff)

----------------------------------------------------------------
-- Pixmaps
----------------------------------------------------------------

%fun XCreatePixmap :: Display -> Drawable -> Dimension -> Dimension -> Int -> IO Pixmap
%fun XFreePixmap :: Display -> Pixmap -> IO ()

-- XCreatePixmapFromBitmapData omitted (type looks strange)

-- %fun XListPixmapFormatValues = res1 = XListPixmapFormatValues(display, &res1_size) :: Display -> ListXPixmapFormatValues

----------------------------------------------------------------
-- Bitmaps
----------------------------------------------------------------

-- ToDo: do these need to be available to the programmer?
-- Maybe I could just wire them into all other operations?

%fun XBitmapBitOrder :: Display -> ByteOrder
%fun XBitmapUnit     :: Display -> Int
%fun XBitmapPad      :: Display -> Int

-- ToDo: make sure that initialisation works correctly for x/y_hot
-- omitted
-- IMPURE void	XWriteBitmapFile(display, filename, bitmap, width, height, x_hot, y_hot) RAISES Either
-- RETURNTYPE	BitmapFileStatus
-- GLOBAL ERROR BitmapFileStatus	RETVAL
-- IN Display*	display
-- IN String	filename
-- IN Pixmap	bitmap
-- IN Dimension	width
-- IN Dimension	height
-- IN Maybe Int	x_hot = -1
-- IN Maybe Int	y_hot = -1
-- POST: RETVAL == BitmapSuccess

-- omitted
-- IMPURE void	XReadBitmapFile(display, d, filename, bitmap, width, height, x_hot, y_hot) RAISES Either
-- RETURNTYPE	BitmapFileStatus
-- GLOBAL ERROR BitmapFileStatus	RETVAL
-- IN Display*	display
-- IN Drawable	d
-- IN String	filename
-- OUT Pixmap	bitmap
-- OUT Dimension	width
-- OUT Dimension	height
-- OUT Int		x_hot RAISES Maybe IF x_hot == -1
-- OUT Int		y_hot RAISES Maybe IF x_hot == -1
-- POST: RETVAL == BitmapSuccess

-- XCreateBitmapFromData omitted (awkward looking type)
-- XReadBitmapFileData omitted (awkward looking type)


----------------------------------------------------------------
-- Keycodes
----------------------------------------------------------------

%fun XDisplayKeycodes :: Display -> (Int,Int)
%code XDisplayKeycodes(arg1,&res1,&res2) 
%fun XLookupKeysym    :: XKeyEventPtr -> Int -> IO KeySym
%fun XKeycodeToKeysym :: Display -> KeyCode -> Int -> IO KeySym
%fun XKeysymToKeycode :: Display -> KeySym  -> IO KeyCode
%fun XKeysymToString  :: KeySym -> String
%fun XStringToKeysym  :: String -> KeySym

-- I should not need to do this: the argument to maybeT below _should_
-- be treated as a C expression.
%const KeySym [NoSymbol]

-- I tried to allocate the buffer below on the stack, but that was not a
-- good idea since the unmarshalling takes place in another stack frame.
-- I could use malloc, but then it seems tricky to free _after_ unmarshalling.
-- (%end free(buf) does not work: frees buffer too early.)
-- Making the buffer static works, but is potentially not thread safe.
-- But: the graphics library does not use X in a threadsafe way anyway
-- (does not import/call XInitThreads) and GHC is single threaded as far as
-- the external world is concerned(?).
-- OK, go static for now. Introduce a mutex if needs be.
-- XLookupString cannot handle compose, it seems.
%fun XLookupString :: XKeyEventPtr -> IO (Maybe KeySym, String)
%call (xKeyEventPtr e)
%code static char buf[100];
%     int n;
%     KeySym ks;
%     n = XLookupString(e, buf, 100, &ks, NULL);
%result (maybeT {noSymbol}(keySym ks), stringLen buf n) -- I meant "NoSymbol".

-- XQueryKeymap omitted
-- XRebindKeysym omitted
-- XDeleteModifiermapEntry omitted
-- XInsertModifiermapEntry omitted
-- XNewModifiermap omitted
-- XFreeModifiermap omitted
-- XSetModifierMapping omitted
-- XGetModifierMapping omitted
-- XGetKeyboardMapping omitted

----------------------------------------------------------------
-- Image
----------------------------------------------------------------

-- XCreateImage omitted
-- XInitImage omitted
-- XGetImage omitted
-- XPutImage omitted
-- XGetSubImage omitted

----------------------------------------------------------------
-- Icons
----------------------------------------------------------------

%fun XGetIconName :: Display -> Window -> IO String
%code Status err = XGetIconName(arg1,arg2,&res1) 
%fail { Success != err }{ BadStatus(err,XGetIconName) }

%fun XSetIconName :: Display -> Window -> String -> IO ()

----------------------------------------------------------------
-- Cursors
----------------------------------------------------------------

%fun XDefineCursor       :: Display -> Window -> Cursor -> IO ()
%fun XUndefineCursor     :: Display -> Window -> IO ()

%fun XCreatePixmapCursor :: Display -> Pixmap -> Pixmap -> Color -> Color -> Dimension -> Dimension -> IO Cursor
%code res1 = XCreatePixmapCursor(arg1,arg2,arg3,&arg4,&arg5,arg6,arg7) 

%fun XCreateGlyphCursor  :: Display -> Font   -> Font -> Glyph -> Glyph -> Color -> Color -> IO Cursor
%code res1 = XCreateGlyphCursor(arg1,arg2,arg3,arg4,arg5,&arg6,&arg7) 

%fun XCreateFontCursor   :: Display -> Glyph  -> IO Cursor
%fun XFreeCursor         :: Display -> Font   -> IO ()
%fun XRecolorCursor      :: Display -> Cursor -> Color -> Color -> IO ()
%code XRecolorCursor(arg1,arg2,&arg3,&arg4) 

----------------------------------------------------------------
-- Window Manager stuff
----------------------------------------------------------------

-- XConfigureWMWindow omitted (can't find documentation)
-- XReconfigureWMWindow omitted (can't find documentation)
-- XWMGeometry omitted (can't find documentation)
-- XGetWMColormapWindows omitted (can't find documentation)
-- XSetWMColormapWindows omitted (can't find documentation)
-- XGetWMProtocols omitted

-- AC, 1/9/2000: Added definition for XSetWMProtocols
%fun XSetWMProtocols :: Display -> Window -> ListAtom -> IO ()
%call (display arg1) (window arg2) (listAtom arg3 arg3_size)
%code XSetWMProtocols(arg1,arg2,arg3,arg3_size)
%end free(arg3)


----------------------------------------------------------------
-- Set Window Attributes
----------------------------------------------------------------

-- The following code is based on what you get from the %ptr declaration.
-- ToDo: generate this kind of stuff automatically.

%fun allocXSetWindowAttributes :: IO XSetWindowAttributesPtr
%code res1 = (void*)malloc(sizeof(XSetWindowAttributes))


-- toXSetWindowAttributesPtr   x = x 
-- fromXSetWindowAttributesPtr x = x
-- 
-- instance Pointer XSetWindowAttributesPtr where
--   toPtr     = fromXSetWindowAttributesPtr
--   fromPtr   = toXSetWindowAttributesPtr
--   alloc     = malloc sizeofXSetWindowAttributes
--   plus p x  = fromPtr (plusPtr (toPtr p) (x * sizeofXSetWindowAttributes))
--   minus p q = (toPtr p `minusPtr` toPtr q) `div` sizeofXSetWindowAttributes
-- %}}
-- 
-- %type : XSetWindowAttributesPtr : XSetWindowAttributes* arg1 : %pack(Ptr,arg1);% : %unpack(Ptr,arg1,arg2);%
-- 
-- %const Int sizeofXSetWindowAttributes = sizeof(XSetWindowAttributes)

---------------- Access to individual fields ----------------

%fun set_background_pixmap :: XSetWindowAttributesPtr -> Pixmap -> IO ()
%code arg1->background_pixmap = arg2;

%fun set_background_pixel :: XSetWindowAttributesPtr -> Pixel -> IO ()
%code arg1->background_pixel = arg2;

%fun set_border_pixmap :: XSetWindowAttributesPtr -> Pixmap -> IO ()
%code arg1->border_pixmap = arg2;

%fun set_border_pixel :: XSetWindowAttributesPtr -> Pixel -> IO ()
%code arg1->border_pixel = arg2;

%fun set_bit_gravity :: XSetWindowAttributesPtr -> BitGravity -> IO ()
%code arg1->bit_gravity = arg2;

%fun set_win_gravity :: XSetWindowAttributesPtr -> WindowGravity -> IO ()
%code arg1->win_gravity = arg2;

%fun set_backing_store :: XSetWindowAttributesPtr -> BackingStore -> IO ()
%code arg1->backing_store = arg2;

%fun set_backing_planes :: XSetWindowAttributesPtr -> Pixel -> IO ()
%code arg1->backing_planes = arg2;

%fun set_backing_pixel :: XSetWindowAttributesPtr -> Pixel -> IO ()
%code arg1->backing_pixel = arg2;

%fun set_save_under :: XSetWindowAttributesPtr -> Bool -> IO ()
%code arg1->save_under = arg2;

%fun set_event_mask :: XSetWindowAttributesPtr -> EventMask -> IO ()
%code arg1->event_mask = arg2;

%fun set_do_not_propagate_mask :: XSetWindowAttributesPtr -> EventMask -> IO ()
%code arg1->do_not_propagate_mask = arg2;

%fun set_override_redirect :: XSetWindowAttributesPtr -> Bool -> IO ()
%code arg1->override_redirect = arg2;

%fun set_colormap :: XSetWindowAttributesPtr -> Colormap -> IO ()
%code arg1->colormap = arg2;

%fun set_cursor :: XSetWindowAttributesPtr -> Cursor -> IO ()
%code arg1->cursor = arg2;

----------------------------------------------------------------
-- Drawing
----------------------------------------------------------------

%fun XDrawPoint      :: Display -> Drawable -> GC -> Position -> Position -> IO ()

%fun XDrawPoints     :: Display -> Drawable -> GC -> ListPoint -> CoordinateMode -> IO ()
%call (display arg1) (drawable arg2) (gC arg3) (listPoint arg4 arg4_size) (coordinateMode arg5)
%code XDrawPoints(arg1,arg2,arg3,arg4,arg4_size,arg5) 
%end free(arg4)

%fun XDrawLine       :: Display -> Drawable -> GC -> Position -> Position -> Position -> Position -> IO ()

%fun XDrawLines      :: Display -> Drawable -> GC -> ListPoint -> CoordinateMode -> IO ()
%call (display arg1) (drawable arg2) (gC arg3) (listPoint arg4 arg4_size) (coordinateMode arg5)
%code XDrawLines(arg1,arg2,arg3,arg4,arg4_size,arg5) 
%end free(arg4)

%fun XDrawSegments   :: Display -> Drawable -> GC -> ListSegment -> IO ()                
%call (display arg1) (drawable arg2) (gC arg3) (listSegment arg4 arg4_size)
%code XDrawSegments(arg1,arg2,arg3,arg4,arg4_size) 
%end free(arg4)

%fun XDrawRectangle  :: Display -> Drawable -> GC -> Position -> Position -> Dimension -> Dimension -> IO ()

%fun XDrawRectangles :: Display -> Drawable -> GC -> ListRectangle -> IO ()              
%call (display arg1) (drawable arg2) (gC arg3) (listRectangle arg4 arg4_size)
%code XDrawRectangles(arg1,arg2,arg3,arg4,arg4_size) 
%end free(arg4)

%fun XDrawArc        :: Display -> Drawable -> GC -> Position -> Position -> Dimension -> Dimension -> Int -> Int -> IO ()

%fun XDrawArcs       :: Display -> Drawable -> GC -> ListArc -> IO ()                    
%call (display arg1) (drawable arg2) (gC arg3) (listArc arg4 arg4_size)
%code XDrawArcs(arg1,arg2,arg3,arg4,arg4_size) 
%end free(arg4)

%fun XFillRectangle  :: Display -> Drawable -> GC -> Position -> Position -> Dimension -> Dimension -> IO ()

%fun XFillRectangles :: Display -> Drawable -> GC -> ListRectangle -> IO ()              
%call (display arg1) (drawable arg2) (gC arg3) (listRectangle arg4 arg4_size)
%code XFillRectangles(arg1,arg2,arg3,arg4,arg4_size) 
%end free(arg4)

%fun XFillPolygon    :: Display -> Drawable -> GC -> ListPoint -> PolygonShape -> CoordinateMode -> IO ()
%call (display arg1) (drawable arg2) (gC arg3) (listPoint arg4 arg4_size) (polygonShape arg5) (coordinateMode arg6)
%code XFillPolygon(arg1,arg2,arg3,arg4,arg4_size,arg5,arg6) 
%end free(arg4)

%fun XFillArc        :: Display -> Drawable -> GC -> Position -> Position -> Dimension -> Dimension -> Int -> Int -> IO ()

%fun XFillArcs       :: Display -> Drawable -> GC -> ListArc -> IO ()                    
%call (display arg1) (drawable arg2) (gC arg3) (listArc arg4 arg4_size)
%code XFillArcs(arg1,arg2,arg3,arg4,arg4_size) 
%end free(arg4)

%fun XCopyArea       :: Display -> Drawable -> Drawable -> GC -> Position -> Position -> Dimension -> Dimension -> Position -> Position -> IO ()
%fun XCopyPlane      :: Display -> Drawable -> Drawable -> GC -> Position -> Position -> Dimension -> Dimension -> Position -> Position -> Pixel -> IO ()

-- draw characters over existing background
%fun XDrawString     :: Display -> Drawable -> GC -> Position -> Position -> String -> IO () 
%call (display arg1) (drawable arg2) (gC arg3) (position arg4) (position arg5) (stringLen arg6 arg6_size)
%code XDrawString(arg1,arg2,arg3,arg4,arg5,arg6,arg6_size) 
%end free(arg6)

-- draw characters over a blank rectangle of current background colour
%fun XDrawImageString :: Display -> Drawable -> GC -> Position -> Position -> String -> IO ()
%call (display arg1) (drawable arg2) (gC arg3) (position arg4) (position arg5) (stringLen arg6 arg6_size)
%code XDrawImageString(arg1,arg2,arg3,arg4,arg5,arg6,arg6_size) 
%end free(arg6)

-- XDrawString16 omitted (16bit chars not supported)
-- XDrawImageString16 omitted (16bit chars not supported)
-- XDrawText omitted (XTextItem not supported)
-- XDrawText16 omitted (XTextItem not supported)

----------------------------------------------------------------
-- Cut and paste buffers
----------------------------------------------------------------

%fun XStoreBuffer :: Display -> String -> Int -> IO ()
%call (display arg1) (stringLen arg2 arg2_size) (int arg3)
%code Status err = XStoreBuffer(arg1,arg2,arg2_size,arg3);
%fail { Success != err }{ BadStatus(err,XStoreBuffer) }

%fun XStoreBytes :: Display -> String -> IO ()
%call (display arg1) (stringLen arg2 arg2_size) 
%code Status err = XStoreBytes(arg1,arg2,arg2_size);
%fail { Success != err }{ BadStatus(err,XStoreBytes) }

%fun XFetchBuffer :: Display -> Int -> IO String
%code 
%  int nbytes;
%  char* res1 = XFetchBuffer(arg1, &nbytes, arg2);
%fail { res1 != NULL }{ NullPtr(XFetchBuffer) }
%result (stringLen res1 nbytes)
%end XFree(res1)

%fun XFetchBytes :: Display -> IO String
%code 
%  int nbytes;
%  char* res1 = XFetchBytes(arg1, &nbytes);
%fail { res1 != NULL }{ NullPtr(XFetchBytes) }
%result (stringLen res1 nbytes)
%end XFree(res1)

%fun XRotateBuffers :: Display -> Int -> IO ()
%code Status err = XRotateBuffers(arg1,arg2)
%fail { Success != err }{ BadStatus(err,XRotateBuffers) }

----------------------------------------------------------------
-- Window properties
----------------------------------------------------------------

%fun XSetTextProperty :: Display -> Window -> String -> Atom -> IO ()
%call (display arg1) (window arg2) (stringLen arg3 arg3_size) (atom arg4)
%code
%  XTextProperty p = { arg3, XA_STRING, 8, arg3_size };
%  XSetTextProperty(arg1,arg2,&p,arg4);
%end free(arg3)

-- %fun XSetStandardProperties :: Display -> Window -> String -> String -> Pixmap -> [String] -> XSizeHints -> IO ()
-- %code Status err = XSetStandardProperties(arg1,arg2,arg3,arg4,arg5,arg6,arg6_size,&arg7)
-- %fail { Success != err }{ BadStatus(err,XSetStandardProperties) }

----------------------------------------------------------------
-- End
----------------------------------------------------------------
