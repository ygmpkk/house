module Win32Menu 
{-
       (
         MenuName
       , checkMenuItem
       , checkMenuRadioItem
       , createMenu
       , createPopupMenu
       , deleteMenu
       , destroyMenu
       , drawMenuBar
       , enableMenuItem
       , getMenu
       , getMenuDefaultItem
       , getMenuItemCount
       , getMenuItemID
       , getMenuItemInfo
       , getMenuItemRect
       , getMenuState
       , getSubMenu
       , getSystemMenu
       , hiliteMenuItem
       , insertMenuItem
       , isMenu
       , loadMenu
       , menuItemFromPoint
       , setMenu
       , setMenuDefaultItem
       , setMenuItemBitmaps
       , setMenuItemInfo
       , trackPopupMenu
       , trackPopupMenuEx
       
       , GMDIFlag(..)
       , MenuItem(..)
       , MenuFlag(..)
       , MenuState(..)
       , TrackMenuFlag(..)
       , SystemMenuCommand(..)

         -- Obsolete:
       , appendMenu
       , insertMenu
       , modifyMenu
       , removeMenu
       
       ) -} where

import StdDIS
  
import Win32Types
import GDITypes

%#include <windows.h>
%#include "errors.h"
%#include "win32debug.h"
%#include "finalizers.h"

type MenuName = LPCSTR

%dis menuName x = lPCSTR x

%dis mbMenuName x  = maybeT {0} (menuName x)

%fun  CheckMenuItem      :: HMENU -> MenuItem -> MenuFlag -> IO Bool
%code DWORD rv = CheckMenuItem(arg1,arg2,arg3);
%fail {rv == (DWORD)-1} { ErrorString("CheckMenuItem"); }
%result (bool {rv == MF_CHECKED})

%fun CheckMenuRadioItem :: HMENU -> MenuItem -> MenuItem -> MenuItem -> MenuFlag -> IO ()
%code BOOL success = CheckMenuRadioItem(arg1,arg2,arg3,arg4,arg5);
%fail {!success} { ErrorString("CheckMenuRadioItem"); }

%fun CreateMenu      :: IO HMENU
%fail {res1==NULL} { ErrorString("CreateMenu"); }

%fun CreatePopupMenu :: IO HMENU
%fail {res1==NULL} { ErrorString("CreatePopupMenu"); }

%fun DrawMenuBar :: HWND -> IO ()
%code BOOL success = DrawMenuBar(arg1);
%fail {!success} { ErrorString("DrawMenuBar") }

type MenuState = MenuFlag
%dis menuState x = uINT x

%fun EnableMenuItem     :: HMENU -> MenuItem -> MenuFlag -> IO MenuState
%code DWORD res1 = EnableMenuItem(arg1,arg2,arg3);
%fail {res1 == (DWORD)-1} { ErrorString("EnableMenuItem"); }

type GMDIFlag = UINT
%dis gMDIFlag x = uINT x

type MenuFlag = UINT
%dis menuFlag x = uINT x

%const GMDIFlag [ GMDI_USEDISABLED, GMDI_GOINTOPOPUPS ]
%const MenuFlag [ MF_BYCOMMAND, MF_BYPOSITION ]

type MenuItem = UINT
%dis menuItem x = uINT x

%const MenuItem
% [ MF_INSERT           
% , MF_CHANGE           
% , MF_APPEND           
% , MF_DELETE           
% , MF_REMOVE           
% , MF_USECHECKBITMAPS  
% , MF_POPUP            
% , MF_SYSMENU          
% , MF_HELP             
% , MF_MOUSESELECT      
% , MF_END              -- Obsolete -- only used by old RES files
% ]

%const MenuFlag
% [ MFT_STRING          
% , MFT_BITMAP          
% , MFT_MENUBARBREAK    
% , MFT_MENUBREAK       
% , MFT_OWNERDRAW       
% , MFT_RADIOCHECK      
% , MFT_SEPARATOR       
% , MFT_RIGHTORDER      
% , MFT_RIGHTJUSTIFY    
% ]


%const MenuState
% [ MFS_GRAYED          
% , MFS_DISABLED        -- == MFS_GRAYED
% , MFS_CHECKED         
% , MFS_HILITE          
% , MFS_ENABLED         
% , MFS_UNCHECKED       
% , MFS_UNHILITE        
% , MFS_DEFAULT         
% ]

type TrackMenuFlag = UINT
%dis trackMenuFlag x = uINT x

%const TrackMenuFlag
% [ TPM_LEFTBUTTON  
% , TPM_RIGHTBUTTON 
% , TPM_LEFTALIGN   
% , TPM_CENTERALIGN 
% , TPM_RIGHTALIGN  
% , TPM_TOPALIGN    
% , TPM_VCENTERALIGN
% , TPM_BOTTOMALIGN 
% , TPM_HORIZONTAL     -- Horz alignment matters more 
% , TPM_VERTICAL       -- Vert alignment matters more
% , TPM_NONOTIFY       -- Don't send any notification msgs
% , TPM_RETURNCMD   
% ]

type SystemMenuCommand = UINT
%dis systemMenuCommand x = uINT x

%const SystemMenuCommand
% [ SC_SIZE         
% , SC_MOVE         
% , SC_MINIMIZE     
% , SC_MAXIMIZE     
% , SC_NEXTWINDOW   
% , SC_PREVWINDOW   
% , SC_CLOSE        
% , SC_VSCROLL      
% , SC_HSCROLL      
% , SC_MOUSEMENU    
% , SC_KEYMENU      
% , SC_ARRANGE      
% , SC_RESTORE      
% , SC_TASKLIST     
% , SC_SCREENSAVE   
% , SC_HOTKEY       
% , SC_DEFAULT      
% , SC_MONITORPOWER 
% , SC_CONTEXTHELP  
% , SC_SEPARATOR    
% ]

%fun IsMenu        :: HMENU -> IO Bool       	   
%code BOOL success = IsMenu(arg1)
%result (bool {success})

%fun GetSystemMenu :: HWND  -> Bool ->     IO MbHMENU

%fun GetMenu       :: HWND  ->             IO MbHMENU

%fun GetMenuDefaultItem :: HMENU -> Bool -> GMDIFlag -> IO MenuItem
%code int res1 = GetMenuDefaultItem(arg1,arg2,arg3);
%fail {res1==-1} { ErrorString("GetMenuDefaultItem") }

%fun GetMenuState :: HMENU -> MenuItem -> MenuFlag -> IO MenuState
%code UINT res = GetMenuState(arg1,arg2,arg3);
%fail {(int)res=-1} { ErrorString("GetMenuState") }
%result (menuState res)


%fun GetSubMenu    :: HMENU -> MenuItem -> IO MbHMENU

%fun SetMenu       :: HWND -> HMENU -> IO ()
%code BOOL success = SetMenu(arg1,arg2);
%fail {!success} { ErrorString("SetMenu") }

%fun GetMenuItemCount   :: HMENU -> IO Int
%code int res1 = GetMenuItemCount(arg1);
%fail {res1==-1} { ErrorString("GetMenuItemCount") }

type MenuID = UINT
%dis menuID x = uINT x

%fun GetMenuItemID      :: HMENU -> MenuItem -> IO MenuID
%code UINT res1 = GetMenuItemCount(arg1);
%fail {res1==(UINT)-1} { ErrorString("GetMenuItemID") }

data MenuItemInfo
 = MenuItemInfo  {
      menuItemType    :: MenuFlag,
      menuItemState   :: MenuState,
      menuItemID      :: UINT,
      menuItemSubMenu :: HMENU,
      menuItemBitmapChecked :: HBITMAP,
      menuItemBitmapUnchecked :: HBITMAP,
      menuItemData    :: DWORD,
      menuItemTypeData :: String
   }

%dis menuItemInfo x = << marshall_menuItemInfo / unmarshall_menuItemInfo >> (addr x)


marshall_menuItemInfo :: MenuItemInfo -> IO Addr
marshall_menuItemInfo (MenuItemInfo miType 
				    miState
				    miItemID
				    miSubMenu
				    miChecked
				    miUnchecked
				    miData
				    miTypeData) = do
  ptr <- mallocMenuItemInfo
  pstr <- marshall_string_ miTypeData
  assignMenuItemInfo ptr
                     miType miState miItemID miSubMenu 
                     miChecked miUnchecked miData pstr (length miTypeData)
  return ptr

unmarshall_menuItemInfo :: Addr -> IO MenuItemInfo
unmarshall_menuItemInfo ptr = do
   mi <- unravelItemInfo ptr
   free ptr
   return mi

%fun unravelItemInfo :: Addr -> IO MenuItemInfo
%code MENUITEMINFO* res1=arg1;
%result (MenuItemInfo (uINT {res1->fType}) (uINT {res1->fState}) (uINT {res1->wID}) (hMENU {res1->hSubMenu}) (hBITMAP {res1->hbmpChecked}) (hBITMAP {res1->hbmpUnchecked}) (dWORD {res1->dwItemData}) (stringLen {res1->dwTypeData} {res1->cch}))

%fun mallocMenuItemInfo :: IO Addr
%code mp = (MENUITEMINFO*) malloc(sizeof(MENUITEMINFO));
%     if (mp!=NULL) mp->cbSize = sizeof(MENUITEMINFO);
%fail {mp==NULL} { MallocError("mallocMenuItemInfo") }
%result (addr ({MENUITEMINFO*} mp))

%fun assignMenuItemInfo :: Addr -> UINT -> UINT -> UINT -> HMENU -> HBITMAP -> HBITMAP -> DWORD -> Addr -> Int -> IO ()
%call (addr arg1) (uINT arg2) (uINT arg3) (uINT arg4) (hMENU arg5) (hBITMAP arg6) (hBITMAP arg7) (dWORD arg8) (addr arg9) (int arg10)
%code MENUITEMINFO* ptr;
%     ptr=(MENUITEMINFO*)arg1;
%     ptr->fType         = arg2;
%     ptr->fState        = arg3;
%     ptr->wID           = arg4;
%     ptr->hSubMenu      = arg5;
%     ptr->hbmpChecked   = arg6;
%     ptr->hbmpUnchecked = arg7;
%     ptr->dwItemData    = arg8;
%     ptr->dwTypeData    = arg9;
%     ptr->cch           = arg10;

type MenuItemMask = UINT
%dis menuItemMask x = uINT x

%const MenuItemMask
% [ MIIM_CHECKMARKS
% , MIIM_DATA
% , MIIM_ID
% , MIIM_STATE
% , MIIM_SUBMENU
% , MIIM_TYPE
% ]

%fun  GetMenuItemInfo    :: HMENU -> MenuItem -> Bool -> MenuItemMask -> IO MenuItemInfo
%call (hMENU arg1) (menuItem arg2) (bool arg3) (menuItemMask arg4)
%code MENUITEMINFO* mi_info;
%     BOOL success;
%     mi_info = malloc(sizeof(MENUITEMINFO));
%     if (mi_info == NULL) {
%        success = FALSE;
%     } else {
%        mi_info->cbSize = sizeof(MENUITEMINFO);
%        mi_info->fMask  = arg4;
%        success = GetMenuItemInfo(arg1,arg2,arg3,mi_info);
%     }
%fail {!success} { ErrorString("GetMenuItemInfo") }
%result (menuItemInfo {mi_info})

%fun GetMenuItemRect :: HWND -> HMENU -> UINT -> IO RECT
%code RECT r; BOOL success = GetMenuItemRect(arg1,arg2,arg3,&r);
%fail {!success} { ErrorString("GetMenuItemRect") }
%result (rect {r})

%fun  HiliteMenuItem :: HWND  -> HMENU -> MenuItem -> MenuFlag -> IO Bool
%code BOOL success = HiliteMenuItem(arg1,arg2,arg3,arg4);
%result (bool {success})

%fun InsertMenuItem :: HMENU -> MenuItem -> Bool -> MenuItemInfo -> IO ()
%code BOOL success = InsertMenuItem(arg1,arg2,arg3,arg4);
%fail {!success} { ErrorString("InsertMenuItem") }

%dis menu x = addr ({LPCSTR} x)
type Menu = LPCSTR
-- intToMenu :: Int -> Menu
-- intToMenu i = makeIntResource (toWord i)

%fun LoadMenu         :: MbHINSTANCE -> Menu -> IO HMENU
%fail { res1 == 0 } { ErrorString("LoadMenu") }

-- Dealing with mappings to/from structs is a pain in GC,
-- so we'll leave this one out for now.
-- %fun LoadMenuIndirect :: MenuTemplate -> IO HMENU

%fun MenuItemFromPoint :: HWND -> HMENU -> POINT -> IO UINT
%call (hWND arg1) (hMENU arg2) (declare {POINT} arg3 in (point arg3))
%code UINT res1=MenuItemFromPoint(arg1,arg2,arg3)

%fun SetMenuDefaultItem :: HMENU -> MenuItem -> Bool -> IO ()
%code BOOL success = SetMenuDefaultItem(arg1,arg2,arg3);
%fail {!success} { ErrorString("SetMenuDefaultItem") }

%fun SetMenuItemBitmaps :: HMENU -> MenuItem -> MenuFlag -> HBITMAP -> HBITMAP -> IO ()
%code BOOL success = SetMenuItemBitmaps(arg1,arg2,arg3,arg4,arg5);
%fail {!success} { ErrorString("SetMenuItemBitmaps") }

%fun DestroyMenu :: HMENU -> IO ()
%code BOOL success = DestroyMenu(arg1);
%fail {!success} { ErrorString("DestroyMenu") }

%fun DeleteMenu  :: HMENU -> MenuItem -> MenuFlag -> IO ()
%code BOOL success = DeleteMenu(arg1,arg2,arg3);
%fail {!success} { ErrorString("DeleteMenu") }

%fun  SetMenuItemInfo    :: HMENU -> MenuItem -> Bool -> MenuItemMask -> MenuItemInfo -> IO ()
%call (hMENU arg1) (menuItem arg2) (bool arg3) (menuItemMask arg4) (menuItemInfo arg5)
%code BOOL success;
%     ((MENUITEMINFO*)arg5)->fMask = arg4;
%     success = SetMenuItemInfo(arg1,arg2,arg3,arg5);
%fail {!success} { ErrorString("SetMenuItemInfo") }

%fun TrackPopupMenu :: HMENU -> TrackMenuFlag -> Int -> Int -> HWND -> RECT -> IO ()
%call (hMENU arg1) (trackMenuFlag arg2) (int arg3) (int arg4) (hWND arg5) (declare {RECT} arg6 in (rect arg6))
%code BOOL success = TrackPopupMenu(arg1,arg2,arg3,arg4,0,arg5,&arg6);
%fail {!success} { ErrorString("TrackPopupMenu") }

%fun TrackPopupMenuEx :: HMENU -> TrackMenuFlag -> Int -> Int -> HWND -> MbLPRECT -> IO ()
%code TPMPARAMS* ptpmp;
%     BOOL success;
%     if (arg6 == NULL) 
%        ptpmp = NULL;
%     else {
%        ptpmp = malloc(sizeof(TPMPARAMS));
%        if (ptpmp != NULL) {
%           ptpmp->cbSize=sizeof(TPMPARAMS);
%           ptpmp->rcExclude.left  = arg6->left;
%           ptpmp->rcExclude.top   = arg6->top;
%           ptpmp->rcExclude.right = arg6->right;
%           ptpmp->rcExclude.bottom = arg6->bottom;
%       }
%     }
%     success = TrackPopupMenuEx(arg1,arg2,arg3,arg4,arg5,ptpmp);
%fail {!success} { ErrorString("TrackPopupMenuEx") }



%fun AppendMenu  :: HMENU -> MenuFlag -> MenuID -> String -> IO ()
%code BOOL success = AppendMenu(arg1,arg2,arg3,arg4);
%fail {!success} { ErrorString("AppendMenu") }

%fun InsertMenu  :: HMENU -> MenuItem -> MenuFlag -> MenuID -> String -> IO ()
%code BOOL success = InsertMenu(arg1,arg2,arg3,arg4,arg5);
%fail {!success} { ErrorString("InsertMenu") }

%fun ModifyMenu  :: HMENU -> MenuItem -> MenuFlag -> MenuID -> String -> IO ()
%code BOOL success = ModifyMenu(arg1,arg2,arg3,arg4,arg5);
%fail {!success} { ErrorString("ModifyMenu") }

%fun RemoveMenu  :: HMENU -> MenuItem -> MenuFlag -> IO ()
%code BOOL success = RemoveMenu(arg1,arg2,arg3);
%fail {!success} { ErrorString("RemoveMenu") }


----------------------------------------------------------------
-- End
----------------------------------------------------------------
