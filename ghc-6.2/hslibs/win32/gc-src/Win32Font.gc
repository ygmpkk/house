module Win32Font
{-
	( CharSet
	, PitchAndFamily
	, OutPrecision
	, ClipPrecision
	, FontQuality
	, FontWeight

	, createFont, deleteFont

	, StockFont, getStockFont
	, oEM_FIXED_FONT, aNSI_FIXED_FONT, aNSI_VAR_FONT, sYSTEM_FONT
	, dEVICE_DEFAULT_FONT, sYSTEM_FIXED_FONT
	) where
-}
	where

import StdDIS
import Win32Types
import GDITypes

%#include <windows.h>
%#include "errors.h"
%#include "win32debug.h"

----------------------------------------------------------------
-- Types
----------------------------------------------------------------

type CharSet        = UINT
type PitchAndFamily = UINT
type OutPrecision   = UINT
type ClipPrecision  = UINT
type FontQuality    = UINT
type FontWeight     = Word32
type FaceName       = String

%dis hFONT          x = addr ({HFONT} x)
%dis charSet        x = uINT x
%dis pitchAndFamily x = uINT x
%dis outPrecision   x = uINT x
%dis clipPrecision  x = uINT x
%dis fontQuality    x = uINT x
%dis fontWeight     x = word32 x
%dis faceName       x = string x

-- # A FaceName is a string no more that LF_FACESIZE in length
-- # (including null terminator).
-- %const Int LF_FACESIZE         # == 32
-- %sentinel_array : FaceName : CHAR : char : $0 = '\0' : ('\0' == $0) : LF_FACESIZE

----------------------------------------------------------------
-- Constants
----------------------------------------------------------------

%const CharSet 
% [ ANSI_CHARSET
% , DEFAULT_CHARSET
% , SYMBOL_CHARSET
% , SHIFTJIS_CHARSET
% , HANGEUL_CHARSET
% , CHINESEBIG5_CHARSET
% , OEM_CHARSET
% ]

%const PitchAndFamily
% [ DEFAULT_PITCH
% , FIXED_PITCH
% , VARIABLE_PITCH
% , FF_DONTCARE
% , FF_ROMAN
% , FF_SWISS
% , FF_MODERN
% , FF_SCRIPT
% , FF_DECORATIVE
% , familyMask = { 0xF0 }
% , pitchMask = { 0x0F }
% ]

%const OutPrecision 
% [ OUT_DEFAULT_PRECIS
% , OUT_STRING_PRECIS
% , OUT_CHARACTER_PRECIS
% , OUT_STROKE_PRECIS
% , OUT_TT_PRECIS
% , OUT_DEVICE_PRECIS
% , OUT_RASTER_PRECIS
% , OUT_TT_ONLY_PRECIS
% ]

%const ClipPrecision 
% [ CLIP_DEFAULT_PRECIS
% , CLIP_CHARACTER_PRECIS
% , CLIP_STROKE_PRECIS
% , CLIP_MASK
% , CLIP_LH_ANGLES
% , CLIP_TT_ALWAYS
% , CLIP_EMBEDDED
% ]

%const FontQuality [DEFAULT_QUALITY,DRAFT_QUALITY,PROOF_QUALITY]

%const FontWeight 
% [ FW_DONTCARE
% , FW_THIN
% , FW_EXTRALIGHT
% , FW_LIGHT
% , FW_NORMAL
% , FW_MEDIUM
% , FW_SEMIBOLD
% , FW_BOLD
% , FW_EXTRABOLD
% , FW_HEAVY
% , FW_REGULAR
% , FW_ULTRALIGHT
% , FW_DEMIBOLD
% , FW_ULTRABOLD
% , FW_BLACK
% ]

----------------------------------------------------------------
-- Functions
----------------------------------------------------------------

%fun CreateFont 
%    :: INT -> INT -> INT -> INT 
%    -> FontWeight -> Bool -> Bool -> Bool 
%    -> CharSet -> OutPrecision -> ClipPrecision 
%    -> FontQuality -> PitchAndFamily -> FaceName
%    -> IO HFONT
%fail { res1 == 0 } {ErrorMsg("CreateFont","NullHandle")}
%end free(arg14)

-- test :: IO ()
-- test = do
--   f <- createFont_adr (100,100) 0 False False "Arial"
--   putStrLn "Created first font"
--   f <- createFont_adr (100,100) (-90) False False "Bogus"
--   putStrLn "Created second font"
-- 
-- createFont_adr (width, height) escapement bold italic family = 
--  createFont height width
-- 		     (round (escapement * 1800/pi))
-- 		     0                     -- orientation
-- 		     weight
-- 		     italic False False    -- italic, underline, strikeout
-- 		     aNSI_CHARSET
-- 		     oUT_DEFAULT_PRECIS
-- 		     cLIP_DEFAULT_PRECIS
-- 		     dEFAULT_QUALITY
-- 		     dEFAULT_PITCH
-- 		     family
--  where
--   weight | bold      = fW_BOLD
-- 	    | otherwise = fW_NORMAL


-- missing CreateFontIndirect from WinFonts.ss; GSL ???

%fun deleteFont :: HFONT -> IO ()
%code DeleteObject(arg1);

----------------------------------------------------------------

type StockFont      = WORD
%dis stockFont x    = wORD x

%const StockFont 
% [ OEM_FIXED_FONT
% , ANSI_FIXED_FONT
% , ANSI_VAR_FONT
% , SYSTEM_FONT
% , DEVICE_DEFAULT_FONT
% , SYSTEM_FIXED_FONT
% ]

%fun GetStockFont :: StockFont -> IO HFONT
%code res1 = GetStockObject(arg1);

----------------------------------------------------------------
-- End
----------------------------------------------------------------
