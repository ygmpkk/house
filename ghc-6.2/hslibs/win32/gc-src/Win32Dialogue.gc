{-# OPTIONS -#include "Win32Dialogue_stub.h" #-}
module Win32Dialogue where

import StdDIS
import Win32Types
import GDITypes
import Win32Window
import Win32WinMessage
import Win32Control

%#include <windows.h>
%#include "errors.h"
%#include "win32debug.h"
%#include "diatemp.h"

type DTemplate = LPCTSTR
%dis dTemplate x = (lPCTSTR x)

type DTemplateMem = Addr
%dis dTemplateMem x = (addr x)

type DialogStyle = WindowStyle
%dis dialogStyle x = windowStyle x

mkDialogTemplate :: String -> IO DTemplate
mkDialogTemplate = marshall_string_

type ResourceID = Int
%dis resourceID x = int x

%fun mkResource :: ResourceID -> IO Addr
%code res1=MAKEINTRESOURCE(arg1);

mkDialogTemplateFromResource :: Int -> IO DTemplate
mkDialogTemplateFromResource = mkResource

type DialogProc = HWND -> WindowMessage -> WPARAM -> LPARAM -> IO Int

%dis dialogProc x = dialogProc_ (addr x)

marshall_dialogProc_ :: DialogProc -> IO Addr
marshall_dialogProc_ cl = fmap funPtrToAddr (mkDialogClosure cl)

-- ToDo: this was declared as a stdcall not a ccall - let's
-- hope and pray that it makes no difference - ADR
foreign import ccall "wrapper" mkDialogClosure :: DialogProc -> IO (FunPtr DialogProc)
--marshall_dialogProc_ x = return nullAddr

%fun DialogBox :: HINSTANCE -> DTemplate -> MbHWND -> DialogProc -> IO Int
%call (hINSTANCE hInst) (dTemplate lpTemp) (mbHWND hWndParent) (dialogProc diaFun)
%safecode res1 = DialogBox(hInst,lpTemp,hWndParent,diaFun);
%fail { res1 == (-1) } { ErrorWin("DialogBox") }

%fun DialogBoxParam :: HINSTANCE -> DTemplate -> MbHWND -> DialogProc -> LPARAM -> IO Int
%call (hINSTANCE hInst) (dTemplate lpTemp) (mbHWND hWndParent) (dialogProc diaFun) (lPARAM dwInit)
%safecode res1 = DialogBoxParam(hInst,lpTemp,hWndParent,diaFun,dwInit);
%fail { res1 == (-1) } { ErrorWin("DialogBoxParam") }

%fun DialogBoxIndirect :: HINSTANCE -> DTemplateMem -> MbHWND -> DialogProc -> IO Int
%call (hINSTANCE hInst) (dTemplateMem lpTemp) (mbHWND hWndParent) (dialogProc diaFun)
%safecode res1 = DialogBoxIndirect(hInst,lpTemp,hWndParent,diaFun);
%fail { res1 == (-1) } { ErrorWin("DialogBoxIndirect") }

%fun DialogBoxIndirectParam :: HINSTANCE -> DTemplateMem -> MbHWND -> DialogProc -> LPARAM -> IO Int
%call (hINSTANCE hInst) (dTemplateMem lpTemp) (mbHWND hWndParent) (dialogProc diaFun) (lPARAM dwInit)
%safecode res1 = DialogBoxIndirectParam(hInst,lpTemp,hWndParent,diaFun,dwInit);
%fail { res1 == (-1) } { ErrorWin("DialogBoxIndirectParam") }


data DialogTemplate
 = DialogTemplate 
      Int Int Int Int  -- x, y, cx, cy
      WindowStyle
      DWORD
      (Either ResourceID String)  -- menu
      (Either ResourceID String)  -- class
      (Either ResourceID String)  -- caption
      (Either ResourceID String)  -- fontname
      Int	 		  -- font height
      [DialogControl]

data DialogControl
 = DialogControl
      Int Int Int Int -- x,y, cx, cy
      (Either ResourceID String) -- text
      (Either ResourceID String) -- classname
      WindowStyle
      DWORD
      Int			 -- id

mkDialogFromTemplate :: DialogTemplate -> IO DTemplateMem
mkDialogFromTemplate (DialogTemplate x y cx cy
				     wstyle extstyle
				     mb_menu mb_class caption
				     font font_height
				     controls) = do
  prim_hmenu    <- marshall_res mb_menu
  prim_class    <- marshall_res mb_class
  prim_caption  <- marshall_res caption
  prim_font     <- marshall_res font
  dtemp <- mkDiaTemplate 0 x y cx cy wstyle extstyle 
  			 prim_hmenu prim_class
			 prim_caption prim_font
			 font_height
  mapM_ (addControl dtemp) controls
  getFinalDialog dtemp

pushButtonControl :: Int -> Int -> Int -> Int
		  -> DWORD -> DWORD -> Int
		  -> String
		  -> DialogControl
pushButtonControl x y cx cy style estyle id lab =
  DialogControl x y cx cy (Left 0x0080) (Right lab)
  		(style + bS_DEFPUSHBUTTON) estyle id

labelControl :: Int -> Int -> Int -> Int
	     -> DWORD -> DWORD -> Int
	     -> String
             -> DialogControl
labelControl x y cx cy style estyle id lab =
  DialogControl x y cx cy (Left 0x0082) (Right lab)
  		(style + sS_LEFT) estyle id

listBoxControl :: Int -> Int -> Int -> Int
	       -> DWORD -> DWORD -> Int
	       -> String
               -> DialogControl
listBoxControl x y cx cy style estyle id lab =
  DialogControl x y cx cy (Left 0x0083) (Right lab)
  		(style) estyle id

comboBoxControl :: Int -> Int -> Int -> Int
	       -> DWORD -> DWORD -> Int
	       -> String
               -> DialogControl
comboBoxControl x y cx cy style estyle id lab =
  DialogControl x y cx cy (Left 0x0085) (Right lab)
  		(style) estyle id

editControl :: Int -> Int -> Int -> Int
	       -> DWORD -> DWORD -> Int
	       -> String
               -> DialogControl
editControl x y cx cy style estyle id lab =
  DialogControl x y cx cy (Left 0x0081) (Right lab)
  		(style + eS_LEFT) estyle id

scrollBarControl :: Int -> Int -> Int -> Int
	       -> DWORD -> DWORD -> Int
	       -> String
               -> DialogControl
scrollBarControl x y cx cy style estyle id lab =
  DialogControl x y cx cy (Left 0x0084) (Right lab)
  		(style) estyle id

%fun getFinalDialog :: Addr -> IO DTemplateMem

%fun mkDiaTemplate :: Int -> Int -> Int -> Int -> Int -> WindowStyle -> DWORD -> Addr -> Addr -> Addr -> Addr -> Int -> IO Addr

addControl :: Addr -> DialogControl -> IO ()
addControl dtemp (DialogControl x y cx cy mb_text mb_class
				style exstyle
				id) = do
   prim_text  <- marshall_res mb_text
   prim_class <- marshall_res mb_class
   addDiaControl dtemp prim_text id prim_class style 
  		 x y cx cy exstyle
   return ()

%fun addDiaControl :: Addr -> Addr -> Int -> Addr -> DWORD -> Int -> Int -> Int -> Int -> DWORD -> IO Addr

marshall_res :: Either ResourceID String -> IO Addr
marshall_res (Left r)  = mkResource r
marshall_res (Right s) = toUnicodeStr s

%fun toUnicodeStr :: String -> IO Addr
%code int wlen;
%     LPWSTR wstr;
%     wlen = MultiByteToWideChar(CP_ACP, MB_PRECOMPOSED,arg1,-1,NULL,0);
%     wstr = malloc(sizeof(wchar_t) * wlen);
%     MultiByteToWideChar(CP_ACP, MB_PRECOMPOSED,arg1,-1,wstr,wlen);
%result (addr {wstr})

-- modeless dialogs
%fun CreateDialog :: HINSTANCE -> DTemplate -> MbHWND -> DialogProc -> IO HWND
%call (hINSTANCE hInst) (dTemplate lpTemp) (mbHWND hWndParent) (dialogProc diaFun)
%safecode res1 = CreateDialog(hInst,lpTemp,hWndParent,diaFun);
%fail { res1 == NULL } { ErrorWin("CreateDialog") }

%fun CreateDialogParam :: HINSTANCE -> DTemplate -> MbHWND -> DialogProc -> LPARAM -> IO HWND
%call (hINSTANCE hInst) (dTemplate lpTemp) (mbHWND hWndParent) (dialogProc diaFun) (lPARAM dwInit)
%safecode res1 = CreateDialogParam(hInst,lpTemp,hWndParent,diaFun,dwInit);
%fail { res1 == NULL } { ErrorWin("CreateDialogParam") }

%fun CreateDialogIndirect :: HINSTANCE -> DTemplateMem -> MbHWND -> DialogProc -> IO HWND
%call (hINSTANCE hInst) (dTemplateMem lpTemp) (mbHWND hWndParent) (dialogProc diaFun)
%safecode res1 = CreateDialogIndirect(hInst,lpTemp,hWndParent,diaFun);
%fail { res1 == NULL } { ErrorWin("CreateDialogIndirect") }

%fun CreateDialogIndirectParam :: HINSTANCE -> DTemplateMem -> MbHWND -> DialogProc -> LPARAM -> IO HWND
%call (hINSTANCE hInst) (dTemplateMem lpTemp) (mbHWND hWndParent) (dialogProc diaFun) (lPARAM dwInit)
%safecode res1 = CreateDialogIndirectParam(hInst,lpTemp,hWndParent,diaFun,dwInit);
%fail { res1 == NULL } { ErrorWin("CreateDialogIndirectParam") }

%fun DefDlgProc :: MbHWND -> WindowMessage -> WPARAM -> LPARAM -> IO LRESULT
%safecode res1 = DefDlgProc(arg1,arg2,arg3,arg4);

%fun EndDialog :: HWND -> Int -> IO BOOL
%safecode res1 = EndDialog(arg1,arg2);
%fail { res1 == 0 } { ErrorWin("EndDialog") }

%fun GetDialogBaseUnits :: IO LONG

%fun GetDlgCtrlID :: HWND -> IO Int
%fail { res1 == 0 } { ErrorWin("GetDlgCtrlID") }

%fun GetDlgItem :: HWND -> Int -> IO HWND
%fail { res1 == NULL } { ErrorWin("GetDlgItem") }

%fun GetDlgItemInt :: HWND -> Int -> Bool -> IO Int
%safecode BOOL lpTranslated;
%         res1 = GetDlgItemInt(arg1,arg2,&lpTranslated,arg3);
%fail { lpTranslated != TRUE } { ErrorWin("GetDlgItemInt") }

%fun GetDlgItemText :: HWND -> Int -> Int -> IO String
%safecode LPTSTR buf=malloc(sizeof(TCHAR)*arg3); int res1;
%         if (buf == NULL) { 
%            res1 = 0;
%         } else {
%            res1 = GetDlgItemText(arg1,arg2,buf,arg3);
%        }
%fail { res1 == 0 } { ErrorWin("GetDlgItemInt") }
%result (string {buf})

%fun GetNextDlgGroupItem :: HWND -> HWND -> BOOL -> IO HWND
%fail { res1 == NULL } { ErrorWin("GetNextDlgGroupItem") }

%fun GetNextDlgTabItem :: HWND -> HWND -> BOOL -> IO HWND
%fail { res1 == NULL } { ErrorWin("GetNextDlgTabItem") }

%fun IsDialogMessage :: HWND -> LPMSG -> IO BOOL
%safecode res1=IsDialogMessage(arg1,arg2);

%fun MapDialogRect :: HWND -> LPRECT -> IO ()
%code BOOL res1; 
%     res1 = MapDialogRect(arg1,arg2);
%fail { res1 == 0 } { ErrorWin("MapDialogRect") }

-- No MessageBox* funs in here just yet.

%fun SendDlgItemMessage :: HWND -> Int -> WindowMessage -> WPARAM -> LPARAM -> IO LONG
%safecode res1 = SendDlgItemMessage(arg1,arg2,arg3,arg4,arg5);

%fun SetDlgItemInt :: HWND -> Int -> UINT -> BOOL -> IO ()
%code BOOL res1;
%     res1=SetDlgItemInt(arg1,arg2,arg3,arg4);
%fail { res1 == 0 } { ErrorWin("SetDlgItemInt") }

%fun SetDlgItemText :: HWND -> Int -> String -> IO ()
%safecode BOOL res1;
%         res1 = SetDlgItemText(arg1,arg2,arg3);
%fail { res1 == 0 } { ErrorWin("SetDlgItemText") }

%const WindowStyle 
%  [ DS_3DLOOK
%  , DS_ABSALIGN
%  , DS_CENTER
%  , DS_CENTERMOUSE
%  , DS_CONTEXTHELP
%  , DS_CONTROL
%  , DS_FIXEDSYS
%  , DS_LOCALEDIT
%  , DS_MODALFRAME
%  , DS_NOFAILCREATE
%  , DS_NOIDLEMSG
%  , DS_SETFONT
%  , DS_SETFOREGROUND
%  , DS_SYSMODAL
%  ]

%const WindowMessage
%  [ DM_GETDEFID
%  , DM_REPOSITION
%  , DM_SETDEFID
%  , WM_CTLCOLORDLG
%  , WM_CTLCOLORMSGBOX
%  ]

----------------------------------------------------------------
-- End
----------------------------------------------------------------
