{-P:
import Prelude hiding (putStrLn,putStr,getLine)
-}
import Control.Monad
import Data.List(isSuffixOf)

import Kernel.Debug(v_defaultConsole)
import Kernel.Console
import Kernel.LineEditor
import Kernel.Driver.IA32.Screen
import Kernel.Driver.IA32.VbeGraphics as VBE
import Kernel.Driver.CMOS
import Kernel.Driver.Keyboard
import Kernel.Driver.Mouse(launchMouseDecoder)
import Kernel.Driver.PS2
import Kernel.Driver.IA32.Reboot(reboot)

import qualified Kernel.Driver.NE2000.Test as NE2000(testnet)
import qualified Kernel.Driver.Intel8255x.Test as Intel8255x(testnet)

import Data.Word(Word8,Word32)
import Data.Array.IArray(elems,listArray,(!))
import Data.Array.Unboxed(UArray)
-- import Data.Array.IO(IOUArray,newArray_,writeArray,freeze)

import Kernel.MemRegion

import GIFparser(parseGIFs)
import DescribeGIF


import Kernel.PCI.Probe(probe)
import Kernel.PCI.DevTree(drawTree,findDev)
import Kernel.PCI.ParseVendors

import Net.ClientInterface
import qualified Net.PortNumber as Port
import Net.TFTP_Client(tftpGet,tftpPut)
import qualified Net.IPv4 as IP
import qualified Net.UDP_Client as UDP
import qualified Net.Interface as Net
import Net.PacketParsing(doUnparse)
import Net.Servers(telnetServer,telnet)

-- import AoutUser
-- import UProc
import Kernel.UserProc (execUProc,buildUProc)
import Demo(gadgetsDemo)
import Util.FontDecode(decodeFont)
--import Util.FixedFont(fonts)
import Kernel.GrubModules(pickModule,moduleCount,moduleName,moduleNames,moduleRegion)
import H.Grub as Grub

import H.Monad(H,runH{-trappedRunH-})
import H.Concurrency
import H.Interrupts(enableInterrupts)

--import H.AdHocMem(peekByteOff,minusPtr,castPtr)
import H.MemRegion(peekByteOff)
--import Foreign.C.String(peekCStringLen) -- to be moved to H.AdHocMem

--import L4.H4(osker)
import qualified SimpleExec as DummyToGetItTypechecked
--import GfxBenchmark
import Monad.Util
       
default(Int)

main :: IO ()
main = --trappedRunH mainH
       runH mainH

mainH :: H ()
mainH =
    do enableInterrupts
       forkH idle
       netState <- newMVar Nothing
       pciState <- newMVar (Nothing,Nothing) -- XXX
       shell (netState,pciState)

shell netstate =
  do optgfx <- VBE.initialize
     case optgfx of
       Just gfx ->
         do optfonts <- loadFonts
	    case optfonts of
	      Right fonts -> gfxShell2 netstate gfx fonts
	      _ -> initTextShell netstate -- pointless, not in text mode
       _ -> initTextShell netstate

loadFonts =
  do opti <- pickModule (const done) "/fonts.hf"
     case opti of
       Just i -> Right # (decodeFont =<< moduleRegion i)
       _ -> return (Left "Grub module /fonts.hv is not present")

loadPCITables = 
  do opti <- pickModule (const done) "/pci.ids.gz"
     case opti of
       Just i -> do arr <- regionBytes =<< moduleRegion i 
                    case Kernel.PCI.ParseVendors.parseTables arr of
                      Nothing -> return (Left "pci.ids is invalid.")
                      Just t  -> return (Right t)
       _ -> return (Left "Grub module /pci.ids.gz is not present")

initTextShell netstate =
    do console <- launchConsoleDriver
       putMVar v_defaultConsole console -- for possible debugging
       putString console "Welcome to House!\n\n"
       textShell console netstate =<< kbdChan

kbdChan = launchKeyboardInterpreter =<<
	          launchKeyboardDecoder =<<
		  launchKeyboardDriver

gfxShell2 netstate gfx fonts =
    do --b <- timeIt $ timeLimit 3000 $ gfxBenchmark gfx fonts
       --let msg = "Graphics benchmark result: "
	--	 ++show (1000*n `div` t)++"units/s."
       let msg = ""
       gifss <- loadGifs
       gadgetsDemo gfx fonts gifss (shellWindow msg)
  where
    loadGifs =
       do gifpaths <- filter (".gif" `isSuffixOf`) # moduleNames
	  gifss <- mapM loadGIFs gifpaths
	  return [(path,gifs)|(path,Right gifs)<-zip gifpaths gifss]

    loadGIFs = withModuleRegion (fmap parseGIFs .  regionBytes)
      where
	withModuleRegion action = withModule (action @@ moduleRegion)

	withModule action = maybe notFound action @@ pickModule (const $ return ())
	  where notFound = error "File not found"

    shellWindow msg =
      do dispCh <- newChan
	 kbdCh  <- newChan
	 --threadDelay 1000000 -- microseconds(?)
	 let putStr = writeChan dispCh
	     putStrLn s = putStr s >> putStr "\n"
	     putChar c = putStr [c]
	     getChar = readChan kbdCh
	     getLine = getLine' ""
	     getLine' l = do c <- getChar
			     let echo = putChar c
			     case c of
			       '\n' -> echo >> return (reverse l)
			       '\f' -> echo >> return ""
			       '\b' -> if null l
				       then getLine' l
				       else echo >> getLine' (tail l)
			       _    -> echo >> getLine' (c:l)
	     user = Net.Interface { Net.rx = getLine, Net.tx = putStr }
	     loop =  do putStr "> "
			cmd <- getLine
			execute netstate user (words cmd)
			loop
	     shell = do putStrLn $ "Welcome to House!"++msg
		        loop
         forkH shell
         return (dispCh,kbdCh)

    execute netstate user cmd =
      case cmd of
        ["vbeinfo"] ->
	    do print (screenSize gfx)
	       print (fbInfo gfx)
               print =<< vbeInfo gfx
	["clear"] -> putStr "\f"
	"draw":args -> draw args
	_ -> execute2 netstate user cmd
      where
        putStr = Net.tx user
        print x = putStr . (++"\n") . show $ x

        draw args =
          do --t0 <- getRawSeconds
             mapM_ putStr [show n++' ':['0'..'z']++"\n"|n<-[1..count]]
	     --t1 <- getRawSeconds
	     --putStr $ show (t1-t0)++" CMOS seconds\n"
	  where
	    count = case args of
		      []  -> 50
		      s:_ -> case reads s of
			       (n,_):_ -> n
			       _ -> 1

--textShell :: Console -> Chan KeyPress -> H ()
textShell console netstate chan =
    do editor  <- newEditor chan console
       let user = Net.Interface { Net.rx=getLine editor "> ", Net.tx=putStr }
           loop =
	     do line <- getLine editor "> "
		putStrLn ""
		execute netstate user line
		loop
       loop
  where
    putStr =  putString console
    putStrLn = putStringLn console

    execute state user cmd =
      case cmd of
	"testmouse" ->
		  do forkH $ mapM_ (putStrLn.show) =<< getChanContents chan
		     mapM_ (putStrLn . show) =<< getChanContents
		       =<< launchMouseDecoder (1024,768)
		       =<< launchMouseDriver
	"testmouse2" ->
		  do forkH $ mapM_ (putStrLn.show) =<< getChanContents chan
		     testMouse2 putStr
        "loadfonts" -> putStrLn . either id (show . map fst) =<< loadFonts
	_ -> execute2 state user (words cmd)

execute2 exestate user cmd@(_:_) | last cmd=="&" =
  do forkH $ execute2 exestate user (init cmd)
     done
execute2 exestate@(netstate,pciState) user cmd =
  case cmd of
    []           -> done
    ["lspci"]       -> lsPCI 
    ["lspci","-t"]  -> pciTables

    ["net","dhcp"]    -> net DHCP
    ["net"]           -> net (fixed defaultIP defaultRouterIP)
    ["net",arg]       -> withIPaddr arg (net . flip fixed defaultRouterIP)
    ["net",arg1,arg2] -> withIPaddr arg1 $ \myIP->
			 withIPaddr arg2 $ \routerIP->
			 net (fixed myIP routerIP)
    ["net",arg1,arg2,arg3] -> withIPaddr arg1 $ \myIP->
			      withIPaddr arg2 $ \routerIP->
			      withIPaddr arg3 $ \netmask->
			      net (Fixed myIP routerIP netmask)
    ["ping",arg] -> withIPaddr arg ping
    ["udping",arg] -> withIPaddr arg $ udping "Hello!"
    ["udping",arg,msg] -> withIPaddr arg $ udping msg
    ["tftp","show",arg1,arg2] -> withIPaddr arg1 (tftpshow arg2)
    ["tftp","run",arg1,arg2] -> withIPaddr arg1 (tftprun arg2)
    ["tftp","put",arg1,path,contents] -> withIPaddr arg1 (tftpput path contents)
    ["telnet",arg1] -> withIPaddr arg1 (flip myTelnet Port.telnet)
    ["telnet",arg1,arg2] -> withIPaddr arg1 $ \ ip ->
			    case reads arg2 of
			      (port,""):_ -> myTelnet ip (Port.Port port)
			      _ -> putStrLn "Bad port number"
    ["arp"]      -> arp
    ["date"]     -> date
    ["lambda"]   -> putStrLn "Too much to abstract!"
    ["preempt"]  -> do forkH (putStrLn (repeat 'a'))
		       putStrLn (repeat 'b')
    ["ls"]       -> modules False
    ["ls","-l"]  -> modules True
    ["mem"]      -> print =<< Grub.memInfo
    ["run",file] -> run file
    ["gif",file] -> gifinfo file
--  ("osker":args) -> osker args putStrLn putStr
    ["reboot"]   -> reboot
    "wastemem":s:_ -> putStrLn (show (sum (reverse [1..read s::Integer])))
    _ -> putStrLn "?"
  where
    putStr = Net.tx user
    putStrLn s = putStr s >> putStr "\n"
    print x = putStrLn (show x)

    pciTables = do s <- takeMVar pciState
                   case s of
                     (_, Just _)  -> putMVar pciState s
                     (d, Nothing) -> do putStr "Parsing tables..."
                                        x <- loadPCITables
                                        case x of
                                          Left err -> do putStrLn err
                                                         putMVar pciState s
                                          Right t  -> 
                                            do putStrLn "done."
                                               putMVar pciState (d,Just t)
    probePCI  = do s <- takeMVar pciState
                   case s of
                     (Just _, _)  -> putMVar pciState s
                     (Nothing, t) -> do d <- Kernel.PCI.Probe.probe  
                                        putMVar pciState (Just d, t)

    getPCIdevs  = do s <- readMVar pciState
                     case s of
                       (Just d, _) -> return d
                       (Nothing,_) -> do probePCI
                                         getPCIdevs

    lsPCI     = do ds <- getPCIdevs
                   s <- readMVar pciState
                   let sh = case snd s of
                              Nothing -> (const Nothing, const Nothing) 
                              Just t  -> t
                   drawTree putStrLn sh ds

    findPCINet =
      do ds <- getPCIdevs
         let findEth init ven dev = (,) init # findDev ven dev ds
	 return $ msum [findEth NE2000.testnet 0x10ec 0x8029,
		        findEth Intel8255x.testnet 0x8086 0x1031]

    defaultIP       = IP.Addr 172 20 0 2
    defaultRouterIP = IP.Addr 172 20 0 1

    net config = maybe nonet net' =<< findPCINet
      where
        nonet = putStrLn "Found no supported PCI ethernet device"

	net' (testnet,dev) =
	    do n <- takeMVar netstate
	       case n of
		 Nothing -> do net <- testnet putStrLn (Just dev) config
			       case net of
				 Nothing -> putStrLn "Could not start network"
				 Just net -> do putMVar netstate (Just net)
						putStrLn "Started the network"
						forkH myTelnetServer
						done
		 _       -> do putMVar netstate n
			       putStrLn "The network is already running"

    myTelnetServer =
        netcmd $ telnetServer nodebug "House> " execute
      where
        nodebug _ = done
        execute iface s = execute2 exestate iface (words s)

    netcmd cmd =
      do n <- readMVar netstate
         case n of
           Nothing -> putStrLn "Start the network with the command 'net' first."
           Just net -> cmd net

    ping dstIP = netcmd $ \ Net{ping=ping} -> ping dstIP 55555 1

    udping msg ip =
       netcmd $ \ Net{udp=udp} ->
       do (p,iface) <-  UDP.listenAny udp
          Net.txT iface (ip,UDP.template p Port.echo (doUnparse msg))
	  reply <- Net.rxT iface (Just 1000000)
	  print reply
	  UDP.unlisten udp p

    arp = netcmd $ \ Net{dump=dump} -> print =<< dump

    tftpshow = tftpget putStrLn

    tftprun = tftpget (runUProc @@ bytesUProc)

    tftpget action filename serverIP =
      netcmd $ \ Net {udp=udp} ->
	either print act =<< tftpGet putStrLn udp serverIP filename "octet"
      where act = action . map (toEnum.fromEnum) . concatMap elems

    tftpput path contents serverIP =
      netcmd $ \ Net {udp=udp} ->
      print =<< tftpPut putStrLn udp serverIP path "octet" contents

    myTelnet ip port = netcmd $ \ net -> telnet user net (ip,port)

    withIPaddr arg cmd = case reads arg of
		           [(ipaddr,"")] -> cmd ipaddr
		           _ -> putStrLn "Bad IPv4 address"

    date = do (year, month, day, hour, min, sec) <- getRawTime
	      putStrLn $
                show (2000+fromIntegral year)
                ++ "-" ++ show2 month ++ "-" ++ show2 day
		++ " " ++ show2 hour ++ ":" ++ show2 min ++ ":" ++ show2 sec
	      putStrLn ""
       where show2 = drop 1 . show . (100+)

    modules long =
      do n<- moduleCount
	 when long $ putStrLn $ "Module count: "++show n
	 mapM_ (showModule long) [0..n-1]

    showModule False i = putStrLn =<< (moduleName i)
    showModule True i =
      do n <- moduleName i
	 r <- moduleRegion i
	 putStrLn $ show i++": "++n++" "++show r

    run = withModuleRegion (runUProc @@ moduleUProc)

    withModuleRegion action = withModule (action @@ moduleRegion)

    withModule action = maybe notFound action @@ pickModule putStrLn
      where notFound = putStrLn "File not found"

    gifinfo = withModuleRegion
                 (putStr .
		  either id (unlines . map describeGIF) .
		  parseGIFs @@
		  regionBytes)

    runUProc uproc =
      do r <- execUProc uproc 
         case r of  
           Left uproc' -> 
              do yield
                 runUProc uproc'
           Right msg ->
              putStrLn ("Exit Status: " ++ show msg)

    moduleUProc = buildUProc putStr . peekByteOff

    bytesUProc bs = buildUProc putStr (return.(a!))
      where a = listArray (0,fromIntegral (length bs)-1) bs :: UArray Word32 Word8

testMouse2 putStr =
    do putStr . unwords . map show =<< getChanContents
	 -- =<< launchMouseDecoder
	 =<< launchMouseDriver

--foreign import ccall "Schedule.h printAllThreads"
--    printAllThreads :: IO ()

idle = idle' 0
    where idle' n =
	      do yield
             	 --threadDelay 100000 -- microseconds(?)
		 if n >= 100000
		    then {- printAllThreads >> -} idle' 0
		    else idle' (n + 1)
